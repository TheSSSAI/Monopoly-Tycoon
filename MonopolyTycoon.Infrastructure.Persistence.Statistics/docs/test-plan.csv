test_id,feature_area,test_type,test_level,priority,automation_candidate,test_description,preconditions,test_steps,expected_result,test_data_needs,tools_required,estimated_effort,dependencies
TEST-FNC-UT-001,Core Engine: Data Models,Functional,Unit Testing,High,High Priority,"Verify PlayerState object serialization to JSON","A PlayerState object is instantiated with specific values for all fields (cash, status, properties, etc.).","1. Create a PlayerState object with known data. 2. Serialize the object to a JSON string using System.Text.Json. 3. Verify the JSON string contains the correct keys and values.","The resulting JSON string accurately represents the PlayerState object's data.","Instantiated PlayerState object.",NUnit,0.5,TASK-001-001-01
TEST-FNC-UT-002,Core Engine: Data Models,Functional,Unit Testing,High,High Priority,"Verify PlayerState object deserialization from JSON","A valid JSON string representing a PlayerState is available.","1. Create a known-good JSON string for a PlayerState. 2. Deserialize the string back into a PlayerState object. 3. Assert that every field in the new object matches the original data.","The deserialized PlayerState object is an identical deep copy of the original state represented by the JSON.","Valid PlayerState JSON string.",NUnit,0.5,TASK-001-001-01
TEST-FNC-UT-003,Core Engine: Data Models,Functional,Unit Testing,High,High Priority,"Verify GameState object serialization and deserialization (Cycle Test)","A complex GameState object is instantiated, containing multiple PlayerState objects and a full Board state.","1. Create a complex GameState object. 2. Serialize it to JSON. 3. Deserialize it back into a new GameState object. 4. Perform a deep comparison assertion between the original and deserialized objects.","The deserialized GameState object is a perfect, deep-copy replica of the original object, proving the serialization process is lossless.",Instantiated GameState object with multiple players and owned properties.,NUnit,1,TASK-001-001-04
TEST-FNC-UT-004,Core Engine: Game Factory,Functional,Unit Testing,High,High Priority,"Verify GameFactory creates a valid 2-player game","GameFactory service is instantiated.","1. Configure game setup for 1 human and 1 AI player. 2. Call `GameFactory.CreateNewGame(config)`. 3. Assert the returned GameState contains exactly 2 PlayerState objects. 4. Assert each player has the correct starting cash ($1500). 5. Assert the decks are shuffled (not in default order).","GameState object is created with 2 players, correct starting cash, and shuffled decks.",Game setup configuration object.,NUnit,0.5,TASK-001-001-06
TEST-FNC-UT-005,Core Engine: Game Factory,Functional,Unit Testing,High,High Priority,"Verify GameFactory creates a valid 4-player game with mixed AI difficulties","GameFactory service is instantiated.","1. Configure game setup for 1 human and 3 AIs with difficulties Easy, Medium, Hard. 2. Call `GameFactory.CreateNewGame(config)`. 3. Assert the GameState has 4 players. 4. Assert the AI players have the correct `ai_difficulty` enum set in their PlayerState.","GameState object is created with 4 players, and AI difficulties are assigned correctly.",Game setup configuration object.,NUnit,0.5,TASK-001-001-06
TEST-FNC-UT-006,Core Engine: Rule Engine,Functional,Unit Testing,High,High Priority,"Verify Turn Management correctly cycles through active players","A mock GameState with 3 active players is created.","1. Instantiate the RuleEngine. 2. Set the active player to index 0. 3. Call `RuleEngine.AdvanceTurn(gameState)`. 4. Assert the active player is now index 1. 5. Call `AdvanceTurn` again. 6. Assert the active player is now index 2. 7. Call `AdvanceTurn` again. 8. Assert the active player has wrapped around to index 0.","The active player index cycles correctly from 0 -> 1 -> 2 -> 0.","GameState with 3 active players.",NUnit,0.5,TASK-001-002-03
TEST-FNC-UT-007,Core Engine: Rule Engine,Functional,Unit Testing,High,High Priority,"Verify Turn Management correctly skips bankrupt players","A mock GameState with 4 players is created, where player at index 1 is bankrupt.","1. Instantiate the RuleEngine. 2. Set the active player to index 0. 3. Set player at index 1's status to 'Bankrupt'. 4. Call `RuleEngine.AdvanceTurn(gameState)`. 5. Assert the new active player is index 2, skipping the bankrupt player.","The turn advances from player 0 directly to player 2, bypassing the bankrupt player 1.","GameState with 4 players, one marked as bankrupt.",NUnit,0.5,TASK-001-002-03
TEST-SMK-IT-008,Main Menu,Smoke,Integration Testing,Critical,High Priority,"Verify 'New Game' button successfully transitions to the Game Setup scene","The application is launched and is on the Main Menu.","1. Using the Unity Test Framework, simulate a click on the 'New Game' button. 2. Wait for the scene transition to complete. 3. Assert that the currently active scene is the `GameSetup` scene.","The application successfully transitions from the `MainMenu` scene to the `GameSetup` scene.","N/A",Unity Test Framework,1,TASK-002-008-03
TEST-ACC-MAN-009,Main Menu,Non-Functional,System Testing,Medium,Manual Only,"Verify Main Menu keyboard navigation","The application is launched and is on the Main Menu.","1. Do not use the mouse. 2. Press the Tab key repeatedly. 3. Observe the visual focus indicator cycling through all interactive buttons ('New Game', 'Load Game', etc.). 4. Navigate focus to the 'New Game' button. 5. Press the Enter key.","A visual focus indicator is present and cycles logically. Activating a button with the Enter key triggers its action successfully.","N/A",Manual,0.5,TASK-002-008-04
TEST-FNC-UT-010,Gameplay: Dice Rolling,Functional,Unit Testing,High,High Priority,"Verify DiceService generates numbers within the correct range","DiceService is instantiated.","1. Call `DiceService.Roll()` 1000 times in a loop. 2. For each result, assert that `Die1` and `Die2` are both >= 1 and <= 6. 3. Assert that no values outside this range are ever generated.","All generated die values over 1000 rolls are within the inclusive range of 1 to 6.","N/A",NUnit,0.5,TASK-002-015-01
TEST-SEC-UT-011,Gameplay: Dice Rolling,Security,Unit Testing,High,High Priority,"Verify DiceService uses the cryptographically secure RNG","The DiceService class is available for inspection.","1. Perform a static code analysis or code review of `DiceService.cs`. 2. Verify that the implementation uses `System.Security.Cryptography.RandomNumberGenerator` and not `System.Random`.","The code exclusively uses the cryptographically secure RNG as required by REQ-1-042.","N/A",Static Analysis Tool / Manual Review,0.5,TASK-002-015-01
TEST-FNC-UT-012,Gameplay: Doubles Rule,Functional,Unit Testing,High,High Priority,"Verify Rule Engine grants an extra turn on a single doubles roll","A mock GameState with an active player is created.","1. Instantiate the RuleEngine. 2. Set the player's consecutive doubles count to 0. 3. Process a turn with a doubles roll. 4. Assert that the game state indicates it is still the same player's turn. 5. Assert the player's consecutive doubles count is now 1.","The turn does not advance to the next player, and the doubles counter is incremented.","GameState with active player, mocked dice roll result.",NUnit,1,TASK-002-015-03
TEST-FNC-UT-013,Gameplay: Doubles Rule,Functional,Unit Testing,High,High Priority,"Verify Rule Engine sends player to jail on third consecutive double","A mock GameState is created where a player has a consecutive doubles count of 2.","1. Instantiate the RuleEngine. 2. Set player's doubles count to 2. 3. Process a turn with a third doubles roll. 4. Assert the player's status is now `InJail`. 5. Assert the player's position is the Jail space index. 6. Assert the turn advances to the next player.","Player is sent to jail, their turn ends, and their doubles counter is reset.","GameState with active player, mocked dice roll result.",NUnit,1,TASK-002-015-03
TEST-FNC-IT-014,Gameplay: Movement,Integration Testing,Medium,Medium Priority,"Verify token movement animation completes correctly","The game is in a state where the player is ready to roll. The 3D board and token are visible.","1. Initiate a dice roll. 2. Observe the token animation. 3. The token should move space-by-space from the start position to the end position. 4. The game logic should wait for the animation to complete before proceeding.","The token animates smoothly along the board path and stops on the correct final space. The logical game state update occurs only after the animation is finished.","Test save file with player ready to move.",Unity,2,TASK-002-016-06
TEST-FNC-UT-015,Gameplay: Movement,Functional,Unit Testing,High,High Priority,"Verify 'Pass Go' salary logic correctly detects a pass","A mock GameState is created.","1. Instantiate the RuleEngine. 2. Set player's start position to 39 and their move amount to 5 (ending on space 4). 3. Call the movement logic. 4. Assert that the 'Pass Go' event/flag was triggered. 5. Set start position to 2 and move to 5. 6. Call logic again. 7. Assert 'Pass Go' was NOT triggered.","The Rule Engine correctly identifies when a move's start and end positions indicate a pass over space 0.","Mock PlayerState object.",NUnit,0.5,TASK-002-016-05
TEST-PER-MAN-016,Gameplay: Movement,Performance,System Testing,High,Manual Only,"Verify token movement and camera follow meet FPS requirements","The game is running on a PC that meets the 'Recommended' hardware specifications.","1. Start a 4-player game. 2. Play several turns, initiating token movements of various lengths. 3. Monitor the FPS using a performance overlay tool.","The average FPS remains at or above 60, and does not drop below 45 FPS during any token movement or camera animation, as per REQ-1-014.","N/A",Unity Profiler / FRAPS,1,TASK-002-016-03
TEST-FNC-E2E-017,Gameplay: 'Pass Go',Functional,System Testing,High,Medium Priority,"Verify 'Pass Go' salary payment full loop","The game is running. Player is on Boardwalk (space 39).","1. Roll the dice to get a result > 1. 2. Observe the token move past GO. 3. Observe the '+ $200' visual effect. 4. Observe the 'cha-ching' sound effect. 5. Observe the player's cash in the HUD update by +$200.","The player correctly receives $200, and all associated UI, visual, and audio feedback occurs correctly.","Test save file with player on Boardwalk.",Manual,0.5,US-019
TEST-FNC-IT-018,UI: HUD,Integration Testing,High,High Priority,"Verify HUD updates on game state changes","A game is running. The HUD is visible.","1. Trigger an event that changes a player's cash (e.g., pay rent). Assert the HUD cash value updates. 2. Trigger an event that changes the active player. Assert the turn indicator highlight moves to the correct player panel. 3. Trigger a player bankruptcy. Assert the player's panel visually changes to a 'Bankrupt' state.","The HUD is correctly subscribed to game events and updates all its elements (cash, turn indicator, player status) in real-time.","N/A",Unity Test Framework,2,US-049
TEST-CMP-MAN-019,UI: HUD,Non-Functional,System Testing,High,Manual Only,"Verify HUD layout on all supported aspect ratios","The game is running. The HUD is visible.","1. Set the game resolution to a 16:9 aspect ratio (1920x1080). Verify HUD layout is correct. 2. Set the game resolution to a 21:9 aspect ratio (2560x1080). Verify HUD panels are correctly anchored to corners and not stretched. 3. Set the game resolution to a 16:10 aspect ratio (1920x1200). Verify HUD layout is correct.","The HUD remains functional and visually correct on all supported aspect ratios, with no overlapping or clipped elements, as per REQ-1-016.","N/A",Manual,1,US-049
TEST-FNC-E2E-020,UI: Board Visuals,Functional,System Testing,High,Low Priority,"Verify property ownership markers are updated on all relevant events","The game is running.","1. Buy a property. Verify the ownership marker appears. 2. Mortgage that property. Verify the marker changes to a 'mortgaged' state. 3. Unmortgage it. Verify it returns to the normal state. 4. Trade the property to an AI. Verify the marker changes to the AI's color. 5. Go bankrupt to another player. Verify all your markers change to the creditor's color.","The on-board visual ownership markers are a perfect reflection of the logical game state through all ownership and status changes.","N/A",Manual,2,US-050
TEST-FNC-UT-021,Gameplay: Rent,Functional,Unit Testing,Critical,High Priority,"Verify rent calculation for a property in a monopoly with 3 houses","A mock GameState is created with property data.","1. Instantiate the RuleEngine. 2. Create a GameState where Player A owns a full monopoly (e.g., Light Blue properties) and one property has 3 houses. 3. Call `RuleEngine.CalculateRent()` for that property. 4. Assert the returned value is the correct, official rent for that property with 3 houses.","The calculated rent amount is exactly correct according to the official Monopoly rules.","Mock GameState and property data.",NUnit,1,TASK-001-002-05
TEST-REG-UT-022,Gameplay: Rent,Regression,Unit Testing,Critical,High Priority,"Verify rent calculation for all Railroads and Utilities","A mock GameState is created.","1. Instantiate the RuleEngine. 2. For each number of owned Railroads (1, 2, 3, 4), call `CalculateRent`. Assert the result is correct ($25, $50, $100, $200). 3. For Utilities, test with 1 owned and 2 owned, mocking different dice rolls. Assert the result is correct (4x dice roll, 10x dice roll).","The rent calculation is correct for all non-standard property types.","Mock GameState and mocked dice rolls.",NUnit,1,TASK-001-002-05
TEST-FNC-UT-023,Gameplay: Rent,Functional,Unit Testing,Critical,High Priority,"Verify zero rent is calculated for a mortgaged property","A mock GameState is created.","1. Instantiate the RuleEngine. 2. Set a property's status to 'mortgaged'. 3. Call `RuleEngine.CalculateRent()` for that property. 4. Assert the returned value is 0.","The rent calculation for a mortgaged property is always zero.","Mock GameState with a mortgaged property.",NUnit,0.5,TASK-001-002-05
TEST-SMK-E2E-024,Gameplay: Property Purchase,Smoke,System Testing,Critical,High Priority,"Verify the full property purchase workflow","Game is running. Player is positioned to land on an unowned property they can afford.","1. Roll the dice to land on the unowned property. 2. The purchase dialog appears. Click 'Buy'. 3. Observe cash deducted from HUD. 4. Observe ownership marker appear on the board space. 5. Open the Property Management screen. Verify the property is listed.","The player can successfully purchase a property, and the action is correctly reflected in the logical game state and all relevant UI/visual elements.","Test save file with player positioned before an unowned property.",Manual,1,US-030
TEST-FNC-UT-025,Gameplay: Property Purchase,Functional,Unit Testing,High,High Priority,"Verify Rule Engine rejects purchase with insufficient funds","A mock GameState is created.","1. Instantiate the RuleEngine. 2. Create a GameState where a player has $99 and the target property costs $100. 3. Call `RuleEngine.ExecutePurchaseProperty()`. 4. Assert the method returns a failure result. 5. Assert the player's cash and property list remain unchanged.","The purchase transaction is rejected, and the game state is not altered.","Mock GameState with player having insufficient funds.",NUnit,0.5,TASK-002-030-02
TEST-FNC-IT-026,Gameplay: Property Purchase,Integration Testing,High,Medium Priority,"Verify 'Buy' button is disabled with insufficient funds","Game is running. A test harness sets the player's cash to be less than the price of the next unowned property.","1. Move the player to the unowned property. 2. When the purchase dialog appears, assert that the 'Buy' button's `interactable` property is false.","The UI correctly prevents the player from attempting to purchase a property they cannot afford.","Test save file or debug command to set player cash.",Unity Test Framework,1,TASK-002-030-04
TEST-FNC-E2E-027,Gameplay: Jail,Functional,System Testing,High,Medium Priority,"Verify 'Go to Jail' token animation and turn end","Game is running. Player is on the space before 'Go to Jail'.","1. Roll a 1 to land on the 'Go to Jail' space. 2. Observe the token perform a special, direct animation to the 'In Jail' area of the board. 3. Verify the player's turn immediately ends and the turn indicator moves to the next player.","The 'Go to Jail' action triggers the correct special animation and correctly ends the player's turn.","Test save file with player before 'Go to Jail' space.",Manual,0.5,US-018
TEST-FNC-IT-028,Gameplay: Jail,Integration Testing,High,High Priority,"Verify full 'Pay Fine' workflow","Game is running. A test harness places the player in jail with sufficient funds.","1. Start the player's turn. The Jail Options UI appears. 2. Simulate a click on the 'Pay $50 Fine' button. 3. Assert the player's cash is reduced by $50. 4. Assert the player's status is now 'Active'. 5. Assert the 'Roll Dice' button is now enabled.","Clicking the 'Pay Fine' button successfully updates the player's state and allows them to proceed with a normal turn.","Test save file with player in jail.",Unity Test Framework,1,US-020
TEST-FNC-IT-029,Gameplay: Turn Phases,Integration Testing,High,High Priority,"Verify UI state changes based on turn phase","Game is running. It is the human player's turn.","1. At the start of the turn (PreRollManagement phase), assert 'Roll Dice' and 'Manage Properties' buttons are enabled. 2. Simulate a click on 'Roll Dice'. 3. After the dice roll starts, assert 'Roll Dice' and 'Manage Properties' buttons are disabled. 4. If doubles are rolled, wait for the move to complete. Assert the buttons are re-enabled for the extra turn.","The main action buttons in the UI are correctly enabled and disabled in synchronization with the backend turn phase state machine.","N/A",Unity Test Framework,2,US-029
TEST-FNC-E2E-030,Gameplay: Mortgaging,Functional,System Testing,High,Low Priority,"Verify full mortgage and unmortgage cycle","Game is running. Player owns an undeveloped, unmortgaged property.","1. Open Property Management screen. 2. Select the property and click 'Mortgage'. Confirm. 3. Verify cash in HUD increases by mortgage value. 4. Verify property marker on board shows 'mortgaged' state. 5. On a later turn, select the same property and click 'Unmortgage'. Confirm. 6. Verify cash in HUD decreases by mortgage value + 10%. 7. Verify property marker returns to normal.","The player can successfully mortgage and unmortgage a property, and all state changes and UI feedback are correct.","N/A",Manual,1,"US-038, US-039"
TEST-FNC-IT-031,Gameplay: Card Decks,Integration Testing,High,High Priority,"Verify card draw sequence and UI","Game is running. A test harness positions the player to land on a Chance space.","1. Move the player to the Chance space. 2. Assert that the Card Display UI appears. 3. Assert that the game is paused. 4. Simulate a click on the 'Continue' button. 5. Assert that the UI disappears and the game resumes. 6. Assert that the card's effect has been applied to the GameState.","Landing on a card space correctly triggers the UI, pauses the game, and the card's action is executed after player confirmation.","Test save file with player before a Chance space.",Unity Test Framework,2,US-024
TEST-FNC-UT-032,Gameplay: Card Decks,Functional,Unit Testing,High,High Priority,"Verify 'Get Out of Jail Free' card is not returned to deck","A mock GameState is created.","1. Instantiate the DeckManager. 2. Ensure the 'Get Out of Jail Free' card is in the deck. 3. Call the logic to draw and execute this specific card. 4. Assert the player's `get_out_of_jail_cards` count is now 1. 5. Assert the card is NOT at the bottom of the deck. 6. Assert the deck size has decreased by 1.","The 'Get Out of Jail Free' card is correctly removed from the deck's cycle and given to the player.","Mock GameState and DeckManager.",NUnit,1,US-024
TEST-FNC-E2E-033,Gameplay: Bankruptcy,Functional,System Testing,Critical,Medium Priority,"Verify asset liquidation and bankruptcy flow","Game is running. A test harness creates a situation where a player owes a debt they cannot pay with cash, but can with assets.","1. Trigger the debt (e.g., land on a hotel). 2. The 'Raise Funds' UI should appear. 3. Sell buildings and mortgage properties until the debt is covered. 4. Confirm the debt payment. 5. The game should resume normally. 6. Repeat the process but fail to raise enough funds. 7. The player should be declared bankrupt, the game over screen (US-047) should appear.","The game correctly forces the player to liquidate assets to pay a debt, and correctly triggers the bankruptcy and game over sequence if the debt cannot be covered.","Test save file where player is about to go bankrupt.",Manual,3,US-023
TEST-FNC-UT-034,Gameplay: Net Worth,Functional,Unit Testing,High,High Priority,"Verify Net Worth calculation is correct","A mock PlayerState is created with various assets.","1. Instantiate the NetWorthCalculator service. 2. Create a PlayerState with cash=$500, properties worth $1000 (one of which is mortgaged), and buildings worth $500. 3. Call `calculator.Calculate(playerState)`. 4. Assert the result is $2000 (500 + 1000 + 500). Mortgaged properties count at full value.","The net worth is calculated correctly according to the rules in REQ-1-048.","Mock PlayerState object.",NUnit,1,TASK-001-002-09
TEST-FNC-IT-035,Gameplay: Income Tax,Integration Testing,High,Medium Priority,"Verify Income Tax UI displays correct calculated value","Game is running. A test harness sets the player's net worth to a known value (e.g., $1850).","1. Move the player to the Income Tax space. 2. The Income Tax choice dialog should appear. 3. Assert that the text for the 10% option reads 'Pay 10% ($185)'.","The UI for the Income Tax choice correctly calculates and displays the 10% value.","Test save file to control player net worth.",Unity Test Framework,1,US-026
TEST-FNC-UT-036,Gameplay: Building Rules,Functional,Unit Testing,Critical,High Priority,"Verify 'Even Building' rule validation","A mock GameState is created with a 3-property monopoly.","1. Instantiate the RuleEngine. 2. Set houses to [1, 0, 0] for the monopoly. 3. Call `RuleEngine.ValidateBuildAction()` for the property with 1 house. Assert it fails. 4. Call `ValidateBuildAction` for a property with 0 houses. Assert it succeeds. 5. Set houses to [2, 2, 1]. Call `ValidateSellAction` for a property with 2 houses. Assert it fails. 6. Call `ValidateSellAction` for the property with 1 house. Assert it succeeds.","The Rule Engine's validation logic strictly enforces the even building and selling rules.","Mock GameState with a monopoly.",NUnit,2,TASK-001-002-07
TEST-FNC-E2E-037,Gameplay: Building Rules,Functional,System Testing,High,Medium Priority,"Verify full Hotel upgrade workflow","Game is running. Player has a monopoly with 4 houses on each property and sufficient cash.","1. Open Property Management UI. 2. Select a property in the set. The 'Build Hotel' option should be enabled. 3. Click 'Build Hotel' and confirm. 4. Verify player cash is deducted. 5. Verify the 4 house models on the board are replaced with 1 hotel model. 6. Verify bank's supply of houses increased by 4 and hotels decreased by 1.","The player can successfully upgrade to a hotel, and the action is correctly reflected in the logical game state and all visual elements.","Test save file with player ready to build a hotel.",Manual,1,US-035
TEST-FNC-E2E-038,Gameplay: Auction,Functional,System Testing,High,Medium Priority,"Verify property auction workflow","Game is running. Player lands on an unowned property.","1. In the purchase dialog, click 'Auction'. 2. The Auction UI appears. The bidding starts with the player who triggered the auction. 3. Place a bid. 4. Observe AI players place bids or withdraw. 5. Withdraw from the auction. Observe you can no longer bid. 6. The auction ends when one bidder remains. 7. Verify the winner pays the final bid amount and receives the property.","The auction system is functional, follows the correct rules of turn order and bidding, and correctly awards the property to the winner.","N/A",Manual,2,US-032
TEST-SMK-IT-039,Data Persistence: Save/Load,Smoke,Integration Testing,Critical,High Priority,"Verify Save and Load cycle integrity","A game is in a complex state mid-turn.","1. From the pause menu, save the game to Slot 1. 2. Return to the main menu. 3. Go to the Load Game screen. 4. Load the game from Slot 1. 5. Once loaded, meticulously compare the current game state (all player cash, properties, positions, turn order, deck order) to the state when it was saved.","The loaded game state is an exact, 1:1 replica of the game state at the moment of saving. The game is playable from the restored state.","N/A",Unity Test Framework / Manual,4,"US-061, US-062"
TEST-FNC-IT-040,Data Persistence: Save/Load,Functional,Integration Testing,High,High Priority,"Verify handling of corrupted save files","A valid save file exists in Slot 1.","1. Manually edit the `save_slot_1.json` file to make it invalid (e.g., delete a bracket) so its checksum will fail. 2. Launch the game and navigate to the Load Game screen. 3. Assert that Slot 1 is displayed with a 'Corrupted' status and the 'Load' button is disabled for it.","The application gracefully handles corrupted save files by identifying them and preventing the user from trying to load them, avoiding a crash.","One valid save file.",Manual / Unity Test Framework,1,US-063
TEST-FNC-IT-041,Data Persistence: Statistics DB,Functional,Integration Testing,High,High Priority,"Verify statistics are updated on game completion","A test SQLite database exists with known starting values (e.g., Wins = 2, Games Played = 5).","1. Play a short game to completion and win. 2. After the game summary screen, close the application. 3. Using a DB client, inspect the statistics database. 4. Assert that Wins is now 3 and Games Played is now 6. 5. Verify other stats (average duration, etc.) have been updated.","The application correctly updates the persistent player statistics in the SQLite database upon the conclusion of a game.","Test SQLite database file.",DB Browser for SQLite,2,US-013
TEST-PER-BEN-042,Data Persistence: Load Time,Performance,System Testing,High,Medium Priority,"Benchmark 'New Game' and 'Load Game' start times","Game is running on 'Recommended' hardware with an SSD.","1. From the main menu, start a timer and click 'New Game'. Stop the timer when the game board is fully rendered and interactive. Record the time. 2. From the main menu, start a timer and click to load a mid-game save file. Stop the timer when the board is interactive. Record time.","Both 'New Game' and 'Load Game' actions must complete in under 10 seconds, as per REQ-1-015.","Mid-game save file.",Manual / Automated Timer,1,"US-008, US-062"
TEST-FNC-E2E-043,AI,Functional,System Testing,High,Medium Priority,"Verify AI trading behavior differs by difficulty","Start a game with one 'Easy' AI and one 'Hard' AI. Position the player to have a property each AI needs for a monopoly.","1. Propose a very favorable trade to the 'Hard' AI (e.g., give them their needed property for a low price). Observe it accepts. 2. Propose a slightly unfavorable trade to the 'Hard' AI. Observe it declines. 3. Propose a very unfavorable trade to the 'Easy' AI. Observe it has a high chance of accepting.","The AI's trading decisions are clearly influenced by its difficulty setting, with 'Hard' AI playing more optimally and 'Easy' AI being more exploitable.","Test save file to set up a trade scenario.",Manual,2,US-059
TEST-FNC-E2E-044,AI,Functional,System Testing,High,Medium Priority,"Verify AI property management and building","Observe a game between 3 AI players (Easy, Medium, Hard) running at high speed.","1. Observe that all AIs buy properties they land on. 2. Observe that the 'Hard' AI prioritizes completing monopolies and begins building houses evenly as soon as possible. 3. Observe that the 'Easy' AI may not build houses even when it has a monopoly and cash.","The AI can play the game autonomously, and its strategic decisions about property management are clearly different across difficulty levels.","N/A",Manual,3,US-060
TEST-QLG-MAN-045,Core Engine: Rule Engine,Functional,System Testing,Critical,Manual Only,"Quality Gate: Verify Rule Engine Test Coverage","The project has been built and unit tests have been run.","1. Open the test results and code coverage report generated by the CI/CD pipeline. 2. Isolate the coverage percentage specifically for the Rule Engine components (`RuleEngine.cs`, `BankService.cs`, etc.). 3. Verify that the combined line coverage for these components is >= 70%.","The project meets the minimum code coverage quality gate of 70% for its core logic, as per REQ-1-025.","N/A","CI/CD Test Runner (e.g., coverlet)",1,TASK-001-002-12
TEST-REG-E2E-046,Installer,Regression,System Testing,Critical,Medium Priority,"Verify installer and uninstaller full cycle","The final installer .exe is available. A clean Windows 10/11 VM is available.","1. Run the installer, choosing a custom path and creating a desktop shortcut. 2. Verify installation completes and the game launches from the shortcut. 3. Go to 'Apps & features' and run the uninstaller. 4. Choose to KEEP personal data. 5. Verify application files are gone but the AppData folder remains. 6. Re-run the test, but choose to DELETE personal data. 7. Verify application files AND the AppData folder are gone.","The installer and uninstaller work flawlessly on target OSes, correctly handling all user choices for installation path, shortcuts, and data retention.","Clean Windows 10/11 VM.",Manual,2,US-001
TEST-FNC-IT-047,UI: Settings,Integration Testing,Medium,Medium Priority,"Verify Game Speed setting affects animations","Game is running.","1. Set Game Speed to 'Normal'. Trigger a token movement and note the duration. 2. Open settings, change speed to 'Fast'. Trigger the same movement. Assert the duration is shorter. 3. Change speed to 'Instant'. Trigger movement. Assert the token teleports with no animation.","The Game Speed setting correctly modifies the duration of token movement and other game animations as expected.","N/A",Unity Test Framework,1,US-055
TEST-FNC-IT-048,UI: Settings,Integration Testing,High,Medium Priority,"Verify Audio Volume settings control the AudioMixer","Game is running with music and SFX playing.","1. Open settings. 2. Move the 'Music' slider to 0. Assert the music mutes but SFX are still audible. 3. Move 'Music' back to 50% and 'SFX' to 0. Trigger a SFX. Assert it is silent but music plays. 4. Set both to 50% and move 'Master' to 0. Assert all game audio is muted.","The volume sliders in the UI are correctly wired to the Unity AudioMixer and control their respective audio groups independently.","N/A",Unity Test Framework,1,US-056
TEST-FNC-E2E-049,UI: Themes,Functional,System Testing,Medium,Low Priority,"Verify Theme Swapping functionality","Game is running.","1. Start a game with the 'Classic' theme. Note the appearance of the board, UI, and the background music. 2. Open settings and switch to the 'Futuristic' theme. 3. Resume the game. 4. Verify the board model/textures, UI skin, token models, and background music have all changed. 5. Return to main menu. Verify it also uses the new theme. 6. Restart the application. Verify it launches with the 'Futuristic' theme.","The theme system can dynamically swap all relevant visual and audio assets at runtime, and the player's selection is persisted between sessions.","N/A",Manual,2,US-066
TEST-FNC-IT-050,Help & Support: Rulebook,Integration Testing,Medium,Medium Priority,"Verify Rulebook search functionality","Game is running.","1. Open the rulebook from the pause menu. 2. In the search bar, type 'jail'. 3. Assert that the list of rules is filtered to only show sections containing the word 'jail'. 4. Clear the search bar. 5. Assert the full list of rules is displayed again.","The rulebook's search feature correctly filters the displayed content in real-time based on user input.","Rulebook JSON data file.",Unity Test Framework,1,US-060