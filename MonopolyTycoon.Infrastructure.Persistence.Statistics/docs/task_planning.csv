Title,Description,Type,Status,Priority,Assignee,Reporter,Due Date,Estimate,Labels,Sprint,Epic,Project,Attachments,Comments,Parent ID,Dependencies,Created At,Updated At,Skills Required
"EPIC-001: Core Engine & Game State","Establish all foundational data models, the core rule engine, and the services required to manage a complete and valid game state. This epic is the technical backbone of the entire application.","Epic","Backlog","Critical","","pm@project.com","",150.8,"core-engine,architecture","","","Monopoly Tycoon","","","","","","",""
"US-001-RELATED: Establish Core Data Models (GameState, PlayerState, Board)","Technical story to create the foundational data structures for the entire game, ensuring they are robust, serializable, and decoupled from the presentation layer. This underpins the entire application.","Story","Backlog","Critical","backend-lead@project.com","pm@project.com","",39.7,"data-model,core-engine,backend","Sprint 1","Core Engine & Game State","Monopoly Tycoon","","","EPIC-001","","","","C#,Data Modeling,JSON"
"[Backend] Define and Implement PlayerState and supporting Enums","Create the `PlayerState.cs` class based on REQ-1-031. Define the required enums `PlayerStatus.cs` and `AIDifficulty.cs`. The class must be marked as serializable and contain all specified fields.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",6,"data-model,core-engine","Sprint 1","Core Engine & Game State","Monopoly Tycoon","","","US-001-RELATED","","","","C#,Data Modeling"
"[Backend] Define and Implement Property and Board Data Models","Create C# classes for `PropertyData` and `Board`. The `PropertyData` class will hold all static information for a single property (price, rent, etc.). The `Board` class will manage the collection of 40 spaces. Create the `properties.json` file with data for all 28 properties.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",8.3,"data-model,core-engine,data-driven","Sprint 1","Core Engine & Game State","Monopoly Tycoon","","","US-001-RELATED","","","","C#,JSON,Data Modeling"
"[Backend] Define and Implement GameState Data Model","Create the `GameState.cs` class as the aggregate root for all game state, based on REQ-1-041. It will contain lists of `PlayerState` objects and other state-tracking objects for the board, bank, and card decks.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",6.2,"data-model,core-engine,save-load","Sprint 1","Core Engine & Game State","Monopoly Tycoon","","","US-001-RELATED","TASK-001-001-01,TASK-001-001-02","","","C#,Data Modeling"
"[Testing] Write Unit Tests for Data Model Serialization","Create NUnit tests to verify that the `GameState` and `PlayerState` objects can be successfully serialized to and deserialized from JSON using `System.Text.Json`. The test must confirm that a deserialized object is identical to the original.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",6.3,"unit-test,save-load,core-engine","Sprint 1","Core Engine & Game State","Monopoly Tycoon","","","US-001-RELATED","TASK-001-001-03","","","C#,NUnit,System.Text.Json"
"[Backend] Implement Game Factory Service","Create a `GameFactory.cs` service responsible for creating a new `GameState` object based on the configuration provided from the Game Setup screen (player count, AI difficulties, etc.). This service will initialize players with starting cash, shuffle decks, and set up the initial board state.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",8.3,"core-engine,game-setup,factory-pattern","Sprint 1","Core Engine & Game State","Monopoly Tycoon","","","US-001-RELATED","TASK-001-001-03","","","C#,Object-Oriented Design"
"[Testing] Write Unit Tests for Game Factory Service","Create NUnit tests for the `GameFactory` to ensure it correctly initializes a new game according to various configurations (2, 3, and 4 players).","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",5,"unit-test,core-engine","Sprint 1","Core Engine & Game State","Monopoly Tycoon","","","US-001-RELATED","TASK-001-001-05","","","C#,NUnit"
"US-001-RELATED: Develop Core Rule Engine","Technical story to implement the central `RuleEngine` service. This stateless service will contain the pure business logic for all game actions, ensuring it is highly testable and decoupled from Unity's presentation layer.","Story","Backlog","Critical","backend-lead@project.com","pm@project.com","",111.1,"rule-engine,architecture,backend","","Core Engine & Game State","Monopoly Tycoon","","","EPIC-001","US-001-RELATED","","","C#,Software Architecture,State Machines"
"[Backend] Design and Implement Rule Engine Skeleton","Create the initial `RuleEngine.cs` class and define the interfaces for its methods (e.g., `ValidateMove`, `ExecutePurchase`, `CalculateRent`). This task focuses on the architecture and creating a testable structure without implementing all the complex logic yet.","Task","Backlog","High","backend-lead@project.com","pm@project.com","",6.3,"architecture,core-engine,rule-engine","Sprint 1","Core Engine & Game State","Monopoly Tycoon","","","US-001-RELATED","TASK-001-001-03","","","C#,Software Architecture,NUnit"
"[Backend] Implement Turn Management Logic in Rule Engine","Implement the logic for managing the turn-based structure as per REQ-1-037 and REQ-1-038. This includes cycling through active players and managing the distinct phases of a turn (Pre-Turn, Pre-Roll, Roll, Movement, Action, Post-Roll).","Task","Backlog","High","backend-dev@project.com","pm@project.com","",8.7,"rule-engine,game-flow","Sprint 1","Core Engine & Game State","Monopoly Tycoon","","","US-001-RELATED","TASK-001-002-01","","","C#,State Machines"
"[Testing] Write Unit Tests for Turn Management Logic","Write NUnit tests to validate the turn management logic. Tests should cover advancing turns, skipping bankrupt players, and transitioning between turn phases.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",6,"unit-test,rule-engine","Sprint 1","Core Engine & Game State","Monopoly Tycoon","","","US-001-RELATED","TASK-001-002-02","","","C#,NUnit"
"EPIC-002: Gameplay Mechanics Implementation","Implement all core gameplay features, rules, and player actions as defined in the user stories. This includes movement, property transactions, card effects, jail, and bankruptcy.","Epic","Backlog","Critical","","pm@project.com","",349.3,"gameplay,rules","","","Monopoly Tycoon","","","","","","",""
"US-008: Start a new game from the main menu","As a player, I want to select a 'New Game' option from the main menu so that I can proceed to the game setup screen and configure a new match.","Story","Backlog","Must Have","frontend-lead@project.com","pm@project.com","",14.5,"ui,main-menu,navigation","Sprint 1","Gameplay Mechanics Implementation","Monopoly Tycoon","","","EPIC-002","","","","Unity UI,C#"
"[Frontend] Create Main Menu Scene and UI Prefabs","Create the main Unity scene for the main menu. Implement the basic UI layout with placeholder buttons for 'New Game', 'Load Game', 'Settings', and 'Quit'. This task sets up the visual foundation.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",6,"ui,main-menu","Sprint 1","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-008","","","","Unity UI"
"[Backend] Implement Scene Management Service","Create a simple, globally accessible `SceneManagementService.cs` to handle loading and transitioning between different Unity scenes (e.g., from `MainMenu` to `GameSetup`). This service will manage loading screens and asynchronous scene loading.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",4.2,"architecture,scene-management","Sprint 1","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-008","","","","C#,Unity"
"[Frontend] Implement Main Menu UI Controller","Create `MainMenuController.cs` to handle the logic for the main menu buttons. The `OnNewGameClicked` method will call the `SceneManagementService` to transition to the `GameSetup` scene.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",4,"ui,main-menu,controller","Sprint 1","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-008","TASK-002-008-01,TASK-002-008-02","","","Unity UI,C#"
"[Accessibility] Ensure Keyboard Navigation for Main Menu","Configure the Unity Event System and the main menu buttons to allow for full keyboard navigation. This includes setting up an explicit navigation order and ensuring buttons have a visible 'selected' or 'focused' state.","Task","Backlog","Medium","frontend-dev@project.com","pm@project.com","",0.3,"accessibility,ui,main-menu","Sprint 1","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-008","TASK-002-008-01","","","Unity UI"
"US-015: Roll two six-sided dice to start my move","As a player whose turn it is, I want to click a button to roll two virtual dice, so that I can determine the number of spaces my token will move and proceed with my turn.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",32,"gameplay,movement,rng","Sprint 2","Gameplay Mechanics Implementation","Monopoly Tycoon","","","EPIC-002","US-029","","","C#,Cryptography,Unity"
"[Backend] Implement Cryptographically Secure Dice Rolling Service","Create a `DiceService.cs` class that generates two random integers between 1 and 6. This service must use `System.Security.Cryptography.RandomNumberGenerator` as per REQ-1-042 to ensure fairness. The service should return a result object containing the value of each die and a boolean flag for `isDoubles`.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",6.2,"gameplay,rng","Sprint 2","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-015","","","","C#,Cryptography"
"[Backend] Implement Doubles and Jail Logic in Rule Engine","Extend the `RuleEngine` to handle the logic for doubles as per REQ-1-043. This includes tracking consecutive doubles, granting an extra turn, and sending the player to jail on the third consecutive double. This task is for the backend logic only.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",8.3,"rule-engine,game-flow","Sprint 2","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-015","TASK-001-002-02,TASK-002-015-01","","","C#"
"[Testing] Write Unit Tests for Doubles and Jail Logic","Create NUnit tests for the doubles-handling logic in the Rule Engine. This must cover the extra turn, turn ending, and go-to-jail-on-third-double scenarios.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",6,"unit-test,rule-engine","Sprint 2","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-015","TASK-002-015-02","","","C#,NUnit"
"[Frontend] Create Dice Roll UI and Controller","Implement the 'Roll Dice' button in the main game HUD. Create a `DiceController.cs` MonoBehaviour to manage the button's state (enabled/disabled) based on game events and to trigger the dice roll service when clicked.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",5.3,"ui,gameplay","Sprint 2","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-015","TASK-002-015-01","","","Unity UI,C#"
"[Frontend] Implement 3D Dice Roll Animation","Create the visual component of the dice roll. This involves creating or integrating 3D dice models and implementing a satisfying animation (either physics-based or pre-canned) that displays the result of the roll from the `DiceService`.","Task","Backlog","High","vfx-artist@project.com","pm@project.com","",6.2,"vfx,animation,3d","Sprint 2","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-015","TASK-002-015-04","","","Unity,Animation,3D"
"US-016: Watch my token automatically move around the board","As a player, I want to see my game token animate its movement from one space to the next after I roll the dice, so that I can visually track my progress around the board and have an immersive, intuitive gameplay experience.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",32.7,"gameplay,movement,animation,vfx","Sprint 2","Gameplay Mechanics Implementation","Monopoly Tycoon","","","EPIC-002","US-015,US-055","","","Unity,C#"
"[Backend] Develop Board Pathing and Coordinate System","Define the data structure that maps each of the 40 board space indices to their 3D world coordinates in the Unity scene. Create a `BoardPathingService` that can take a start index, an end index, and generate a list of waypoint coordinates for the token to follow.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",6,"gameplay,movement","Sprint 2","Gameplay Mechanics Implementation","Monopoly Tycoon","","Depends on TASK-004-022-01 (3D board asset)","US-016","TASK-004-022-01","","","C#,Unity"
"[Frontend] Implement Token Movement Animation Controller","Create a `TokenMovementController.cs` MonoBehaviour that takes a path of waypoints from the `BoardPathingService` and animates the token's `Transform` along that path. The movement should be space-by-space with a slight pause on each space.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",8.7,"animation,movement","Sprint 2","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-016","TASK-002-016-01","","","Unity,C#,Animation"
"[Frontend] Implement Smooth Camera Follow Script","Create a `CameraFollow.cs` script that makes the main camera smoothly follow the active player's token during its movement animation. The camera should maintain the isometric perspective and keep the token centered in the view.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",6.3,"camera,ux","Sprint 2","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-016","TASK-002-016-02","","","Unity,C#,Vector Math"
"[Backend] Implement 'Pass Go' Salary Logic in Rule Engine","Extend the Rule Engine with logic to detect when a player's move crosses the 'Go' space. When this occurs, the engine must credit the player with $200. This is the backend rule implementation.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",4.2,"rule-engine,economy","Sprint 2","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-016","TASK-001-002-01,TASK-001-002-10","","","C#"
"[Testing] Write Unit Tests for Board Pathing and Pass Go Logic","Create NUnit tests for the `BoardPathingService` and the `RuleEngine`'s 'Pass Go' detection logic. These tests do not require the Unity engine.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",4.2,"unit-test,movement","Sprint 2","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-016","TASK-002-016-01,TASK-002-016-04","","","C#,NUnit"
"[Integration] Orchestrate Full Movement Sequence","Integrate all components: After a dice roll, the `TurnController` should call the `RuleEngine` to get the new position, trigger the `BoardPathingService` and `TokenMovementController` to animate the move, and wait for the animation to complete before updating the final `PlayerState` and proceeding to the Action phase.","Task","Backlog","High","gameplay-lead@project.com","pm@project.com","",7.2,"integration,game-flow,movement","Sprint 2","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-016","TASK-002-016-02,TASK-002-016-03,TASK-002-016-04","","","Unity,C#"
"US-019: Collect $200 salary when passing or landing on GO","As a Player, I want my cash balance to be automatically credited with a $200 salary so that the game correctly follows the official rules and I receive the funds I am entitled to for completing a lap of the board.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",4.2,"gameplay,economy","Sprint 2","Gameplay Mechanics Implementation","Monopoly Tycoon","","","EPIC-002","US-016,US-049","","","C#,Unity"
"[Backend] Verify 'Pass Go' Salary Logic in Rule Engine","This task confirms the backend logic implemented in TASK-002-016-04 is complete and correct. The logic detects when a move crosses space 0 and triggers a transaction to pay the player $200.","Task","Backlog","High","backend-lead@project.com","pm@project.com","",0,"rule-engine,economy","Sprint 2","Gameplay Mechanics Implementation","Monopoly Tycoon","","Verification task for logic implemented as part of US-016.","US-019","TASK-002-016-04","","","C#"
"[Frontend] Implement Visual and Audio Feedback for Salary","Create a visual effect (e.g., a '+ $200' text animation near the player's HUD) and an audio cue (e.g., a 'cha-ching' sound) that triggers whenever the 'Pass Go' event occurs for the human player.","Task","Backlog","Medium","vfx-artist@project.com","pm@project.com","",4,"vfx,sfx,ui","Sprint 2","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-019","TASK-002-049-03","","","Unity UI,Unity VFX"
"[Integration] Ensure Salary Payment is Reflected in HUD","Verify that when the Rule Engine applies the $200 salary, the change to the `PlayerState.cash` correctly triggers the event that the HUD is listening for, resulting in an immediate visual update of the player's cash total.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",0.2,"integration,ui,hud","Sprint 2","Gameplay Mechanics Implementation","Monopoly Tycoon","","Verification task, logic covered by HUD implementation.","US-019","TASK-002-019-01,TASK-002-049-03","","","Unity,C#"
"US-049: View at-a-glance information for all players in the HUD","As a player, I want a persistent on-screen display showing the name, token, and current cash for every player, so that I can instantly assess the financial standing of my opponents and myself to make better strategic decisions throughout the game.","Story","Backlog","Must Have","frontend-lead@project.com","pm@project.com","",14.3,"ui,hud,core-ux","Sprint 3","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-049-01: Create Player Panel Prefab (4h, UI), TASK-002-049-02: Implement HUD Manager (6h, Frontend), TASK-002-049-03: Implement Event-Driven Updates (4.3h, Integration)","EPIC-002","US-009,US-011,US-014","","","Unity,C#"
"US-050: See clear visual indicators of property ownership on the board","As a player, I want clear, player-specific visual indicators on each property space on the board so that I can instantly understand who owns what, identify monopolies, and make faster strategic decisions.","Story","Backlog","Must Have","frontend-lead@project.com","pm@project.com","",26,"ui,3d,core-ux,vfx","Sprint 3","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-050-01: Create Ownership Marker Prefab (6h, 3D), TASK-002-050-02: Implement Board Visuals Controller (10h, Frontend), TASK-002-050-03: Integrate with Game Events (10h, Integration)","EPIC-002","US-030,US-038,US-040,US-047","","","Unity,3D,C#"
"[Backend] Implement Rent Calculation Logic","Develop the method in the Rule Engine to calculate the correct rent for any given property. This must account for monopoly status (doubled rent), development level (houses/hotels), property type (Railroads, Utilities), and mortgage status.","Task","Backlog","Critical","backend-lead@project.com","pm@project.com","",12,"rule-engine,economy","Sprint 3","Core Engine & Game State","Monopoly Tycoon","","","US-001-RELATED","TASK-001-001-02,TASK-001-002-01","","","C#,Algorithm Design"
"[Testing] Write Unit Tests for Rent Calculation","Write a comprehensive suite of NUnit tests to validate the rent calculation logic for every property type under all possible conditions.","Task","Backlog","Critical","qa-engineer@project.com","pm@project.com","",10.3,"unit-test,rule-engine","Sprint 3","Core Engine & Game State","Monopoly Tycoon","","","US-001-RELATED","TASK-001-002-04","","","C#,NUnit"
"US-030: Choose to buy an unowned property I land on","As a human player, I want to be presented with a clear, informative prompt when I land on an unowned property, giving me the option to purchase it for its listed price, so that I can strategically acquire assets, build monopolies, and progress towards winning the game.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",26.2,"gameplay,economy,property-management","Sprint 3","Gameplay Mechanics Implementation","Monopoly Tycoon","","","EPIC-002","US-016,US-050","","","Unity,C#"
"[Backend] Implement Property Purchase Logic in Rule Engine","Create the `ExecutePurchaseProperty` method in the `RuleEngine`. This logic should validate that the property is unowned and the player can afford it. If valid, it will deduct the cash from the player and transfer ownership.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",6,"rule-engine,property-management","Sprint 3","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-030","TASK-001-002-01","","","C#"
"[Testing] Write Unit Tests for Property Purchase Logic","Create NUnit tests for the `ExecutePurchaseProperty` method, covering success, insufficient funds, and attempting to buy an already owned property.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",4.2,"unit-test,rule-engine","Sprint 3","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-030","TASK-002-030-01","","","C#,NUnit"
"[Frontend] Create Property Purchase UI Dialog","Implement the modal UI (`PurchaseUI.prefab`) that appears when a player lands on an unowned property. It must display the property card details and have buttons for 'Buy' and 'Auction'.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",8,"ui,modal,property-management","Sprint 3","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-030","","","","Unity UI,C#"
"[Integration] Orchestrate Property Purchase Flow","In the `TurnController`, after a player lands on an unowned property, trigger the `PurchaseUI`. The UI controller must check affordability and set the 'Buy' button state. Clicking 'Buy' should call the `RuleEngine` to execute the purchase, and on success, update the board visuals and close the dialog.","Task","Backlog","High","gameplay-lead@project.com","pm@project.com","",8.3,"integration,game-flow,property-management","Sprint 3","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-030","TASK-002-030-01,TASK-002-030-03,TASK-002-050-01","","","Unity,C#"
"US-018: Be sent to jail for rolling three consecutive doubles","As a player, I want the game to automatically send my token to jail if I roll three consecutive doubles in a single turn, so that the game correctly enforces the official rules and maintains the strategic balance of risk and reward associated with rolling doubles.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",14.3,"gameplay,jail,rules","Sprint 4","Gameplay Mechanics Implementation","Monopoly Tycoon","","","EPIC-002","US-017,US-020","","","Unity,C#,Animation"
"[Backend] Verify Doubles and Jail Logic in Rule Engine","This task re-verifies and finalizes the backend logic implemented in TASK-002-015-02. The core logic handles tracking consecutive doubles and setting the player state to 'GoToJail' on the third double. This task ensures it's complete for this story.","Task","Backlog","High","backend-lead@project.com","pm@project.com","",0,"rule-engine,game-flow","Sprint 4","Gameplay Mechanics Implementation","Monopoly Tycoon","","Verification task.","US-018","TASK-002-015-02","","","C#"
"[Frontend] Implement Special 'Go to Jail' Token Animation","Create a specific animation for the token when a player is sent to jail. Instead of moving space-by-space, the token should move directly from its current position to the 'In Jail' area of the board, perhaps with a unique visual effect or sound.","Task","Backlog","High","vfx-artist@project.com","pm@project.com","",6,"animation,movement,jail","Sprint 4","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-018","TASK-002-016-02","","","Unity,C#,Animation"
"[Integration] Orchestrate the Three-Doubles-to-Jail Sequence","In the `TurnController`, integrate the logic and visuals. When the `RuleEngine` indicates a 'go to jail' state from a third double, the controller must bypass normal movement, call the special 'Go to Jail' animation, wait for it to complete, and then end the player's turn.","Task","Backlog","High","gameplay-lead@project.com","pm@project.com","",6.3,"integration,game-flow,jail","Sprint 4","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-018","TASK-002-015-02,TASK-002-018-02","","","Unity,C#"
"[Testing] Create Integration Test for Three-Doubles Rule","Create an integration test in the Unity Test Framework that uses a mocked `DiceService` to force three consecutive doubles. The test will verify that the `TurnController` correctly calls the Rule Engine, updates the player state to 'InJail', and ends the turn.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",2,"integration-test,game-flow","Sprint 4","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-018","TASK-002-018-03","","","C#,NUnit,Unity Test Framework"
"US-020: Get out of jail by paying the $50 fine","As a player who is in jail, I want to be presented with the option to pay a $50 fine at the beginning of my turn, so that I can immediately get out of jail and continue my turn normally, allowing me to maintain momentum in the game.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",20.3,"gameplay,jail,rules","Sprint 4","Gameplay Mechanics Implementation","Monopoly Tycoon","","","EPIC-002","US-018,US-049","","","Unity,C#"
"[Backend] Implement 'Pay Fine' Logic in Rule Engine","Create a method in the `RuleEngine` to handle the 'Pay Fine to Leave Jail' action. This method should validate if the player can afford the $50 fine, and if so, deduct the cash and update the player's status from `InJail` to `Active`.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",4.2,"rule-engine,jail","Sprint 4","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-020","TASK-001-002-01,TASK-001-002-10","","","C#"
"[Testing] Write Unit Tests for 'Pay Fine' Logic","Create NUnit tests for the `ExecutePayJailFine` method. Test cases must include a player with sufficient funds, insufficient funds, and the exact amount of funds.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",4,"unit-test,rule-engine,jail","Sprint 4","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-020","TASK-002-020-01","","","C#,NUnit"
"[Frontend] Create 'Jail Options' UI Dialog","Design and implement the modal UI dialog that appears when a jailed player's turn begins. This task is to create the container and the 'Pay $50 Fine' button. Other options (Roll, Use Card) will be added in their respective stories.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",8,"ui,modal,jail","Sprint 4","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-020","","","","Unity UI,C#"
"[Integration] Connect 'Pay Fine' Button to Rule Engine","Wire the `onClick` event of the 'Pay $50 Fine' button to the `TurnController`, which will then call the `RuleEngine`'s `ExecutePayJailFine` method. The controller must also dynamically enable/disable the button based on the player's cash.","Task","Backlog","High","frontend-lead@project.com","pm@project.com","",4,"integration,ui,jail","Sprint 4","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-020","TASK-002-020-01,TASK-002-020-03","","","Unity,C#"
"US-029: Manage my properties before rolling the dice","As a strategic player, I want a dedicated phase at the start of my turn to manage my properties (build, mortgage, trade) before I roll the dice, so that I can proactively adjust my financial position and property development to prepare for the opportunities and risks of my upcoming move.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",14.7,"gameplay,core-loop,ux","Sprint 4","Gameplay Mechanics Implementation","Monopoly Tycoon","","","EPIC-002","US-015,US-033,US-038,US-040,US-052","","","Unity,C#,State Machines"
"[Backend] Finalize Turn Phase State Machine in Rule Engine","Ensure the Turn Management logic from TASK-001-002-02 fully implements the distinct phases, especially the `PreRollManagement` phase. The engine must have a state that waits for an external trigger (the player clicking 'Roll Dice') before transitioning to the `Roll` phase.","Task","Backlog","High","backend-lead@project.com","pm@project.com","",6,"rule-engine,game-flow","Sprint 4","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-029","TASK-001-002-02","","","C#,State Machines"
"[Integration] Control UI Button States from TurnController","The `TurnController` will listen to state changes from the `RuleEngine`. It must enable/disable UI buttons like 'Roll Dice', 'Manage Properties', and 'Propose Trade' based on the current turn phase. Buttons should be enabled during `PreRollManagement` and disabled otherwise.","Task","Backlog","High","gameplay-lead@project.com","pm@project.com","",8.3,"integration,game-flow,ui-controller","Sprint 4","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-029","TASK-002-029-01,TASK-002-015-04,TASK-002-052-01,TASK-002-053-01","","","Unity,C#"
"[Testing] Write Integration Test for Turn Phase UI States","Create an integration test to verify that UI buttons are correctly enabled and disabled throughout a full turn cycle, including a doubles roll.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",0.3,"integration-test,game-flow","Sprint 4","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-029","TASK-002-029-02","","","C#,Unity Test Framework"
"US-038: Mortgage an undeveloped property to get cash","As a player managing my finances, I want to mortgage my undeveloped properties to the Bank, so that I can receive immediate cash to pay debts, fund purchases, or avoid bankruptcy.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",12,"gameplay,economy,property-management","Sprint 4","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-038-01: Implement Mortgage Logic (4h, Backend), TASK-002-038-02: Unit Tests for Mortgage (3h, Testing), TASK-002-038-03: Integrate with Prop Mgmt UI (5h, Integration)","EPIC-002","US-052,US-044","","","Unity,C#"
"US-039: Unmortgage a property by paying the principal plus 10% interest","As a Human Player managing my assets, I want to pay the bank to unmortgage one of my properties so that I can start collecting rent on it again and enable future development.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",12.2,"gameplay,economy,property-management","Sprint 4","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-039-01: Implement Unmortgage Logic (4.2h, Backend), TASK-002-039-02: Unit Tests for Unmortgage (3h, Testing), TASK-002-039-03: Integrate with Prop Mgmt UI (5h, Integration)","EPIC-002","US-038,US-052,US-044","","","Unity,C#"
"US-052: Access a dedicated property management screen","As a human player managing my in-game assets, I want to access a dedicated property management screen so that I can efficiently view the status of all my properties and take strategic actions like building or mortgaging from a single, consolidated interface.","Story","Backlog","Must Have","frontend-lead@project.com","pm@project.com","",18,"ui,ux,property-management","Sprint 4","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-052-01: Implement Property Mgmt UI Prefab (8h, UI), TASK-002-052-02: Implement Property Mgmt Controller (6h, Frontend), TASK-002-052-03: Integrate with Game State (4h, Integration)","EPIC-002","US-029,US-033,US-034,US-038","","","Unity,C#"
"US-021: Get out of jail by using a 'Get Out of Jail Free' card","As a player who is in jail and owns a 'Get Out of Jail Free' card, I want to be presented with the option to use it at the start of my turn, so that I can get out of jail immediately without spending money or relying on a lucky dice roll.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",20.2,"gameplay,jail,card-logic","Sprint 5","Gameplay Mechanics Implementation","Monopoly Tycoon","","","EPIC-002","US-018,US-024,US-025,US-020","","","Unity,C#"
"[Backend] Implement 'Use Card' Logic in Rule Engine","Create a method in the `RuleEngine` to handle the 'Use Get Out of Jail Free Card' action. This method validates if the player has a card, decrements their card count, updates their status to `Active`, and returns the used card to the bottom of the correct deck.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",6.3,"rule-engine,jail,card-logic","Sprint 5","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-021","TASK-002-020-01,TASK-002-024-01","","","C#"
"[Testing] Write Unit Tests for 'Use Card' Logic","Create NUnit tests for the `ExecuteUseGooJCard` method. Test cases should include a player with a card, without a card, and ensure the card is returned to the correct deck.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",6,"unit-test,rule-engine,jail","Sprint 5","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-021","TASK-002-021-01","","","C#,NUnit"
"[Frontend] Add 'Use Card' Button to Jail Options UI","Add a new button to the `JailOptionsUI.prefab` for the 'Use Get Out of Jail Free Card' option. This button should be visually distinct from the 'Pay Fine' button.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",2,"ui,jail","Sprint 5","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-021","TASK-002-020-03","","","Unity UI"
"[Integration] Connect 'Use Card' Button to Rule Engine","Wire the `onClick` event of the 'Use Card' button to the `TurnController`. The controller will call the `RuleEngine`'s `ExecuteUseGooJCard` method and dynamically enable/disable the button based on whether the player holds a card.","Task","Backlog","High","frontend-lead@project.com","pm@project.com","",4,"integration,ui,jail","Sprint 5","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-021","TASK-002-021-01,TASK-002-021-03","","","Unity,C#"
"US-022: Attempt to get out of jail by rolling for doubles","As a player in jail, I want to choose the option to roll the dice on my turn, so that I can attempt to get out of jail for free by rolling doubles, preserving my cash and 'Get Out of Jail Free' cards.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",20.3,"gameplay,jail,rng","Sprint 5","Gameplay Mechanics Implementation","Monopoly Tycoon","","","EPIC-002","US-015,US-018,US-043","","","Unity,C#"
"[Backend] Implement 'Roll for Doubles' Logic in Rule Engine","Create a method in the `RuleEngine` to handle the 'Roll for Doubles to Leave Jail' action. It should take the dice roll result as input. If doubles, it updates player status to `Active`. If not, it decrements `jail_turns_remaining`. A key rule is that leaving jail via doubles does NOT grant an extra turn.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",6.3,"rule-engine,jail,game-flow","Sprint 5","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-022","TASK-002-020-01","","","C#"
"[Testing] Write Unit Tests for 'Roll for Doubles' Logic","Create NUnit tests for the `ExecuteRollForJail` method. Cover the success (doubles) and failure (not doubles) scenarios, and specifically test that the extra turn flag is not set on success.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",6,"unit-test,rule-engine,jail","Sprint 5","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-022","TASK-002-022-01","","","C#,NUnit"
"[Frontend] Add 'Roll for Doubles' Button to Jail Options UI","Add a new button to the `JailOptionsUI.prefab` for the 'Roll for Doubles' option. This should be a primary action in the dialog.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",2,"ui,jail","Sprint 5","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-022","TASK-002-020-03","","","Unity UI"
"[Integration] Connect 'Roll' Button to Game Flow","Wire the `onClick` event of the 'Roll for Doubles' button. Clicking it should trigger the dice roll, then pass the result to the Rule Engine. Based on the outcome, the player either moves or their turn ends.","Task","Backlog","High","gameplay-lead@project.com","pm@project.com","",6,"integration,ui,jail","Sprint 5","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-022","TASK-002-022-01,TASK-002-022-03,TASK-002-015-01","","","Unity,C#"
"US-024: Draw a Chance card when landing on a Chance space","As a player, I want the game to automatically draw a Chance card and execute its instructions when my token lands on a Chance space, so that the game follows the official rules and introduces the element of luck and surprise that is core to the Monopoly experience.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",39.8,"gameplay,card-logic,rng","Sprint 5","Gameplay Mechanics Implementation","Monopoly Tycoon","","","EPIC-002","US-016,US-018,US-019,US-047","","","Unity,C#,Design Patterns"
"[Backend] Implement Card Deck Management Service","Create a `DeckManager.cs` service to manage the state of the Chance and Community Chest decks. It will be responsible for loading card definitions from JSON, shuffling the decks at the start of the game, drawing the top card, and returning used cards to the bottom.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",8,"card-logic,core-engine","Sprint 5","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-024","","","","C#,JSON"
"[Backend] Implement Card Action Execution using Command Pattern","Design and implement a system for executing card actions using the Command Pattern. Create an `ICardAction` interface and concrete classes for each type of card effect (e.g., `PayMoneyAction`, `MoveToAction`, `CollectFromPlayersAction`). This makes the system extensible and testable.","Task","Backlog","High","backend-lead@project.com","pm@project.com","",14.3,"card-logic,rule-engine,command-pattern","Sprint 5","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-024","TASK-001-002-01,TASK-002-024-01","","","C#,Design Patterns"
"[Testing] Write Unit Tests for Card Deck Management and Actions","Create NUnit tests for the `DeckManager` and each `ICardAction` implementation. Verify shuffling, drawing, returning cards, and the correct execution of each card's effect on a mock `GameState`.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",12,"unit-test,card-logic","Sprint 5","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-024","TASK-002-024-01,TASK-002-024-02","","","C#,NUnit"
"[Frontend] Implement Card Display UI","Create a modal UI prefab (`CardDisplayUI.prefab`) to display the text of a drawn Chance or Community Chest card. The UI should pause the game and require the user to click a 'Continue' button to dismiss it.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",4.8,"ui,modal,card-logic","Sprint 5","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-024","","","","Unity UI,C#"
"[Integration] Orchestrate the Card Drawing Sequence","In the `TurnController`, when a player lands on a Chance space, trigger the full sequence: call `DeckManager` to draw a card, show the `CardDisplayUI`, wait for player confirmation, execute the card's action via the `RuleEngine`, and then resume the game flow.","Task","Backlog","High","gameplay-lead@project.com","pm@project.com","",0.7,"integration,game-flow,card-logic","Sprint 5","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-024","TASK-002-024-02,TASK-002-024-04","","","Unity,C#"
"US-023: Be forced to pay the fine after failing to roll doubles for 3 turns in jail","As a player in jail for my third consecutive turn, I want the game to automatically force me to pay the $50 fine if I fail to roll doubles, so that the official game rules are enforced and my turn can proceed correctly.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",24.3,"gameplay,jail,bankruptcy","Sprint 6","Gameplay Mechanics Implementation","Monopoly Tycoon","","","EPIC-002","US-022,US-038,US-047","","","Unity,C#"
"[Backend] Implement Forced Payment Logic in Rule Engine","Extend the `RuleEngine`'s jail logic to handle the third-failed-roll scenario. If `jail_turns_remaining` is 1 and the roll is not doubles, the engine must attempt to charge the player $50. If successful, it releases them from jail. If not, it signals a debt is owed.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",8.3,"rule-engine,jail,bankruptcy","Sprint 6","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-023","TASK-002-022-01","","","C#"
"[Testing] Write Unit Tests for Forced Payment Logic","Create NUnit tests for the forced payment scenario. Cover cases where the player can pay, cannot pay, and successfully rolls doubles on the last turn (avoiding payment).","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",6,"unit-test,rule-engine,jail","Sprint 6","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-023","TASK-002-023-01","","","C#,NUnit"
"[Integration] Implement 'Raise Funds' Game Flow","In the `TurnController`, when the Rule Engine signals a 'MustPayDebt' state, the game flow must be paused. The `PropertyManagementUI` must then be displayed, allowing the player to mortgage properties or sell buildings. The UI should show the target amount to be raised.","Task","Backlog","High","gameplay-lead@project.com","pm@project.com","",10,"integration,game-flow,bankruptcy,property-management","Sprint 6","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-023","TASK-002-023-01,TASK-002-052-01","","","Unity,C#"
"US-025: Draw a Community Chest card when landing on a Community Chest space","As a player, I want the game to automatically draw a Community Chest card when my token lands on a Community Chest space, so that the game follows the official rules and the game state is updated accordingly without manual effort.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",14.3,"gameplay,card-logic,rng","Sprint 6","Gameplay Mechanics Implementation","Monopoly Tycoon","","","EPIC-002","US-016,US-018,US-047","","","C#,JSON"
"[Backend] Implement Community Chest Card Actions","Using the existing `ICardAction` framework, create the concrete action classes for all 16 Community Chest card effects. Populate the `community_chest_cards.json` file with the correct data.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",8.3,"card-logic,rule-engine","Sprint 6","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-025","TASK-002-024-02","","","C#,JSON"
"[Testing] Write Unit Tests for Community Chest Card Actions","Create NUnit tests for each of the new Community Chest `ICardAction` implementations, verifying they modify a mock `GameState` correctly.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",6,"unit-test,card-logic","Sprint 6","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-025","TASK-002-025-01","","","C#,NUnit"
"US-026: Choose to pay $200 or 10% of my net worth for Income Tax","As a human player, I want to be presented with a clear choice between paying a flat $200 or 10% of my total net worth when I land on the Income Tax space, so that I can make the most strategic financial decision to preserve my cash and improve my chances of winning, in accordance with the official game rules.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",24.3,"gameplay,economy,rules,ui","Sprint 6","Gameplay Mechanics Implementation","Monopoly Tycoon","","","EPIC-002","US-016,US-038,US-033,US-047","","","Unity,C#"
"[Backend] Implement Income Tax Logic in Rule Engine","Create the logic within the `RuleEngine` to handle the Income Tax space. This involves calling the `NetWorthCalculator` service and then presenting the two payment options as a required decision for the player.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",6,"rule-engine,economy","Sprint 6","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-026","TASK-001-002-01,TASK-001-002-08","","","C#"
"[Testing] Write Unit Tests for Income Tax Logic","Create NUnit tests for the Income Tax logic. Test that the 10% option is calculated correctly for various player asset levels and that choosing either option deducts the correct amount.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",5.2,"unit-test,rule-engine","Sprint 6","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-026","TASK-002-026-01","","","C#,NUnit"
"[Frontend] Create Income Tax Choice UI Dialog","Implement the modal UI dialog for the Income Tax choice. It must display the two options clearly, including the calculated value for the 10% choice. The dialog should be presented to the user and pause the game.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",8,"ui,modal","Sprint 6","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-026","","","","Unity UI,C#"
"[Integration] Connect Income Tax UI to Game Flow","Integrate the `IncomeTaxUI` with the `TurnController`. When the player lands on the space, the controller should get the calculated options from the `RuleEngine`, show the dialog, and wait for the player's choice. The choice is then passed back to the engine to be executed.","Task","Backlog","High","gameplay-lead@project.com","pm@project.com","",5,"integration,game-flow,ui","Sprint 6","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-026","TASK-002-026-01,TASK-002-026-03,TASK-002-023-03","","","Unity,C#"
"US-027: Pay a fixed Luxury Tax amount","As a player, I want the game to automatically deduct the fixed Luxury Tax amount from my cash when I land on that space, so that the game correctly follows the official rules and I can continue my turn without manual calculations.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",10,"gameplay,economy,rules","Sprint 6","Gameplay Mechanics Implementation","Monopoly Tycoon","","","EPIC-002","US-016,US-038,US-047,US-052","","","Unity,C#"
"[Backend] Implement Luxury Tax Logic in Rule Engine","Add logic to the `RuleEngine` to handle the Luxury Tax space. This is a simple, non-interactive action that attempts to deduct a fixed amount from the player's cash. It should signal a 'MustPayDebt' state if the player cannot afford it.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",3,"rule-engine,economy","Sprint 6","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-027","TASK-001-002-01","","","C#"
"[Testing] Write Unit Tests for Luxury Tax Logic","Create NUnit tests for the Luxury Tax logic, covering cases where the player can and cannot afford the tax.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",3,"unit-test,rule-engine","Sprint 6","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-027","TASK-002-027-01","","","C#,NUnit"
"[Integration] Orchestrate Luxury Tax Payment Flow","In the `TurnController`, when a player lands on Luxury Tax, call the `RuleEngine` logic. If successful, show a notification. If it results in a debt, trigger the 'Raise Funds' flow (TASK-002-023-03).","Task","Backlog","High","gameplay-lead@project.com","pm@project.com","",4,"integration,game-flow","Sprint 6","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-027","TASK-002-027-01,TASK-002-023-03","","","Unity,C#"
"US-028: Experience no gameplay effect when landing on Free Parking","As a player, I want the game to apply no special action when my token lands on the Free Parking space so that the game adheres to the official Monopoly rules and my turn proceeds correctly.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",3,"gameplay,rules","Sprint 6","Gameplay Mechanics Implementation","Monopoly Tycoon","","","EPIC-002","US-015,US-016,US-017,US-019","","","C#,NUnit"
"[Backend] Implement 'Free Parking' No-Op Logic","In the Rule Engine's logic for handling landing on spaces, explicitly define the action for the 'Free Parking' space as a 'No Operation' (No-Op). The engine should simply signal that the Action phase is complete without modifying the game state.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",2,"rule-engine,game-flow","Sprint 6","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-028","TASK-001-002-01","","","C#"
"[Testing] Write Unit Tests for 'Free Parking' Logic","Create NUnit tests to verify that processing the 'Free Parking' space does not alter the player's state (cash, properties, etc.).","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",1,"unit-test,rule-engine","Sprint 6","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-028","TASK-002-028-01","","","C#,NUnit"
"[Backend] Implement Building Validation Logic (Monopoly & Even-Build)","Implement the methods in the Rule Engine for validating building actions. This includes checking for monopoly ownership (REQ-1-053), enforcing the strict 'even building' rule for both buying and selling houses (REQ-1-054), and checking for bank supply.","Task","Backlog","Critical","backend-lead@project.com","pm@project.com","",12,"rule-engine,property-management","Sprint 7","Core Engine & Game State","Monopoly Tycoon","","","US-001-RELATED","TASK-001-002-01","","","C#,Algorithm Design"
"[Testing] Write Unit Tests for Building Validation Logic","Write NUnit tests to validate the monopoly and even-building rule logic for properties. Cover scenarios for 2-property and 3-property monopolies.","Task","Backlog","Critical","qa-engineer@project.com","pm@project.com","",10.3,"unit-test,rule-engine","Sprint 7","Core Engine & Game State","Monopoly Tycoon","","","US-001-RELATED","TASK-001-002-06","","","C#,NUnit"
"US-033: Build houses on properties in a complete color set","As a player who owns a complete color set, I want to purchase and build houses on those properties so that I can increase the rent value and gain a strategic advantage over my opponents.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",20,"gameplay,economy,property-management","Sprint 7","Gameplay Mechanics Implementation","Monopoly Tycoon","","","EPIC-002","US-029,US-034","","","Unity,C#,3D"
"[Backend] Implement `ExecuteBuildHouse` Transaction Logic","In the `RuleEngine`, implement the core transaction for building a house. This method will be called AFTER validation has passed. It should deduct the player's cash, decrement the bank's house supply, and update the property's house count.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",5.2,"rule-engine,property-management","Sprint 7","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-033","TASK-001-002-06","","","C#"
"[Testing] Write Unit Tests for `ExecuteBuildHouse` Transaction","Create NUnit tests to validate the state changes from the `ExecuteBuildHouse` method.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",4,"unit-test,rule-engine","Sprint 7","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-033","TASK-002-033-01","","","C#,NUnit"
"[Frontend] Add 3D House Models to Board","Implement the visual logic to place 3D house models on the correct property spaces on the game board. Create a system that can show 1 to 4 houses on a property in a visually appealing way.","Task","Backlog","High","vfx-artist@project.com","pm@project.com","",6,"3d,vfx,property-management","Sprint 7","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-033","TASK-004-022-01","","","Unity,3D"
"[Integration] Connect Building UI to Backend and Visuals","Integrate the `PropertyManagementUI`. Clicking a valid 'Build House' button should call the `RuleEngine`, and on success, trigger the `PropertyVisualsController` to update the 3D board and update the HUD.","Task","Backlog","High","gameplay-lead@project.com","pm@project.com","",5,"integration,property-management","Sprint 7","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-033","TASK-002-033-01,TASK-002-033-03,TASK-002-052-01","","","Unity,C#"
"US-034: Enforce even building rule for property development","As a player who owns a complete property set (a monopoly), I want the game to enforce the 'even building' rule when I try to purchase or sell houses, so that the game is fair, follows official Monopoly rules, and maintains its strategic economic balance.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",4,"gameplay,rules,property-management","Sprint 7","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-034-01: Implement UI Feedback for Even Building (4h, UI). Logic is covered by backend tasks.","EPIC-002","US-033,US-052,US-038","","","Unity,C#"
"US-035: Upgrade a set of 4 houses to a single hotel","As a strategic player who has acquired a full monopoly and developed it with four houses on each property, I want to purchase a hotel for each of those properties, returning the four houses to the bank, so that I can charge the maximum possible rent and increase my chances of winning the game.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",18,"gameplay,economy,property-management","Sprint 7","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-035-01: Implement Hotel Logic (5h, Backend), TASK-002-035-02: Unit Tests (4h, Testing), TASK-002-035-03: Add Hotel 3D Models (4h, 3D), TASK-002-035-04: UI/Integration (5h, Integration)","EPIC-002","US-033,US-034,US-052","","","Unity,C#,3D"
"US-036: Notify player of building shortage when attempting to build","As a player trying to develop my properties, I want to receive a clear, immediate notification when I am unable to build because the bank has run out of houses or hotels, so that I understand the game state and can adjust my strategy without thinking the game is broken.","Story","Backlog","Should Have","frontend-lead@project.com","pm@project.com","",6,"ui,ux,notifications,property-management","Sprint 7","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-036-01: Implement Shortage Check in UI (2h, Frontend), TASK-002-036-02: Implement Toast Notification UI (4h, UI)","EPIC-002","US-033,US-052","","","Unity,C#"
"US-031: Choose to send an unowned property to auction instead of buying it","As a Human Player, I want the option to decline the immediate purchase of an unowned property I land on so that I can trigger an auction for that property, allowing me to either acquire it for a lower price or force other players to spend their cash.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",4.3,"gameplay,economy,auction","Sprint 8","Gameplay Mechanics Implementation","Monopoly Tycoon","","","EPIC-002","US-030,US-032,US-016","","","Unity,C#"
"[Frontend] Verify 'Auction' Button on Purchase UI","This task confirms that the `PurchaseUI.prefab` created in TASK-002-030-03 includes the 'Auction' button and that it is always enabled, regardless of player cash.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",0.3,"ui,property-management","Sprint 8","Gameplay Mechanics Implementation","Monopoly Tycoon","","Verification task.","US-031","TASK-002-030-03","","","Unity UI"
"[Integration] Connect 'Auction' Button to Auction Flow","In the `PurchaseUIController`, wire the `onClick` event of the 'Auction' button to a method in the `TurnController` or a new `AuctionService` that initiates the auction sequence for the current property.","Task","Backlog","High","gameplay-lead@project.com","pm@project.com","",4,"integration,game-flow,auction","Sprint 8","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-031","TASK-002-030-03,TASK-002-032-01","","","Unity,C#"
"US-032: Participate in an auction for a property","As a Human Player, I want to participate in a turn-based auction for an unowned property, placing bids against AI opponents, so that I have a strategic opportunity to acquire properties that were not purchased outright and can compete to complete my sets or block my opponents.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",38.3,"gameplay,auction,economy,ui","Sprint 8","Gameplay Mechanics Implementation","Monopoly Tycoon","","","EPIC-002","US-031,US-045","","","Unity,C#,State Machines"
"[Backend] Implement Auction Service and State Machine","Create an `AuctionService.cs` to manage the auction process. This will include a state machine for the bidding loop: identify bidders, manage turn order (clockwise from triggering player), track bids, handle withdrawals, and determine the winner.","Task","Backlog","High","backend-lead@project.com","pm@project.com","",12,"auction,game-flow,state-machine","Sprint 8","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-032","TASK-001-002-01","","","C#,State Machines"
"[Testing] Write Unit Tests for Auction Service","Create NUnit tests for the `AuctionService`. Test the initialization, bidder ordering, bid validation, withdrawal logic, and winner determination.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",8.3,"unit-test,auction","Sprint 8","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-032","TASK-002-032-01","","","C#,NUnit"
"[Frontend] Implement Auction UI Dialog","Create the `AuctionUI.prefab` modal dialog. This UI must display the property being auctioned, the current high bid and bidder, the active bidder, and provide 'Place Bid' and 'Withdraw' buttons for the human player.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",10.3,"ui,modal,auction","Sprint 8","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-032","","","","Unity UI,C#"
"[Integration] Orchestrate Auction Game Flow","Integrate the `AuctionService` with the `AuctionUIController` and the AI system. The `AuctionService` will drive the flow, requesting bids from AI and showing the UI for the human player's turn. The game speed must be temporarily set to 'Normal'.","Task","Backlog","High","gameplay-lead@project.com","pm@project.com","",8,"integration,game-flow,auction","Sprint 8","Gameplay Mechanics Implementation","Monopoly Tycoon","","","US-032","TASK-002-032-01,TASK-002-032-03,TASK-003-016-02","","","Unity,C#"
"US-053: Use a two-panel interface to build and review trade offers","As a Human Player, I want a clear, two-panel trading interface that displays my items and the opponent's items side-by-side so that I can easily construct, review, and understand trade offers to make strategic decisions effectively.","Story","Backlog","Must Have","frontend-lead@project.com","pm@project.com","",36,"ui,ux,trading","Sprint 8","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-053-01: Implement Trading UI Panels (12h, UI), TASK-002-053-02: Implement Trading Controller/State (10h, Frontend), TASK-002-053-03: Implement Trade Validation (6h, Frontend), TASK-002-053-04: Integrate with Game Flow (8h, Integration)","EPIC-002","US-040,US-041,US-042,US-052","","","Unity,C#"
"US-040: Initiate a trade with an AI opponent during my turn","As a human player, I want to open a trading interface, select an AI opponent, and construct a trade offer involving cash, properties, and cards, so that I can strategically negotiate to acquire the properties I need to complete monopolies and increase my chances of winning the game.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",18,"gameplay,trading,ai-interaction","Sprint 9","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-040-01: Implement Trade Initiation Flow (8h, Integration), TASK-002-040-02: Unit Tests for Trade Proposal Object (5h, Testing), TASK-002-040-03: Integrate with Pre-Roll Phase (5h, Integration)","EPIC-002","US-029,US-053","","","Unity,C#"
"US-041: Respond to a trade offer from an AI opponent","As a human player, I want to be presented with a clear, interactive dialog when an AI opponent proposes a trade, showing exactly what is being offered and requested, so that I can evaluate the strategic value of the deal and make an informed decision to either accept or decline it.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",18,"gameplay,trading,ai-interaction,ui","Sprint 9","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-041-01: Implement AI Proposal Dialog (6h, UI), TASK-002-041-02: Integrate AI Proposal Event (6h, Integration), TASK-002-041-03: Implement Accept/Decline Logic (6h, Backend)","EPIC-002","US-053,US-040,US-032","","","Unity,C#"
"[AI] Implement Behavior Tree Framework","Design and implement a reusable, data-driven Behavior Tree (BT) framework. This core system will be the foundation for all AI decision-making.","Task","Backlog","Critical","ai-lead@project.com","pm@project.com","",12,"ai,architecture,behavior-tree","Sprint 9","Artificial Intelligence","Monopoly Tycoon","","","US-059","","","","C#,Design Patterns"
"[Testing] Unit Tests for Behavior Tree Framework","Write comprehensive NUnit tests for the core Behavior Tree nodes and the BT executor to ensure the framework is robust and functions as expected.","Task","Backlog","Critical","qa-engineer@project.com","pm@project.com","",8,"unit-test,ai,behavior-tree","Sprint 9","Artificial Intelligence","Monopoly Tycoon","","","US-059","TASK-003-014-01","","","C#,NUnit"
"[AI] Develop AI Configuration System","Create the system for loading AI behavior parameters from an external JSON file (REQ-1-063). This includes defining the data structure for the parameters and implementing the file loading service.","Task","Backlog","High","ai-lead@project.com","pm@project.com","",6.2,"ai,data-driven,json","Sprint 9","Artificial Intelligence","Monopoly Tycoon","","","US-059","","","","C#,JSON"
"[Testing] Unit Tests for AI Configuration Loading","Write NUnit tests to validate the loading and parsing of the AI configuration JSON file. Ensure it handles missing files and malformed data gracefully.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",4,"unit-test,ai,json","Sprint 9","Artificial Intelligence","Monopoly Tycoon","","","US-059","TASK-003-015-01","","","C#,NUnit"
"[AI] Implement AI Trading Logic (Evaluation and Proposal)","Using the Behavior Tree framework, implement the specific logic for evaluating and proposing trades. This includes creating BT nodes for assessing property value, strategic importance, and player financial states.","Task","Backlog","High","ai-dev@project.com","pm@project.com","",12,"ai,trading,behavior-tree","Sprint 9","Artificial Intelligence","Monopoly Tycoon","","","US-059","TASK-003-014-01","","","C#,AI"
"[Testing] Unit Tests for AI Trading Logic","Write NUnit tests for the core AI trading evaluation functions. Use mock game states to verify that the AI makes sensible decisions based on its parameters.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",8,"unit-test,ai,trading","Sprint 9","Artificial Intelligence","Monopoly Tycoon","","","US-059","TASK-003-017-01","","","C#,NUnit"
"[AI] Implement AI Property Management Logic","Implement the Behavior Tree logic for AI decisions related to property management: when to buy properties, when and what to build (respecting even-building), and when to mortgage/unmortgage.","Task","Backlog","High","ai-dev@project.com","pm@project.com","",14.3,"ai,property-management,behavior-tree","Sprint 10","Artificial Intelligence","Monopoly Tycoon","","","US-060","TASK-003-014-01","","","C#,AI"
"[Testing] Unit Tests for AI Property Management","Write NUnit tests for the AI's property management decision nodes. Test scenarios like buying a final monopoly property, deciding to build with low cash, etc.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",10.3,"unit-test,ai,property-management","Sprint 10","Artificial Intelligence","Monopoly Tycoon","","","US-060","TASK-003-016-01","","","C#,NUnit"
"[AI] Implement AI Auction Bidding Logic","Create the Behavior Tree logic for AI participation in auctions. The AI should calculate a maximum bid price for a property based on its strategic value and the AI's current financial state.","Task","Backlog","High","ai-dev@project.com","pm@project.com","",8.3,"ai,auction,behavior-tree","Sprint 10","Artificial Intelligence","Monopoly Tycoon","","","US-060","TASK-003-014-01","","","C#,AI"
"[Testing] Unit Tests for AI Auction Logic","Write NUnit tests to verify the AI's auction bidding behavior. Test that it drops out of bidding when the price exceeds its calculated maximum.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",6,"unit-test,ai,auction","Sprint 10","Artificial Intelligence","Monopoly Tycoon","","","US-060","TASK-003-016-03","","","C#,NUnit"
"US-042: Propose a counter-offer to an AI's trade proposal","As a strategic player negotiating with an AI, I want to respond to their trade proposal with a modified counter-offer, so that I can fine-tune the deal to better suit my strategic goals instead of being limited to a simple accept or decline.","Story","Backlog","Should Have","gameplay-lead@project.com","pm@project.com","",18,"gameplay,trading,ai-interaction,ux","Sprint 10","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-042-01: Implement Counter-Offer UI Flow (8h, UI/Integration), TASK-002-042-02: Pre-populate Trade UI (6h, Frontend), TASK-002-042-03: Integration Tests for Counter-Offer (4h, Testing)","EPIC-002","US-041,US-053","","","Unity,C#"
"US-043: Receive a non-intrusive notification when AI players trade with each other","As a human player, I want to see a non-intrusive notification when a trade is completed between two AI opponents, so that I can maintain situational awareness of the game's strategic landscape and make more informed decisions.","Story","Backlog","Should Have","frontend-lead@project.com","pm@project.com","",6,"ui,notifications,ai-interaction","Sprint 10","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-043-01: Create Trade Notification UI (3h, UI), TASK-002-043-02: Integrate with AI Trade Event (3h, Integration)","EPIC-002","US-017","","","Unity,C#"
"US-059: AI evaluates and responds to trade offers","As an AI Player, I want to evaluate trade offers from the human player based on my difficulty level, so that I can make strategic decisions to accept, decline, or counter-offer.","Story","Backlog","Must Have","ai-lead@project.com","pm@project.com","",4,"ai,trading,rules","Sprint 10","Gameplay Mechanics Implementation","Monopoly Tycoon","","Verification story for AI logic developed in Sprint 9. TASK-002-059-01: Integrate AI evaluation with player-initiated trades (4h, Integration).","EPIC-002","US-015,US-017,US-040","","","C#,AI"
"US-046: See a victory screen when I am the last player remaining","As a human player who has won the game, I want to be presented with a distinct and celebratory victory screen, so that my achievement is acknowledged and I feel a sense of accomplishment, encouraging me to play again.","Story","Backlog","Must Have","frontend-lead@project.com","pm@project.com","",18,"game-flow,ui,ux","Sprint 11","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-046-01: Implement Victory Screen UI (8h, UI), TASK-002-046-02: Implement Win Condition Logic (6h, Backend), TASK-002-046-03: Integrate with Game End Flow (4h, Integration)","EPIC-002","US-013,US-047,US-048","","","Unity,C#"
"US-047: See a game-over screen when I go bankrupt","As a human player, I want to be shown a clear 'Game Over' screen immediately after I am declared bankrupt, so that I understand I have lost the game and am no longer an active participant.","Story","Backlog","Must Have","gameplay-lead@project.com","pm@project.com","",20,"game-flow,ui,ux,bankruptcy","Sprint 11","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-047-01: Implement Game Over UI (6h, UI), TASK-002-047-02: Implement Post-Loss AI Simulation (10h, Backend), TASK-002-047-03: Integrate with Bankruptcy Event (4h, Integration)","EPIC-002","US-013,US-048","","","Unity,C#"
"US-048: View a detailed game summary screen after a match ends","As a Human Player who has just completed a game, I want to be shown a detailed game summary screen so that I can review the performance of all players, understand the final outcome, and feel a sense of closure for the match.","Story","Backlog","Must Have","frontend-lead@project.com","pm@project.com","",18,"game-flow,ui,ux,statistics","Sprint 11","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-048-01: Implement Game Summary UI (10h, UI), TASK-002-048-02: Implement Session Stats Aggregation (4h, Backend), TASK-002-048-03: Integrate with Game End (4h, Integration)","EPIC-002","US-046,US-047","","","Unity,C#"
"US-013-RELATED: Implement Bankruptcy System","Technical story to implement the complete bankruptcy workflow. This includes asset liquidation (selling buildings, mortgaging properties), transfer of assets to a creditor (player or bank), and final player state change.","Story","Backlog","Critical","backend-lead@project.com","pm@project.com","",30,"gameplay,bankruptcy,economy,rules","Sprint 11","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-013-01: Implement Asset Liquidation Logic (12h, Backend), TASK-002-013-02: Unit Tests for Bankruptcy (8h, Testing), TASK-002-013-03: Integrate with Debt Events (10h, Integration)","EPIC-002","US-038,US-033","","","C#"
"US-061: Save game progress into one of several save slots","As a player, I want to save my current game progress into a specific save slot at the start of my turn, so that I can safely exit the game and resume playing from the same point at a later time.","Story","Backlog","Must Have","backend-lead@project.com","pm@project.com","",26.2,"save-load,persistence,core-feature","Sprint 12","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-061-01: Implement GameState Serialization Service (10h, Backend), TASK-002-061-02: Implement Save Game UI Screen (8.2h, UI), TASK-002-061-03: Integrate Save Flow with Game State (8h, Integration)","EPIC-002","US-054","","","C#,JSON,Unity"
"US-062: Load a game from a previously saved slot","As a returning player, I want to select and load a previously saved game from the main menu, so that I can seamlessly continue my progress without having to start over.","Story","Backlog","Must Have","backend-lead@project.com","pm@project.com","",24.3,"save-load,persistence,core-feature","Sprint 12","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-062-01: Implement GameState Deserialization Service (10h, Backend), TASK-002-062-02: Implement Load Game UI Screen (8.3h, UI), TASK-002-062-03: Implement Game State Restoration (6h, Integration)","EPIC-002","US-061,US-063","","","C#,JSON,Unity"
"US-063: Visually indicate unusable save files on the load game screen","As a Returning Player, I want to see a clear, visual indication on the load game screen for any save files that are corrupted or incompatible with the current game version, so that I can immediately understand which games I can no longer play and avoid the frustration of attempting to load a broken save file.","Story","Backlog","Must Have","backend-lead@project.com","pm@project.com","",24.3,"save-load,ux,error-handling","Sprint 12","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-063-01: Implement Checksum and Version Validation (10h, Backend), TASK-002-063-02: Update Load UI for Invalid States (8.3h, UI), TASK-002-063-03: Implement Save File Migration Service (6h, Backend)","EPIC-002","US-061,US-062","","","C#,JSON,Unity"
"US-013: View my persistent historical gameplay statistics","As a returning player, I want to access a dedicated screen that displays my cumulative gameplay statistics from all my completed games, so that I can track my performance, see my win/loss record, and feel a sense of long-term progression and achievement.","Story","Backlog","Should Have","backend-lead@project.com","pm@project.com","",18,"statistics,persistence,ui","Sprint 13","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-013-04: Setup SQLite Database and Schema (6h, Backend), TASK-002-013-05: Implement Statistics Tracking Service (6h, Backend), TASK-002-013-06: Create Statistics UI Screen (6h, UI)","EPIC-002","US-011,US-046,US-047","","","C#,SQLite,Unity"
"US-064: View a list of my top 10 victories","As a competitive player who tracks my performance, I want to access a Top 10 High Score screen from the main menu, so that I can review my most successful victories, see how I'm improving, and be motivated to beat my own records.","Story","Backlog","Should Have","frontend-lead@project.com","pm@project.com","",12,"statistics,persistence,ui","Sprint 13","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-064-01: Implement High Score DB Logic (5h, Backend), TASK-002-064-02: Create High Score UI Screen (7h, UI)","EPIC-002","US-011,US-046,US-048","","","C#,SQLite,Unity"
"US-054: Access an in-game settings menu","As a player in the middle of a game, I want to access a settings menu without quitting the match, so that I can adjust game options, save my progress, or exit the game in a controlled manner.","Story","Backlog","Must Have","frontend-lead@project.com","pm@project.com","",10,"ui,ux,core-feature","Sprint 13","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-054-01: Implement Pause/Resume System (6h, Backend), TASK-002-054-02: Create Settings Menu UI Shell (4h, UI)","EPIC-002","US-049","","","Unity,C#"
"US-055: Adjust the game speed to make animations faster or instant","As an experienced player, I want to change the game speed setting so that I can reduce waiting times for animations and AI decisions, allowing for a faster-paced game.","Story","Backlog","Should Have","gameplay-lead@project.com","pm@project.com","",14.7,"ux,settings,game-flow","Sprint 13","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-055-01: Implement Global Time/Speed Manager (6h, Backend), TASK-002-055-02: Create Game Speed UI in Settings (4.7h, UI), TASK-002-055-03: Integrate Animations and AI Delays with Speed Manager (4h, Integration)","EPIC-002","US-054,US-061,US-062","","","Unity,C#"
"US-056: Adjust master, music, and sound effect volumes independently","As a player, I want to independently adjust the master, music, and sound effect volume levels so that I can customize the game's audio to my personal preference for a more enjoyable experience.","Story","Backlog","Must Have","audio-engineer@project.com","pm@project.com","",8,"audio,settings,ux","Sprint 13","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-056-01: Setup Unity AudioMixer (3h, Audio), TASK-002-056-02: Create Volume Sliders in UI (3h, UI), TASK-002-056-03: Implement Settings Persistence for Audio (2h, Backend)","EPIC-002","US-054","","","Unity,Audio"
"US-057: Reset all my historical statistics and high scores","As a Data-Conscious Player, I want an option in the settings menu to permanently delete all my historical gameplay statistics and high scores after a confirmation prompt, so that I can have a clean slate and start tracking my performance from scratch.","Story","Backlog","Could Have","backend-dev@project.com","pm@project.com","",6,"settings,data-management,ux","Sprint 14","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-057-01: Implement Reset Logic in DB Service (3h, Backend), TASK-002-057-02: Implement Reset Button and Confirmation Dialog in UI (3h, UI)","EPIC-002","US-013,US-064,US-054","","","C#,SQLite,Unity"
"US-058: Provide a bulk deletion option for all saved games via the settings menu","As a user who wants to manage my game data, I want an option in the settings menu to delete all my saved games at once, with a confirmation step, so that I can easily clear out old progress and start fresh without having to manually find and delete files on my computer.","Story","Backlog","Could Have","backend-dev@project.com","pm@project.com","",4.3,"settings,data-management,ux","Sprint 14","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-058-01: Implement Delete Saves Logic (2h, Backend), TASK-002-058-02: Implement Delete Button and Confirmation Dialog in UI (2.3h, UI)","EPIC-002","US-054,US-061","","","C#,Unity"
"US-065: Export my top score history to a text file","As a competitive player who tracks my performance, I want to export my Top 10 High Scores list to a simple, human-readable text file, so that I can easily share my achievements with friends or keep a personal record of my best games outside of the application.","Story","Backlog","Could Have","backend-dev@project.com","pm@project.com","",4.3,"statistics,feature,ux","Sprint 14","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-065-01: Implement Export Logic (2.3h, Backend), TASK-002-065-02: Implement Export Button and File Dialog (2h, Integration)","EPIC-002","US-064","","","C#,Unity"
"US-066: Change the game's visual and audio theme","As a player, I want to select and apply different visual and audio themes for the game, so that I can customize my experience and keep the game feeling fresh and engaging over multiple playthroughs.","Story","Backlog","Could Have","frontend-lead@project.com","pm@project.com","",24.3,"themes,ux,visuals,audio","Sprint 14","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-066-01: Implement Asset Swapping System (12h, Architecture), TASK-002-066-02: Create Theme Selection UI (6.3h, UI), TASK-002-066-03: Integrate All Assets into Theming System (6h, Integration)","EPIC-002","US-054","","","Unity,C#"
"US-060: Access and search a digital rulebook from game menus","As a player, I want to open a searchable digital rulebook from both the main menu and the in-game pause menu so that I can quickly find and clarify specific game rules without leaving the application.","Story","Backlog","Should Have","frontend-dev@project.com","pm@project.com","",10,"ux,help,ui","Sprint 14","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-060-01: Implement Rulebook UI (6h, UI), TASK-002-060-02: Implement Search and Data Loading (4h, Backend)","EPIC-002","US-054,US-008","","","Unity,C#,JSON"
"US-069: Access a searchable in-game rulebook","As a Player, I want to open a searchable digital rulebook from the pause menu, so that I can quickly clarify specific game rules without leaving the application.","Story","Backlog","Should Have","frontend-dev@project.com","pm@project.com","",10,"ux,help,ui","Sprint 14","Gameplay Mechanics Implementation","Monopoly Tycoon","","This is a duplicate of US-060. Merging tasks.","EPIC-002","US-054","","","Unity,C#,JSON"
"US-070: Start an optional interactive tutorial","As a New Player, I want to start an optional, interactive tutorial, so that I can learn the basic rules and controls in a guided, hands-on environment.","Story","Backlog","Should Have","gameplay-lead@project.com","pm@project.com","",24.3,"tutorial,onboarding,ux","Sprint 14","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-070-01: Develop Tutorial Scripting Engine (12h, Backend), TASK-002-070-02: Implement Tutorial UI Overlays (8.3h, UI), TASK-002-070-03: Create Tutorial Content Script (4h, Content)","EPIC-002","US-008,US-015,US-030,US-044","","","Unity,C#"
"US-067: Be notified of available game updates on startup","As a Game Player, I want to be notified in a non-intrusive way when a new version of the game is available upon startup, so that I can easily access the latest features, bug fixes, and improvements without having to manually check for updates.","Story","Backlog","Could Have","backend-dev@project.com","pm@project.com","",6,"feature,maintenance,networking","Sprint 15","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-067-01: Implement Version Check Service (3h, Backend), TASK-002-067-02: Implement Update Notification UI (3h, UI)","EPIC-002","","","","C#,Unity"
"US-068: View the game's data privacy statement","As a privacy-conscious user, I want to access and read a clear data privacy statement from the main menu, so that I can understand what data the game collects, how it is stored, and confirm that it operates entirely offline, which builds my trust in the application.","Story","Backlog","Should Have","frontend-dev@project.com","pm@project.com","",4.2,"ui,legal,main-menu","Sprint 15","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-002-068-01: Implement Privacy UI Screen (2.2h, UI), TASK-002-068-02: Load Content from External File (2h, Backend)","EPIC-002","US-008","","","Unity,C#"
"[Backend] Implement Core Transaction Logic for Bank","Implement methods within the Rule Engine or a dedicated Bank Service to handle all financial transactions: paying players, collecting money from players, and transferring funds between players. Ensure all transactions are atomic.","Task","Backlog","High","backend-dev@project.com","pm@project.com","",6,"rule-engine,economy","Sprint 15","Core Engine & Game State","Monopoly Tycoon","","","US-001-RELATED","TASK-001-002-01","","","C#"
"[Testing] Write Unit Tests for Core Transaction Logic","Write NUnit tests for the financial transaction methods to ensure they correctly and atomically update player cash balances.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",5.2,"unit-test,rule-engine","Sprint 15","Core Engine & Game State","Monopoly Tycoon","","","US-001-RELATED","TASK-001-002-10","","","C#,NUnit"
"[Backend] Implement Net Worth Calculation Service","Create a dedicated, testable service or method that calculates a player's total net worth according to the rule in REQ-1-048 (cash + printed value of all properties + total cost of all buildings).","Task","Backlog","High","backend-dev@project.com","pm@project.com","",4.2,"rule-engine,economy,utility-service","Sprint 15","Core Engine & Game State","Monopoly Tycoon","","","US-001-RELATED","TASK-001-001-01,TASK-001-001-02","","","C#"
"[Testing] Write Unit Tests for Net Worth Calculation","Write NUnit tests to validate the `NetWorthCalculator` service. Test cases should include a player with no assets, with properties, with mortgaged properties, and with houses/hotels.","Task","Backlog","High","qa-engineer@project.com","pm@project.com","",4,"unit-test,rule-engine","Sprint 15","Core Engine & Game State","Monopoly Tycoon","","","US-001-RELATED","TASK-001-002-08","","","C#,NUnit"
"[QA] Finalize Rule Engine Test Suite and Coverage Report","Perform a final review of all unit tests for the Rule Engine and its components. Generate a code coverage report and ensure the 70% minimum requirement from REQ-1-025 is met or exceeded. Add any missing tests for critical paths.","Task","Backlog","High","qa-lead@project.com","pm@project.com","",12,"qa,unit-test,rule-engine,quality-gate","Sprint 15","Core Engine & Game State","Monopoly Tycoon","","","US-001-RELATED","TASK-001-002-03,TASK-001-002-05,TASK-001-002-07,TASK-001-002-09,TASK-001-002-11","","","C#,NUnit,QA"
"US-001: Install the game on my Windows PC","As a new player who has just acquired the game, I want to run a simple, guided installer on my Windows PC so that I can get the game set up correctly and quickly, allowing me to start my first playthrough without technical frustration.","Story","Backlog","Must Have","build-engineer@project.com","pm@project.com","",14,"installer,distribution,release","Sprint 15","Gameplay Mechanics Implementation","Monopoly Tycoon","","TASK-004-034-01: Create Inno Setup Script (8h, Build), TASK-004-034-02: Integrate Code Signing (2h, Build), TASK-004-034-03: Manual Installer Testing (4h, QA)","EPIC-002","","","","Inno Setup,CI/CD"
"[Docs] Create High-Level Architecture Documentation","Create and maintain high-level system architecture diagrams as specified in REQ-1-096. This includes component diagrams, data flow diagrams, and a description of the overall software architecture.","Task","Backlog","Medium","architect@project.com","pm@project.com","",16,"documentation,architecture","Sprint 15","Technical Infrastructure & Standards","Monopoly Tycoon","","","US-001-RELATED","","","","Diagramming"
"[Docs] Create Data Schemas for Save File and Database","Create and maintain formal data schemas for the save file JSON format and the statistics SQLite database, as required by REQ-1-096.","Task","Backlog","Medium","backend-lead@project.com","pm@project.com","",8,"documentation,data-model,json,sqlite","Sprint 15","Technical Infrastructure & Standards","Monopoly Tycoon","","","US-001-RELATED","TASK-001-001-03,TASK-002-013-04","","","JSON Schema,SQL"
"[Docs] Document AI Behavior Parameters","Create a detailed description of all configurable AI behavior parameters and their effects, as specified in REQ-1-096. This is crucial for future balancing and tuning.","Task","Backlog","Medium","ai-lead@project.com","pm@project.com","",8.3,"documentation,ai,configuration","Sprint 15","Technical Infrastructure & Standards","Monopoly Tycoon","","","US-059","TASK-003-015-01","","","AI"