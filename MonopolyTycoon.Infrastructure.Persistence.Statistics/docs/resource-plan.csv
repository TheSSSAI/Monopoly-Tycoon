task_id,task_name,primary_skill,secondary_skill,complexity_level,estimated_hours,required_experience,team_size,dependencies,critical_path,resource_notes,alternative_approach
EPIC-001,"Core Engine & Game State",Backend Development,Quality Assurance,Critical,150.8,Lead,2,"",Yes,"This epic is the project's technical foundation. Requires a dedicated Lead Backend Engineer to oversee architecture and a QA engineer for TDD approach. Risk of cascading delays is high (RISK-D-001).","Use mock services to allow parallel development of gameplay features, but this requires careful interface design upfront."
US-001-RELATED,"Establish Core Data Models (GameState, PlayerState, Board)",Backend Development,Data Engineering,Critical,39.7,Lead,1,"",Yes,"Foundational data architecture. Requires a senior or lead developer with strong data modeling and C# skills. Changes here will have a cascading impact (RISK-T-002).","Use a more lightweight data structure initially and refactor later, but this is not recommended due to high technical debt."
TASK-001-001-01,"[Backend] Define and Implement PlayerState and supporting Enums",Backend Development,"",Medium,6,Mid,1,US-001-RELATED,Yes,"Straightforward implementation based on REQ-1-031. Good task for a mid-level C# developer.",""
TASK-001-001-02,"[Backend] Define and Implement Property and Board Data Models",Backend Development,Data Engineering,Medium,8.3,Mid,1,US-001-RELATED,Yes,"Requires careful data entry for properties.json. The data model should be validated against the official rulebook.",Use a script to parse data from a spreadsheet to reduce manual entry errors.
TASK-001-001-03,"[Backend] Define and Implement GameState Data Model",Backend Development,"",High,6.2,Senior,1,"TASK-001-001-01,TASK-001-001-02",Yes,"Core data structure. Changes here are high-impact. Requires senior oversight to ensure serializability and future-proofing.",""
TASK-001-001-04,"[Testing] Write Unit Tests for Data Model Serialization",Quality Assurance,Backend Development,Medium,6.3,Mid,1,"TASK-001-001-03",Yes,"Critical for ensuring save/load reliability. The QA engineer should work closely with the backend developer.","Rely on manual save/load testing, but this is highly inefficient and error-prone."
TASK-001-001-05,"[Backend] Implement Game Factory Service",Backend Development,"",Medium,8.3,Mid,1,"TASK-001-001-03",Yes,"Initializes the entire game state. Logic must be robust to handle all setup configurations.","Hardcode a single game setup and add configuration options later, delaying customization features."
TASK-001-001-06,"[Testing] Write Unit Tests for Game Factory Service",Quality Assurance,Backend Development,Medium,5,Mid,1,"TASK-001-001-05",Yes,"Ensures game starts in a valid state for all player counts.",""
US-001-RELATED,"Develop Core Rule Engine",Backend Development,Quality Assurance,Critical,111.1,Lead,2,US-001-RELATED,Yes,"The most complex and high-risk part of the project (RISK-T-001). Requires TDD and rigorous peer review. A dedicated senior/lead developer is essential.","Use a third-party rules engine library if available, but this would reduce control over custom logic."
TASK-001-002-01,"[Backend] Design and Implement Rule Engine Skeleton",Backend Development,DevOps,High,6.3,Lead,1,"TASK-001-001-03",Yes,"Architectural task defining the core interfaces. Critical for testability and decoupling from Unity.","Develop logic organically without a defined structure, leading to high technical debt and poor testability."
TASK-001-002-02,"[Backend] Implement Turn Management Logic in Rule Engine",Backend Development,"",High,8.7,Senior,1,"TASK-001-002-01",Yes,"Complex state machine logic. Requires a developer with experience in state management patterns.","Implement with simple boolean flags, which becomes unmanageable as complexity grows."
TASK-001-002-03,"[Testing] Write Unit Tests for Turn Management Logic",Quality Assurance,Backend Development,Medium,6,Mid,1,"TASK-001-002-02",Yes,"Validates the core game loop.",""
EPIC-002,"Gameplay Mechanics Implementation",Backend Development,Frontend Development,Critical,349.3,Lead,4,"",No,"This epic covers the bulk of the interactive features. Requires a cross-functional team of frontend, backend, and QA.","Reduce scope by prioritizing 'Must Have' stories and moving 'Should Have'/'Could Have' to a post-launch update."
US-008,"Start a new game from the main menu",Frontend Development,Backend Development,Low,14.5,Mid,2,EPIC-002,Yes,"Requires coordination between frontend (UI scene) and backend (scene management).",""
TASK-002-008-01,"[Frontend] Create Main Menu Scene and UI Prefabs",Frontend Development,Design,Low,6,Junior,1,US-008,Yes,"Good introductory task for a junior Unity developer. Requires UI assets from the design team.","Use basic Unity UI elements as placeholders if final designs are not ready."
TASK-002-008-02,"[Backend] Implement Scene Management Service",Backend Development,"",Low,4.2,Mid,1,US-008,Yes,"A core utility service. Should be designed to be simple and globally accessible.","Use Unity's built-in SceneManager directly in controllers, but this leads to tighter coupling."
TASK-002-008-03,"[Frontend] Implement Main Menu UI Controller",Frontend Development,Backend Development,Low,4,Junior,1,"TASK-002-008-01,TASK-002-008-02",Yes,"Simple logic connecting UI buttons to the backend service.",""
TASK-002-008-04,"[Accessibility] Ensure Keyboard Navigation for Main Menu",Frontend Development,Quality Assurance,Low,0.3,Junior,1,"TASK-002-008-01",No,"Low effort but high impact for accessibility. Should be a standard part of all UI development.","Skip keyboard navigation, making the game inaccessible to some users."
US-015,"Roll two six-sided dice to start my move",Backend Development,Frontend Development,Medium,32,Senior,2,US-029,Yes,"Requires a combination of secure backend logic (RNG) and polished frontend animation. RISK-T-006 notes the RNG might be over-engineered.",""
TASK-002-015-01,"[Backend] Implement Cryptographically Secure Dice Rolling Service",Backend Development,"",Medium,6.2,Mid,1,US-015,Yes,"The cryptographic requirement adds complexity. Developer should have familiarity with `System.Security.Cryptography`.","If performance is an issue, switch to a well-seeded `System.Random` as it's sufficient for an offline game (RISK-T-006)."
TASK-002-015-02,"[Backend] Implement Doubles and Jail Logic in Rule Engine",Backend Development,"",High,8.3,Senior,1,"TASK-001-002-02,TASK-002-015-01",Yes,"Core game logic with multiple state transitions. Requires careful implementation to avoid infinite loops or incorrect state.",""
TASK-002-015-03,"[Testing] Write Unit Tests for Doubles and Jail Logic",Quality Assurance,Backend Development,Medium,6,Mid,1,"TASK-002-015-02",Yes,"Critical for ensuring the core loop functions correctly.",""
TASK-002-015-04,"[Frontend] Create Dice Roll UI and Controller",Frontend Development,"",Low,5.3,Mid,1,"TASK-002-015-01",Yes,"Connects the UI button to the backend service. State management (enabled/disabled) is key.",""
TASK-002-015-05,"[Frontend] Implement 3D Dice Roll Animation",Design,Frontend Development,Medium,6.2,Mid,1,"TASK-002-015-04",No,"Requires a 3D artist or technical artist. The choice between physics-based vs. canned animation affects complexity.","Use a simple 2D animation or fade effect to show the result if 3D is too time-consuming."
US-016,"Watch my token automatically move around the board",Frontend Development,Backend Development,High,32.7,Senior,2,"US-015,US-055",Yes,"Complex integration of backend pathing, frontend animation, and camera control. High impact on user experience.","Use simple 'teleport' movement, but this would severely detract from the 'board game' feel."
TASK-002-016-01,"[Backend] Develop Board Pathing and Coordinate System",Backend Development,Frontend Development,Medium,6,Mid,1,TASK-004-022-01,Yes,"Requires collaboration with the 3D artist to get world coordinates from the final board model.","Hardcode coordinates, but this will require rework if the board model changes."
TASK-002-016-02,"[Frontend] Implement Token Movement Animation Controller",Frontend Development,"",High,8.7,Senior,1,"TASK-002-016-01",Yes,"The core animation logic. Needs to be robust and handle callbacks to the game controller upon completion.","Use a simple linear interpolation, which may look less polished than a tweening library or animation curve."
TASK-002-016-03,"[Frontend] Implement Smooth Camera Follow Script",Frontend Development,"",Medium,6.3,Mid,1,"TASK-002-016-02",No,"Key for visual polish. Requires good understanding of Unity's camera system and vector math.","Keep a static camera, but this can result in the token moving off-screen or being hard to see."
TASK-002-016-04,"[Backend] Implement 'Pass Go' Salary Logic in Rule Engine",Backend Development,"",Low,4.2,Mid,1,"TASK-001-002-01,TASK-001-002-10",Yes,"Straightforward rule logic based on start and end position indices.",""
TASK-002-016-05,"[Testing] Write Unit Tests for Board Pathing and Pass Go Logic",Quality Assurance,Backend Development,Medium,4.2,Mid,1,"TASK-002-016-01,TASK-002-016-04",Yes,"Ensures the mathematical correctness of movement calculations.",""
TASK-002-016-06,"[Integration] Orchestrate Full Movement Sequence",Backend Development,Frontend Development,High,7.2,Senior,1,"TASK-002-016-02,TASK-002-016-03,TASK-002-016-04",Yes,"Critical integration task. Requires a lead or senior developer to oversee the interaction between multiple complex systems.","Tightly couple the systems, making them harder to debug and maintain."
US-019,"Collect $200 salary when passing or landing on GO",Backend Development,Frontend Development,Low,4.2,Mid,2,"US-016,US-049",Yes,"This story is primarily about adding the visual/audio feedback and verifying the integration of backend logic developed in US-016.",""
TASK-002-019-01,"[Backend] Verify 'Pass Go' Salary Logic in Rule Engine",Backend Development,"",Low,0,Lead,1,"TASK-002-016-04",Yes,"This is a verification/check task, effort is included in the original implementation task.",""
TASK-002-019-02,"[Frontend] Implement Visual and Audio Feedback for Salary",Design,Frontend Development,Low,4,Junior,1,"TASK-002-049-03",No,"Requires VFX/SFX assets. Good task for a junior frontend developer or technical artist.","Show a simple text log message instead of polished effects."
TASK-002-019-03,"[Integration] Ensure Salary Payment is Reflected in HUD",Quality Assurance,"",Low,0.2,Mid,1,"TASK-002-019-01,TASK-002-049-03",No,"Verification task. The core work is in the HUD's event-driven update system.",""
US-049,"View at-a-glance information for all players in the HUD",Frontend Development,Design,Medium,14.3,Mid,1,"US-009,US-011,US-014",Yes,"Foundational UI element for gameplay. Must be designed to be scalable and responsive (RISK-Q-002).","Display information only for the active player, reducing situational awareness for the user."
US-050,"See clear visual indicators of property ownership on the board",Frontend Development,Design,High,26,Senior,2,"US-030,US-038,US-040,US-047",No,"High impact on usability. Requires close collaboration between 3D artist and frontend developer. Must be event-driven to avoid desyncs.","Use simple color changes on the board texture, which is less visually appealing and less accessible."
TASK-001-002-04,"[Backend] Implement Rent Calculation Logic",Backend Development,"",High,12,Senior,1,"TASK-001-001-02,TASK-001-002-01",Yes,"Very complex rule logic with many edge cases. Requires a senior developer and rigorous testing.","Simplify the rent rules (e.g., no doubled rent for monopolies), but this breaks the core game balance."
TASK-001-002-05,"[Testing] Write Unit Tests for Rent Calculation",Quality Assurance,Backend Development,High,10.3,Mid,1,"TASK-001-002-04",Yes,"A comprehensive test suite is non-negotiable for this feature due to its complexity and impact on game fairness.",""
US-030,"Choose to buy an unowned property I land on",Backend Development,Frontend Development,Medium,26.2,Senior,2,"US-016,US-050",Yes,"Core gameplay loop. Requires seamless integration between game logic, UI, and player input.","Automatically put all unowned properties to auction, removing a layer of player choice."
TASK-002-030-01,"[Backend] Implement Property Purchase Logic in Rule Engine",Backend Development,"",Medium,6,Mid,1,"TASK-001-002-01",Yes,"Handles the core transaction. Must be atomic.",""
TASK-002-030-02,"[Testing] Write Unit Tests for Property Purchase Logic",Quality Assurance,Backend Development,Low,4.2,Mid,1,"TASK-002-030-01",Yes,"",""
TASK-002-030-03,"[Frontend] Create Property Purchase UI Dialog",Frontend Development,Design,Medium,8,Mid,1,"",Yes,"The modal dialog must clearly present all necessary information for the player to make a decision.","Use a simpler, non-graphical prompt, which would be less immersive."
TASK-002-030-04,"[Integration] Orchestrate Property Purchase Flow",Backend Development,Frontend Development,High,8.3,Senior,1,"TASK-002-030-01,TASK-002-030-03,TASK-002-050-01",Yes,"Connects all the pieces for this feature. Requires a senior developer to ensure the game state pauses and resumes correctly.",""
US-018,"Be sent to jail for rolling three consecutive doubles",Backend Development,Frontend Development,Medium,14.3,Senior,2,"US-017,US-020",No,"Builds on existing doubles logic. The special animation is key for user feedback.","Simply teleport the token to jail, which is less visually communicative."
TASK-002-018-01,"[Backend] Verify Doubles and Jail Logic in Rule Engine",Backend Development,"",Low,0,Lead,1,"TASK-002-015-02",Yes,"Verification task.",""
TASK-002-018-02,"[Frontend] Implement Special 'Go to Jail' Token Animation",Design,Frontend Development,Medium,6,Mid,1,"TASK-002-016-02",No,"Requires a 3D artist or technical artist to create a unique and clear animation.",""
TASK-002-018-03,"[Integration] Orchestrate the Three-Doubles-to-Jail Sequence",Backend Development,Frontend Development,Medium,6.3,Senior,1,"TASK-002-015-02,TASK-002-018-02",No,"Ensures the game correctly bypasses normal movement and ends the player's turn after the animation.",""
TASK-002-018-04,"[Testing] Create Integration Test for Three-Doubles Rule",Quality Assurance,Backend Development,Low,2,Mid,1,"TASK-002-018-03",No,"Automated test to prevent regressions in this critical rule.","Rely solely on manual testing, which is less reliable for catching regressions."
US-020,"Get out of jail by paying the $50 fine",Backend Development,Frontend Development,Medium,20.3,Mid,2,"US-018,US-049",No,"Part of the core jail mechanic. The UI must be shared with other jail-exit options.",""
TASK-002-020-01,"[Backend] Implement 'Pay Fine' Logic in Rule Engine",Backend Development,"",Low,4.2,Mid,1,"TASK-001-002-01,TASK-001-002-10",Yes,"Straightforward transaction logic.",""
TASK-002-020-02,"[Testing] Write Unit Tests for 'Pay Fine' Logic",Quality Assurance,Backend Development,Low,4,Mid,1,"TASK-002-020-01",Yes,"",""
TASK-002-020-03,"[Frontend] Create 'Jail Options' UI Dialog",Frontend Development,Design,Medium,8,Mid,1,"",Yes,"This UI will be reused and extended by US-021 and US-022. It should be designed to be modular.","Create separate dialogs for each option, leading to inconsistent UI."
TASK-002-020-04,"[Integration] Connect 'Pay Fine' Button to Rule Engine",Frontend Development,Backend Development,Low,4,Mid,1,"TASK-002-020-01,TASK-002-020-03",No,"UI controller logic to handle button state and call backend service.",""
US-029,"Manage my properties before rolling the dice",Backend Development,Frontend Development,High,14.7,Lead,1,"US-015,US-033,US-038,US-040,US-052",Yes,"Critical change to the game loop, establishing the pre-roll phase. High architectural impact.","Do not allow pre-roll management, forcing players into a more reactive and less strategic playstyle."
TASK-002-029-01,"[Backend] Finalize Turn Phase State Machine in Rule Engine",Backend Development,"",High,6,Lead,1,"TASK-001-002-02",Yes,"Architectural task requiring a Lead to ensure the state machine is robust and handles all turn types (normal, doubles, jail).",""
TASK-002-029-02,"[Integration] Control UI Button States from TurnController",Frontend Development,Backend Development,High,8.3,Senior,1,"TASK-002-029-01,TASK-002-015-04,TASK-002-052-01,TASK-002-053-01",Yes,"This task is the glue between the backend state machine and the user's available actions. Requires a senior dev.",""
TASK-002-029-03,"[Testing] Write Integration Test for Turn Phase UI States",Quality Assurance,"",Low,0.3,Mid,1,"TASK-002-029-02",No,"Automated test to ensure UI state doesn't get desynchronized from the game state.",""
US-038,"Mortgage an undeveloped property to get cash",Backend Development,Frontend Development,Medium,12,Mid,2,"US-052,US-044",No,"Core economic feature. The logic must also update the rent calculation system.",""
US-039,"Unmortgage a property by paying the principal plus 10% interest",Backend Development,Frontend Development,Medium,12.2,Mid,2,"US-038,US-052,US-044",No,"Companion feature to mortgaging. The 10% interest calculation is a key rule.",""
US-052,"Access a dedicated property management screen",Frontend Development,Design,High,18,Senior,1,"US-029,US-033,US-034,US-038",No,"A major UI feature that is central to player strategy. Must be well-designed and highly functional.","Force players to manage properties by clicking on them on the board, which would be slow and cumbersome."
US-021,"Get out of jail by using a 'Get Out of Jail Free' card",Backend Development,Frontend Development,Medium,20.2,Mid,2,"US-018,US-024,US-025,US-020",No,"Requires tracking the origin deck of the card to return it correctly.",""
TASK-002-021-01,"[Backend] Implement 'Use Card' Logic in Rule Engine",Backend Development,"",Medium,6.3,Mid,1,"TASK-002-020-01,TASK-002-024-01",Yes,"The logic to return the card to the correct deck adds complexity.","Simply remove the card from the game, which would alter game balance over time."
TASK-002-021-02,"[Testing] Write Unit Tests for 'Use Card' Logic",Quality Assurance,Backend Development,Medium,6,Mid,1,"TASK-002-021-01",Yes,"",""
TASK-002-021-03,"[Frontend] Add 'Use Card' Button to Jail Options UI",Frontend Development,"",Low,2,Junior,1,"TASK-002-020-03",No,"Simple UI addition.",""
TASK-002-021-04,"[Integration] Connect 'Use Card' Button to Rule Engine",Frontend Development,Backend Development,Low,4,Mid,1,"TASK-002-021-01,TASK-002-021-03",No,"UI Controller must dynamically enable/disable the button based on player inventory.",""
US-022,"Attempt to get out of jail by rolling for doubles",Backend Development,Frontend Development,Medium,20.3,Mid,2,"US-015,US-018,US-043",No,"Final core jail-exit mechanic. The rule about not getting an extra turn is a critical detail.",""
TASK-002-022-01,"[Backend] Implement 'Roll for Doubles' Logic in Rule Engine",Backend Development,"",Medium,6.3,Senior,1,"TASK-002-020-01",Yes,"Requires careful integration with the turn management logic to enforce the 'no extra turn' exception.",""
TASK-002-022-02,"[Testing] Write Unit Tests for 'Roll for Doubles' Logic",Quality Assurance,Backend Development,Medium,6,Mid,1,"TASK-002-022-01",Yes,"The 'no extra turn' case must be explicitly tested.",""
TASK-002-022-03,"[Frontend] Add 'Roll for Doubles' Button to Jail Options UI",Frontend Development,"",Low,2,Junior,1,"TASK-002-020-03",No,"",""
TASK-002-022-04,"[Integration] Connect 'Roll' Button to Game Flow",Backend Development,Frontend Development,Medium,6,Senior,1,"TASK-002-022-01,TASK-002-022-03,TASK-002-015-01",No,"Complex integration connecting the UI to the dice service and then the rule engine.",""
US-024,"Draw a Chance card when landing on a Chance space",Backend Development,Design,High,39.8,Lead,2,"US-016,US-018,US-019,US-047",No,"High complexity due to the variety of card actions. The Command Pattern is recommended to manage this complexity.","Use a massive switch statement, which would be brittle and hard to maintain."
TASK-002-024-01,"[Backend] Implement Card Deck Management Service",Backend Development,"",Medium,8,Mid,1,"",Yes,"Core service for handling both decks. Should be built with both Chance and Community Chest in mind.",""
TASK-002-024-02,"[Backend] Implement Card Action Execution using Command Pattern",Backend Development,"",High,14.3,Lead,1,"TASK-001-002-01,TASK-002-024-01",Yes,"Architectural task. The design of this system will impact maintainability significantly.",""
TASK-002-024-03,"[Testing] Write Unit Tests for Card Deck Management and Actions",Quality Assurance,Backend Development,High,12,Mid,1,"TASK-002-024-01,TASK-002-024-02",Yes,"Requires a test for each unique card action.",""
TASK-002-024-04,"[Frontend] Implement Card Display UI",Frontend Development,Design,Low,4.8,Junior,1,"",No,"Reusable UI for both card types.",""
TASK-002-024-05,"[Integration] Orchestrate the Card Drawing Sequence",Backend Development,Frontend Development,Low,0.7,Senior,1,"TASK-002-024-02,TASK-002-024-04",No,"Simple orchestration task if the underlying services are well-designed.",""
US-023,"Be forced to pay the fine after failing to roll doubles for 3 turns in jail",Backend Development,Frontend Development,High,24.3,Senior,2,"US-022,US-038,US-047",No,"High complexity due to the integration with the bankruptcy/asset liquidation flow.","Automatically declare bankruptcy if the player cannot pay, removing the 'raise funds' step and simplifying the flow."
TASK-002-023-01,"[Backend] Implement Forced Payment Logic in Rule Engine",Backend Development,"",Medium,8.3,Senior,1,"TASK-002-022-01",Yes,"The key is signaling a 'debt owed' state rather than directly handling bankruptcy.",""
TASK-002-023-02,"[Testing] Write Unit Tests for Forced Payment Logic",Quality Assurance,Backend Development,Medium,6,Mid,1,"TASK-002-023-01",Yes,"",""
TASK-002-023-03,"[Integration] Implement 'Raise Funds' Game Flow",Frontend Development,Backend Development,High,10,Lead,1,"TASK-002-023-01,TASK-002-052-01",No,"This is a major integration task, creating a sub-loop where the game waits for a debt to be cleared. Requires a lead developer.",""
US-025,"Draw a Community Chest card when landing on a Community Chest space",Backend Development,Quality Assurance,Medium,14.3,Mid,2,"US-016,US-018,US-047",No,"Lower complexity than Chance cards as it reuses the same framework.",""
TASK-002-025-01,"[Backend] Implement Community Chest Card Actions",Backend Development,Data Engineering,Medium,8.3,Mid,1,"TASK-002-024-02",Yes,"Populate data and create new command classes.",""
TASK-002-025-02,"[Testing] Write Unit Tests for Community Chest Card Actions",Quality Assurance,Backend Development,Medium,6,Mid,1,"TASK-002-025-01",Yes,"",""
US-026,"Choose to pay $200 or 10% of my net worth for Income Tax",Backend Development,Frontend Development,Medium,24.3,Senior,2,"US-016,US-038,US-033,US-047",No,"Requires the Net Worth calculation, which is a reusable and critical piece of logic.",""
TASK-002-026-01,"[Backend] Implement Income Tax Logic in Rule Engine",Backend Development,"",Medium,6,Mid,1,"TASK-001-002-01,TASK-001-002-08",Yes,"",""
TASK-002-026-02,"[Testing] Write Unit Tests for Income Tax Logic",Quality Assurance,Backend Development,Low,5.2,Mid,1,"TASK-002-026-01",Yes,"",""
TASK-002-026-03,"[Frontend] Create Income Tax Choice UI Dialog",Frontend Development,Design,Medium,8,Mid,1,"",No,"",""
TASK-002-026-04,"[Integration] Connect Income Tax UI to Game Flow",Backend Development,Frontend Development,Medium,5,Senior,1,"TASK-002-026-01,TASK-002-026-03,TASK-002-023-03",No,"",""
US-027,"Pay a fixed Luxury Tax amount",Backend Development,Quality Assurance,Low,10,Mid,2,"US-016,US-038,US-047,US-052",No,"Simple automatic transaction, but still requires integration with the bankruptcy flow.",""
TASK-002-027-01,"[Backend] Implement Luxury Tax Logic in Rule Engine",Backend Development,"",Low,3,Junior,1,"TASK-001-002-01",Yes,"",""
TASK-002-027-02,"[Testing] Write Unit Tests for Luxury Tax Logic",Quality Assurance,Backend Development,Low,3,Mid,1,"TASK-002-027-01",Yes,"",""
TASK-002-027-03,"[Integration] Orchestrate Luxury Tax Payment Flow",Backend Development,Frontend Development,Medium,4,Mid,1,"TASK-002-027-01,TASK-002-023-03",No,"",""
US-028,"Experience no gameplay effect when landing on Free Parking",Backend Development,Quality Assurance,Low,3,Mid,2,"US-015,US-016,US-017,US-019",No,"The simplest rule to implement.","Implement a 'house rule' where fines are collected in Free Parking, adding unnecessary complexity."
TASK-002-028-01,"[Backend] Implement 'Free Parking' No-Op Logic",Backend Development,"",Low,2,Junior,1,"TASK-001-002-01",Yes,"",""
TASK-002-028-02,"[Testing] Write Unit Tests for 'Free Parking' Logic",Quality Assurance,Backend Development,Low,1,Junior,1,"TASK-002-028-01",Yes,"",""
TASK-001-002-06,"[Backend] Implement Building Validation Logic (Monopoly & Even-Build)",Backend Development,"",High,12,Senior,1,"TASK-001-002-01",Yes,"Complex validation logic that is fundamental to game strategy and fairness. Requires a senior developer.",""
TASK-001-002-07,"[Testing] Write Unit Tests for Building Validation Logic",Quality Assurance,Backend Development,High,10.3,Mid,1,"TASK-001-002-06",Yes,"Comprehensive test suite is required to cover all edge cases for this complex rule.",""
US-033,"Build houses on properties in a complete color set",Backend Development,Frontend Development,Medium,20,Mid,2,"US-029,US-034",No,"Core property development feature.",""
TASK-002-033-01,"[Backend] Implement `ExecuteBuildHouse` Transaction Logic",Backend Development,"",Medium,5.2,Mid,1,"TASK-001-002-06",Yes,"The transaction must be atomic.",""
TASK-002-033-02,"[Testing] Write Unit Tests for `ExecuteBuildHouse` Transaction",Quality Assurance,Backend Development,Low,4,Mid,1,"TASK-002-033-01",Yes,"",""
TASK-002-033-03,"[Frontend] Add 3D House Models to Board",Design,Frontend Development,Medium,6,Mid,1,TASK-004-022-01,No,"Requires 3D assets. Logic for placing 1-4 models correctly is needed.","Use 2D icons instead of 3D models to reduce complexity."
TASK-002-033-04,"[Integration] Connect Building UI to Backend and Visuals",Backend Development,Frontend Development,Medium,5,Senior,1,"TASK-002-033-01,TASK-002-033-03,TASK-002-052-01",No,"",""
US-034,"Enforce even building rule for property development",Frontend Development,"",Low,4,Mid,1,"US-033,US-052,US-038",No,"This story is primarily about adding UI feedback. The core backend logic is covered in another task.",""
US-035,"Upgrade a set of 4 houses to a single hotel",Backend Development,Frontend Development,Medium,18,Mid,2,"US-033,US-034,US-052",No,"The logic of returning 4 houses to the bank is a critical detail.",""
US-036,"Notify player of building shortage when attempting to build",Frontend Development,"",Low,6,Junior,1,"US-033,US-052",No,"Improves user experience by providing clear feedback on a core rule.","Let the build action fail silently, causing user confusion."
US-031,"Choose to send an unowned property to auction instead of buying it",Frontend Development,Backend Development,Low,4.3,Mid,2,"US-030,US-032,US-016",No,"Simple feature that triggers the more complex auction system.",""
TASK-002-031-01,"[Frontend] Verify 'Auction' Button on Purchase UI",Frontend Development,Quality Assurance,Low,0.3,Junior,1,TASK-002-030-03,Yes,"Verification task.",""
TASK-002-031-02,"[Integration] Connect 'Auction' Button to Auction Flow",Frontend Development,Backend Development,Low,4,Mid,1,"TASK-002-030-03,TASK-002-032-01",No,"",""
US-032,"Participate in an auction for a property",Backend Development,Frontend Development,High,38.3,Lead,2,"US-031,US-045",No,"A complex sub-system with its own state machine. High risk and high effort.","Remove auctions entirely, which significantly alters the game's economy and strategy."
TASK-002-032-01,"[Backend] Implement Auction Service and State Machine",Backend Development,"",High,12,Lead,1,"TASK-001-002-01",Yes,"Core of the auction feature. Requires lead-level experience with state machines.",""
TASK-002-032-02,"[Testing] Write Unit Tests for Auction Service",Quality Assurance,Backend Development,High,8.3,Mid,1,"TASK-002-032-01",Yes,"",""
TASK-002-032-03,"[Frontend] Implement Auction UI Dialog",Frontend Development,Design,High,10.3,Mid,1,"",No,"Complex UI that must update in real-time based on bids from multiple players.",""
TASK-002-032-04,"[Integration] Orchestrate Auction Game Flow",Backend Development,Frontend Development,High,8,Lead,1,"TASK-002-032-01,TASK-002-032-03,TASK-003-016-02",No,"Complex integration between backend service, UI, and AI bidding logic.",""
US-053,"Use a two-panel interface to build and review trade offers",Frontend Development,Design,High,36,Senior,1,"US-040,US-041,US-042,US-052",No,"Core UI for the trading system. High complexity due to state management and validation.","Use a simpler, less intuitive UI, which would harm the user experience."
US-040,"Initiate a trade with an AI opponent during my turn",Backend Development,Frontend Development,Medium,18,Senior,2,"US-029,US-053",No,"",""
US-041,"Respond to a trade offer from an AI opponent",Frontend Development,Backend Development,Medium,18,Senior,2,"US-053,US-040,US-032",No,"",""
TASK-003-014-01,"[AI] Implement Behavior Tree Framework",Backend Development,DevOps,Critical,12,Lead,1,US-059,Yes,"Foundational for all AI logic. High risk if implemented poorly (RISK-T-003).","Use a third-party Behavior Tree library from the Unity Asset Store to save time and reduce risk."
TASK-003-014-02,"[Testing] Unit Tests for Behavior Tree Framework",Quality Assurance,Backend Development,High,8,Mid,1,"TASK-003-014-01",Yes,"",""
TASK-003-015-01,"[AI] Develop AI Configuration System",Backend Development,Data Engineering,Medium,6.2,Mid,1,US-059,Yes,"Allows for AI tuning without recompiling. Key for balancing (RISK-Q-001).","Hardcode AI parameters, making it very slow and difficult to balance the AI."
TASK-003-015-02,"[Testing] Unit Tests for AI Configuration Loading",Quality Assurance,Backend Development,Low,4,Mid,1,"TASK-003-015-01",Yes,"",""
TASK-003-017-01,"[AI] Implement AI Trading Logic (Evaluation and Proposal)",Backend Development,"",High,12,Senior,1,"TASK-003-014-01",No,"Core AI strategic logic. Requires a developer with some AI/game design experience.","Implement very simple logic (e.g., only trade based on cash value), making the AI easy to exploit."
TASK-003-017-02,"[Testing] Unit Tests for AI Trading Logic",Quality Assurance,Backend Development,High,8,Mid,1,"TASK-003-017-01",No,"",""
TASK-003-016-01,"[AI] Implement AI Property Management Logic",Backend Development,"",High,14.3,Senior,1,TASK-003-014-01,No,"Defines the main personality of the AI. Logic for building is especially critical to its competitiveness.",""
TASK-003-016-02,"[Testing] Unit Tests for AI Property Management",Quality Assurance,Backend Development,High,10.3,Mid,1,"TASK-003-016-01",No,"",""
TASK-003-016-03,"[AI] Implement AI Auction Bidding Logic",Backend Development,"",Medium,8.3,Senior,1,TASK-003-014-01,No,"AI must be able to calculate a reasonable max bid price to be competitive.",""
TASK-003-016-04,"[Testing] Unit Tests for AI Auction Logic",Quality Assurance,Backend Development,Medium,6,Mid,1,"TASK-003-016-03",No,"",""
US-042,"Propose a counter-offer to an AI's trade proposal",Frontend Development,Backend Development,Medium,18,Mid,2,"US-041,US-053",No,"Adds significant depth to the trading system.",""
US-043,"Receive a non-intrusive notification when AI players trade with each other",Frontend Development,"",Low,6,Junior,1,US-017,No,"Improves game awareness for the player.",""
US-059,"AI evaluates and responds to trade offers",Backend Development,Quality Assurance,Low,4,Mid,1,"US-015,US-017,US-040",No,"Verification and integration story for the AI trading logic.",""
US-046,"See a victory screen when I am the last player remaining",Frontend Development,Backend Development,Medium,18,Mid,2,"US-013,US-047,US-048",No,"Provides a satisfying conclusion to the game loop.",""
US-047,"See a game-over screen when I go bankrupt",Backend Development,Frontend Development,High,20,Senior,2,"US-013,US-048",No,"The high-speed AI simulation is the most complex part of this feature.","Simply end the game on player loss, but this prevents final rankings and stats."
US-048,"View a detailed game summary screen after a match ends",Frontend Development,Backend Development,Medium,18,Mid,2,"US-046,US-047",No,"Provides closure and performance feedback to the player.",""
US-013-RELATED,"Implement Bankruptcy System",Backend Development,Quality Assurance,Critical,30,Lead,2,"US-038,US-033",Yes,"A very complex and critical system that interacts with many other parts of the game engine. Requires a lead developer.",""
US-061,"Save game progress into one of several save slots",Backend Development,Frontend Development,High,26.2,Senior,2,US-054,Yes,"Critical feature for a game of this length. Serialization logic can be complex and is high-risk (RISK-T-002).","Don't offer save games, which would severely limit the audience."
US-062,"Load a game from a previously saved slot",Backend Development,Frontend Development,High,24.3,Senior,2,"US-061,US-063",Yes,"Companion to saving. Deserialization and game state restoration are complex.",""
US-063,"Visually indicate unusable save files on the load game screen",Backend Development,Frontend Development,High,24.3,Senior,2,"US-061,US-062",No,"Improves user experience and application stability. The migration service adds significant complexity.","Crash on loading a corrupted file, which is a very poor user experience."
US-013,"View my persistent historical gameplay statistics",Backend Development,Frontend Development,Medium,18,Mid,2,"US-011,US-046,US-047",No,"Requires setting up a new persistence technology (SQLite).","Store stats in a simple JSON file, which is less robust and harder to query."
US-064,"View a list of my top 10 victories",Backend Development,Frontend Development,Low,12,Mid,2,"US-011,US-046,US-048",No,"Relies on the statistics database from US-013. The sorting logic is key.",""
US-054,"Access an in-game settings menu",Backend Development,Frontend Development,Medium,10,Mid,2,US-049,No,"Core UI feature. The pause/resume system must be robust.","Require players to quit to the main menu to change settings."
US-055,"Adjust the game speed to make animations faster or instant",Backend Development,Frontend Development,Medium,14.7,Mid,2,"US-054,US-061,US-062",No,"High-value UX feature. Requires a global time manager that all animations respect.",""
US-056,"Adjust master, music, and sound effect volumes independently",Design,Frontend Development,Low,8,Mid,2,US-054,No,"Standard feature for any modern game. Requires an audio engineer or dev with audio experience.",""
US-057,"Reset all my historical statistics and high scores",Backend Development,Frontend Development,Low,6,Mid,2,"US-013,US-064,US-054",No,"Simple data management feature.","Require users to manually delete their database file, which is not user-friendly."
US-058,"Provide a bulk deletion option for all saved games via the settings menu",Backend Development,Frontend Development,Low,4.3,Junior,1,"US-054,US-061",No,"Simple data management feature.",""
US-065,"Export my top score history to a text file",Backend Development,Frontend Development,Low,4.3,Junior,1,US-064,No,"'Nice to have' feature that requires integration with the native OS file dialog.","Don't offer export, limiting sharing options for players."
US-066,"Change the game's visual and audio theme",Backend Development,Frontend Development,High,24.3,Lead,2,US-054,No,"Architecturally complex feature requiring a dynamic asset loading system. High effort.","Release with only one theme."
US-060,"Access and search a digital rulebook from game menus",Frontend Development,Backend Development,Medium,10,Mid,2,"US-054,US-008",No,"Improves player onboarding. Loading content from JSON makes it maintainable.","Provide a PDF manual outside the game, which is less convenient."
US-069,"Access a searchable in-game rulebook",Product Management,"",Low,0,Junior,1,"US-054",No,"This is a duplicate of US-060 and should be removed. No work required.",""
US-070,"Start an optional interactive tutorial",Backend Development,Frontend Development,High,24.3,Senior,2,"US-008,US-015,US-030,US-044",No,"High complexity due to the need for a scripting engine to guide the player and override game logic.","Rely on the rulebook or external videos for tutorials, which is less engaging."
US-067,"Be notified of available game updates on startup",Backend Development,Frontend Development,Low,6,Mid,2,"",No,"Requires a simple web request to an external server. Must handle offline mode gracefully.","Require players to manually check the website for updates."
US-068,"View the game's data privacy statement",Frontend Development,Backend Development,Low,4.2,Junior,1,US-008,No,"Simple UI screen. Important for transparency and user trust.",""
TASK-001-002-10,"[Backend] Implement Core Transaction Logic for Bank",Backend Development,"",Medium,6,Mid,1,"TASK-001-002-01",Yes,"Ensures all financial operations are centralized and atomic.",""
TASK-001-002-11,"[Testing] Write Unit Tests for Core Transaction Logic",Quality Assurance,Backend Development,Medium,5.2,Mid,1,"TASK-001-002-10",Yes,"",""
TASK-001-002-08,"[Backend] Implement Net Worth Calculation Service",Backend Development,"",Medium,4.2,Mid,1,"TASK-001-001-01,TASK-001-001-02",Yes,"A critical utility service used in multiple places (Income Tax, High Scores).",""
TASK-001-002-09,"[Testing] Write Unit Tests for Net Worth Calculation",Quality Assurance,Backend Development,Medium,4,Mid,1,"TASK-001-002-08",Yes,"",""
TASK-001-002-12,"[QA] Finalize Rule Engine Test Suite and Coverage Report",Quality Assurance,Backend Development,High,12,Lead,1,"TASK-001-002-03,TASK-001-002-05,TASK-001-002-07,TASK-001-002-09,TASK-001-002-11",Yes,"Quality gate task. Requires a QA Lead to ensure the 70% coverage requirement is met and critical paths are tested.","Skip the formal coverage report, risking lower quality in the core engine."
US-001,"Install the game on my Windows PC",DevOps,Quality Assurance,Medium,14,Senior,2,"",No,"Requires build engineering skills (Inno Setup) and a code signing certificate. High risk if done poorly (RISK-T-005).","Distribute the game as a simple .zip file, which is unprofessional and less user-friendly."
TASK-004-036-01,"[Docs] Create High-Level Architecture Documentation",Backend Development,Product Management,Medium,16,Lead,1,US-001-RELATED,No,"Critical for project maintainability and onboarding new developers.","Skip documentation, increasing knowledge silos and future development costs."
TASK-004-036-02,"[Docs] Create Data Schemas for Save File and Database",Backend Development,"",Low,8,Senior,1,"TASK-001-001-03,TASK-002-013-04",No,"Essential for developers working on the save/load and statistics systems.",""
TASK-004-036-03,"[Docs] Document AI Behavior Parameters",Backend Development,"",Medium,8.3,Senior,1,"TASK-003-015-01",No,"Crucial for allowing designers or producers to tune the AI without engineering assistance.",""