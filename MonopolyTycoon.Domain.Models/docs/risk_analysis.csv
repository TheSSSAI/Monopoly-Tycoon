risk_id,risk_category,risk_description,probability,impact,risk_score,priority_level,affected_tasks,root_cause,mitigation_strategy,contingency_plan,monitoring_trigger,owner,due_date,status
RISK-001,Technical,"The complex `GameState` object (WI-002) fails to serialize or deserialize correctly, leading to corrupted save files and data loss for players.",4,5,20,High,"WI-002, WI-026, WI-027, WI-028, WI-039, WI-040",The GameState object contains numerous nested classes, lists, and complex data structures that can cause issues like circular references or data loss with standard serializers.,"[Preventive] Implement a robust suite of unit tests specifically for serialization/deserialization (part of WI-038). [Detective] Create an end-to-end integration test (WI-039) that saves, loads, and then compares the GameState objects for equality early in the project.",Allocate a ""spike"" task to investigate an alternative, more robust serialization library like Newtonsoft.Json if `System.Text.Json` proves insufficient. Schedule a dedicated bug-fixing period for data persistence issues before release.,The first failed save/load integration test (WI-039). Any bug report indicating that a loaded game has an incorrect state.,Lead Developer,2025-03-15,Open
RISK-002,Timeline,"The implementation of the AI's Behavior Tree framework (WI-011) and decision logic (WI-013, WI-014) is significantly underestimated, causing a major schedule slip for the entire AI epic (EPIC-002).",4,4,16,High,"WI-011, WI-013, WI-014",Behavior Trees are architecturally complex, and balancing the AI's strategic logic for different difficulty levels is a time-consuming and iterative process.,"[Preventive] Develop a simplified prototype of the AI logic for a single action (e.g., buying property) to validate the BT architecture early. [Preventive] Time-box the initial AI tuning and accept ""good enough"" behavior for the first internal milestone, scheduling further refinement for later sprints.",Descope the 'Hard' AI difficulty level to a 'stretch goal' if initial implementation exceeds the timeline. Re-allocate a developer to assist the AI programmer with implementing specific behavior nodes.,AI development velocity is less than 50% of the estimate after two sprints. The AI is unable to complete a full game without getting into a locked state.,AI Lead,2025-04-01,Open
RISK-003,Quality,"The AI opponents (EPIC-002) are not well-balanced, resulting in a poor user experience where the AI is either too easy to beat or plays in a frustratingly optimal/illogical way.",5,4,20,High,"WI-013, WI-014",Balancing game AI is notoriously difficult and subjective. The data-driven parameters in the JSON config (WI-012) might not be sufficient to create distinct and enjoyable difficulty levels.,"[Preventive] Implement extensive logging of AI decision-making processes (REQ-1-019) to allow for post-game analysis. [Detective] Conduct regular playtesting sessions with a focus group of varying skill levels to gather feedback on AI behavior.",Allocate specific ""AI Tuning"" sprints where the developer's sole focus is adjusting the JSON parameters based on playtest feedback. If balancing is impossible with parameters alone, approve a limited amount of time to refactor specific AI decision nodes.,Playtester feedback consistently reports that 'Hard' AI is too easy or that 'Easy' AI makes nonsensical, game-breaking moves.,QA Lead,2025-05-30,Open
RISK-004,Technical,"The dynamic theme-swapping system (WI-037) causes significant performance degradation or memory leaks due to improper loading and unloading of assets (models, textures, audio).",3,4,12,Medium,"WI-037, REQ-1-014",Dynamically swapping large asset packages at runtime in Unity can be complex and is a common source of memory leaks if asset references are not managed perfectly.,"[Preventive] Use Unity's Addressable Asset System from the start to manage theme packages. [Detective] Implement a specific performance test that repeatedly switches themes and monitors memory usage and frame rate using the Unity Profiler.",If runtime swapping proves too unstable or performant, change the feature to require an application restart to apply a new theme. This simplifies asset management significantly at the cost of user experience.,Memory usage consistently increases by more than 5% after each theme-swap cycle. FPS drops below the 45 FPS minimum (REQ-1-014) during or after a theme change.,Lead Developer,2025-06-15,Open
RISK-005,Timeline,"The interpretation and implementation of all edge cases in the official Monopoly rules (REQ-1-003) leads to scope creep and rework, as obscure rules are discovered late in development.",3,4,12,Medium,"EPIC-001",The official Monopoly rulebook has numerous situational rules (e.g., building shortages, auctions, complex debt scenarios) that are easy to miss during initial planning.,"[Preventive] Dedicate a specific research task early in the project to create a comprehensive ""Rule Definition"" document that covers all known edge cases. [Preventive] All rule implementation tasks (WI-005 to WI-010) must have their acceptance criteria reviewed against this document.",Create a ""Rule Change"" bug category. If more than 5 such bugs are found after the core engine is declared ""feature complete,"" schedule a dedicated ""Rule Refinement"" sprint to address the inconsistencies.,A developer or QA tester discovers a conflict between the implemented game logic and the official Hasbro rulebook for a scenario not initially considered.,Project Manager,2025-02-28,Open
RISK-006,Quality,"The logic for the Turn Management State Machine (WI-004) has critical bugs, especially concerning the handling of doubles, jail states, and turn progression, leading to game-breaking freezes or unfair play.",4,5,20,High,"WI-004, WI-010",The turn flow in Monopoly is complex, with many state transitions and exceptions (doubles, jail, bankruptcy). An error in this central FSM can halt the entire game.,"[Preventive] Develop a comprehensive suite of unit tests for the state machine (part of WI-038), covering all state transitions and rule exceptions. [Detective] Use the structured logs (REQ-1-019) to create a full audit trail of each turn's phase transitions for easy debugging.",Prioritize a ""stabilization sprint"" focused solely on fixing bugs in the Turn Manager before building more complex features on top of it. Maintain a debug UI that visualizes the current state of the Turn Manager.,The game enters an infinite loop. The turn passes to the wrong player or a bankrupt player. The 'Roll Dice' button is enabled/disabled at the wrong time.,QA Lead,2025-03-31,Open
RISK-007,Technical,"The data migration logic for save files (WI-027) or the statistics database (WI-031) fails for some users, causing them to lose all their progress after an update.",3,5,15,High,"WI-027, WI-031",Data migration is inherently risky. An untested edge case in an older data format can cause the migration to fail, potentially corrupting the user's data.,"[Preventive] All migration logic must be atomic and operate on a backup of the original file, restoring the backup if any step fails (REQ-1-090). [Detective] Create a suite of integration tests that run the migration logic against a collection of save files from every previous version of the game.",If automated migration proves too unreliable, the contingency is to abandon it. The game will instead mark old saves as ""incompatible"" and instruct the user to finish their game on the previous version before updating.,A bug report from a user shows that their save file or statistics were wiped out after updating the application to a new version.,Data Architect,2025-07-01,Open
RISK-008,Quality,"The UI fails to adapt correctly to all supported aspect ratios (16:10, 21:9) as per REQ-1-016, resulting in overlapping elements, clipped text, or non-functional buttons for a segment of users.",4,3,12,Medium,"WI-015, WI-016, WI-017, WI-019, WI-021, WI-022",Creating a fully responsive UI in Unity requires disciplined use of anchors, pivots, and layout groups for every single UI element. It's easy for developers to miss a configuration on a less-common screen.,"[Preventive] Establish a ""UI Component Checklist"" that includes checks for correct anchoring and scaling on all supported aspect ratios. No UI task is considered done until it passes this checklist. [Detective] Add automated UI tests that take screenshots of every screen at the target aspect ratios and compare them against baseline images.",If a specific screen proves too difficult to make fully dynamic, a fixed-aspect ratio with ""letterboxing"" or ""pillarboxing"" will be used for that screen as an acceptable fallback to ensure functionality.,A UI element is reported as off-screen or overlapping during QA testing on a non-16:9 display. Screenshots from playtesters show distorted UI.,UI/UX Lead,2025-04-30,Open
RISK-009,Timeline,"The creation of the ""at least two complete, distinct themes"" (REQ-1-093, WI-037) requires a large volume of art and audio assets, and a delay in their delivery will block the completion of the feature.",3,3,9,Medium,"WI-037",The implementation of the theming system is heavily dependent on the availability of the actual assets to integrate and test.,"[Preventive] The engineering team will build the theming system using placeholder assets (e.g., simple colored blocks and royalty-free sounds). [Preventive] Establish a clear delivery schedule with the art/audio teams with milestone check-ins.",If final assets for the second theme are not available by the feature-lock date, the game will ship with only one theme, and the second theme will be planned for a post-launch update.,The asset delivery deadline for a theme is missed by more than one sprint.,Project Manager,2025-06-30,Open
RISK-010,Technical,"The ""cryptographically secure"" random number generator (WI-003) is implemented incorrectly or is not sufficiently random, leading to predictable dice rolls and unfair gameplay.",2,5,10,Medium,"WI-003",Developers may misunderstand the nuances of cryptographic RNGs versus standard RNGs, or the implementation could be subtly flawed, creating bias in the results.,"[Preventive] The implementation must be peer-reviewed by a senior developer with experience in security/cryptography. [Detective] A specific set of unit tests (part of WI-003) must be created to verify the statistical properties (distribution, lack of patterns) of the dice rolls over a large sample size.",If the custom implementation is found to be flawed, fall back to a well-vetted, high-quality random number generation library instead of `System.Security.Cryptography.RandomNumberGenerator` if a simpler, but still robust, solution is needed.,Statistical analysis during testing reveals a non-uniform distribution of dice roll outcomes. Players report that dice rolls feel ""streaky"" or predictable.,Lead Developer,2025-02-20,Open
RISK-011,Operational,"The Inno Setup installer (WI-032) or uninstaller (WI-033) fails on certain Windows configurations due to permission issues or OS differences, preventing users from installing or cleanly removing the game.",3,4,12,Medium,"WI-032, WI-033",Windows environments can vary widely (UAC settings, antivirus software, directory permissions). The installer script may not account for all edge cases.,"[Preventive] Test the installer and uninstaller on clean virtual machines for all supported OS versions (Windows 10, Windows 11) with both Administrator and Standard user accounts. [Detective] Include a ""verbose logging"" option in the installer for debugging purposes.",If a specific bug cannot be fixed in the Inno Setup script, provide a ZIP file distribution as an alternative to the installer. Provide manual uninstallation instructions in a support FAQ.,Beta testers report that the installer fails with a specific error code, or that the uninstaller leaves files behind.,Release Manager,2025-07-15,Open
RISK-012,Technical,"The bankruptcy logic (WI-009) is one of the most complex rule interactions and has a high probability of bugs, which could lead to a game state where assets are not transferred correctly or a player is not bankrupted when they should be.",4,5,20,High,"WI-009, WI-039",Bankruptcy involves liquidating all assets (selling buildings, mortgaging properties) and then transferring remaining assets, which touches many systems and must be atomic.,"[Preventive] The bankruptcy service logic must be covered by an extensive suite of unit tests (WI-038) for all possible scenarios (bankrupt to bank, bankrupt to player, no assets, mortgaged assets, etc.). [Detective] Use the predefined save game files (WI-040) to create repeatable integration tests for bankruptcy.",If the logic is too complex to be reliable, simplify the liquidation process. For example, instead of allowing the player to choose what to sell/mortgage, the system could automatically liquidate assets in a predefined order to pay a debt.,A player is able to continue playing with negative cash. A bankrupt player's properties are not correctly transferred to the creditor or put up for auction.,Lead Developer,2025-04-15,Open
RISK-013,Quality,"The 70% minimum code coverage requirement (REQ-1-025) for core logic is insufficient, allowing critical bugs in untested code paths of the rule engine to make it into the final product.",3,4,12,Medium,"WI-038",A generic coverage target might not reflect the complexity of the domain. The 30% of uncovered code in a rule engine could contain numerous critical edge cases.,"[Preventive] Mandate 100% test coverage for specific, critical modules like `RentCalculator`, `TaxCalculator`, and `BankruptcyValidator` instead of a blanket 70%. [Detective] Perform manual, exploratory testing specifically targeting complex rule interactions not easily covered by automated tests.",Increase the QA team's time allocated for manual regression testing of the core game rules before release. Create more specific test asset files (WI-040) to target tricky scenarios.,A significant gameplay bug is discovered late in the development cycle in a piece of code that was shown to be in the ""uncovered"" 30%.,QA Lead,2025-05-15,Open
RISK-014,External,"The project's adherence to the Hasbro IP and branding guidelines (REQ-1-099) is found to be insufficient, requiring costly and time-consuming rework of game assets late in the project.",2,4,8,Medium,"EPIC-003, WI-037",IP holder requirements can be strict and subject to interpretation. Feedback from the licensor might come late, after assets have already been created and integrated.,"[Preventive] Establish a regular review cycle with the Hasbro licensing contact to get feedback on key visual assets (board design, token models, UI theme) as they are created, rather than waiting until the end. [Preventive] Create a formal ""Brand Guideline Checklist"" for the art team.",If major rework is required, create a separate ""Compliance Sprint"" to address the feedback. Prioritize fixing blocking issues and negotiate pushing cosmetic changes to a post-launch patch.,Formal feedback from Hasbro, Inc. indicates that a game asset (e.g., a player token design) is not compliant with their brand guidelines.,Project Manager,2025-06-01,Open
RISK-015,Resource,"The project requires expertise across multiple distinct domains (Unity 3D, C# .NET, AI Behavior Trees, SQLite, Inno Setup), and a lack of skill or availability in any one area can create a significant bottleneck.",3,4,12,Medium,"All WIs",A single developer may not be an expert in all required technologies, and the high complexity of many tasks creates a key person dependency.,"[Preventive] Conduct a skills assessment early on and arrange for cross-training between developers on critical systems (e.g., the AI developer and the core engine developer review each other's code). [Preventive] Document all complex systems thoroughly (WI-042) to reduce ramp-up time for another developer.",Approve a budget for external consultation or a short-term contractor with expertise in the bottleneck area (e.g., Inno Setup scripting, AI balancing).,A work stream (e.g., WS-012 Installation & Distribution) is falling significantly behind schedule because the assigned developer is struggling with the specific technology (Inno Setup).,Project Manager,2025-03-01,Open