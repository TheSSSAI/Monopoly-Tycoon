Title,Description,Type,Status,Priority,Assignee,Reporter,Due Date,Estimate,Labels,Sprint,Epic,Project,Attachments,Comments,Parent ID,Dependencies,Created At,Updated At,Skills Required
"EPIC-005: Application Shell & Infrastructure","Encompasses the foundational elements of the application, including the installer, error handling, theming, and system-level utilities.","Epic","Backlog","Critical","","pm@project.com","",274.5,"infrastructure,devops,theming","","","Monopoly Tycoon","","","","","",""
"STORY-US-001: Install the game on my Windows PC","As a new player who has just acquired the game, I want to run a simple, guided installer on my Windows PC so that I can get the game set up correctly and quickly, allowing me to start my first playthrough without technical frustration.","User Story","Backlog","Must Have","","pm@project.com","",24,"installer,devops","Sprint 1","Application Shell & Infrastructure","Monopoly Tycoon","","","EPIC-005","","","","Inno Setup,Pascal Script"
"TASK-001: Setup Inno Setup Project and Script Structure","Create the initial Inno Setup script file (`MonopolyTycoon.iss`) for the project. Configure basic application metadata like AppName, AppVersion, Publisher, and default installation directories.","Task","Backlog","Must Have","devops@project.com","pm@project.com","",4.2,"installer,inno-setup","Sprint 1","Application Shell & Infrastructure","Monopoly Tycoon","","Requires a placeholder game executable to package.","STORY-US-001","","","","Inno Setup"
"TASK-002: Implement Installer File Packaging and Shortcut Logic","Configure the `[Files]` section of the Inno Setup script to correctly package the compiled Unity game build. Implement the `[Tasks]` and `[Icons]` sections to handle the creation of the desktop shortcut as per US-003.","Task","Backlog","Should Have","devops@project.com","pm@project.com","",6,"installer,inno-setup","Sprint 1","Application Shell & Infrastructure","Monopoly Tycoon","","Depends on the basic installer script structure and a stable game build.","STORY-US-001","TASK-001","","","Inno Setup"
"TASK-003: Implement Custom Directory and Disk Space Check Logic","Configure the installer wizard to include a directory selection page (US-002). Implement Pascal Scripting within Inno Setup to perform a disk space check against the selected drive and display an error if space is insufficient.","Task","Backlog","Should Have","devops@project.com","pm@project.com","",6.3,"installer,inno-setup","Sprint 1","Application Shell & Infrastructure","Monopoly Tycoon","","Depends on the basic installer script structure.","STORY-US-001","TASK-001","","","Inno Setup,Pascal Script"
"TASK-004: Implement and Test Uninstaller Logic","Configure the uninstaller section of the script to perform a clean removal of all application files, shortcuts, and registry keys. Implement the custom logic from US-006 and US-007 to check if the game is running and to prompt the user about deleting their personal data.","Task","Backlog","Must Have","devops@project.com","pm@project.com","",7.2,"uninstaller,inno-setup","Sprint 1","Application Shell & Infrastructure","Monopoly Tycoon","","Depends on a working installer to test the uninstaller.","STORY-US-001","TASK-002","","","Inno Setup,Pascal Script"
"STORY-US-005: Receive guidance on locating log files after an error","As a player who has encountered an unexpected game crash, I want to be shown a clear error message that includes a unique error ID and instructions on where to find the log files, so that I can easily provide developers with the necessary information to diagnose the bug.","User Story","Backlog","Must Have","","pm@project.com","",32.5,"error-handling,logging","Sprint 1","Application Shell & Infrastructure","Monopoly Tycoon","","","EPIC-005","","","","C#,Serilog,Unity"
"TASK-005: Configure Serilog for Structured JSON Logging","Integrate Serilog into the project. Configure sinks to write structured JSON logs to a rolling file in the `%APPDATA%/MonopolyTycoon/logs` directory. Implement the retention policy from REQ-1-021 (7 days/50 MB).","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",6.2,"logging,serilog,infrastructure","Sprint 1","Application Shell & Infrastructure","Monopoly Tycoon","","Core project structure must be in place.","STORY-US-005","","","","C#,Serilog"
"TASK-006: Implement Global Exception Handler Service","Create a `GlobalExceptionHandler` service that registers with `AppDomain.CurrentDomain.UnhandledException`. This service will be responsible for catching all unhandled exceptions application-wide.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",8.2,"error-handling,infrastructure","Sprint 1","Application Shell & Infrastructure","Monopoly Tycoon","","Depends on the logging service to log the caught exception.","STORY-US-005","TASK-005","","","C#,.NET 8,Unity"
"TASK-007: Create Generic Error Dialog UI Prefab","Design and implement a reusable Unity UI Prefab for the modal error dialog. The prefab must have text fields for the main message, the unique Error ID, and the log file path, plus a 'Close' button.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",8,"ui,error-handling","Sprint 1","Application Shell & Infrastructure","Monopoly Tycoon","","Requires the core UI canvas setup.","STORY-US-005","","","","Unity UI,C#"
"TASK-008: Integrate Error Dialog with Exception Handler","Modify the `GlobalExceptionHandler` to, after logging the error, generate a unique correlation ID (e.g., a GUID), and then trigger the UI to display the `ErrorDialog` populated with this ID and the user-friendly messages from REQ-1-023.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",10,"error-handling,integration","Sprint 1","Application Shell & Infrastructure","Monopoly Tycoon","","Depends on both the handler service and the UI dialog prefab.","STORY-US-005","TASK-006,TASK-007","","","C#,Unity"
"STORY-US-068: View the game's data privacy statement","As a privacy-conscious user, I want to access and read a clear data privacy statement from the main menu so that I can understand how my data is handled and confirm the game operates offline.","User Story","Backlog","Should Have","","pm@project.com","",10,"ui,privacy","Sprint 1","Application Shell & Infrastructure","Monopoly Tycoon","","US-008","EPIC-005","","","","C#,Unity UI"
"TASK-017: Create Privacy Policy UI Screen","Develop a new UI screen or modal prefab that contains a scrollable text area and a 'Close' button. This UI will be used to display the privacy policy and other long-form text documents like the user manual.","Task","Backlog","Should Have","ui-dev@project.com","pm@project.com","",5.2,"ui,privacy","Sprint 1","Application Shell & Infrastructure","Monopoly Tycoon","","Requires core UI canvas setup.","STORY-US-068","","","","Unity UI,C#"
"TASK-018: Integrate Privacy Policy into Main Menu","Add a 'Privacy Policy' button to the main menu UI. Wire it to a controller method that loads the privacy policy text from an external resource file and displays it using the `TextDocumentViewer` screen.","Task","Backlog","Should Have","ui-dev@project.com","pm@project.com","",4.2,"ui,privacy,integration","Sprint 1","Application Shell & Infrastructure","Monopoly Tycoon","","Depends on the main menu and the text viewer UI.","STORY-US-068","TASK-104,TASK-017","","","Unity UI,C#"
"EPIC-003: User Interface & Experience (UI/UX)","Covers all player-facing visual and interactive components, including the main menu, game setup, HUD, modals, and post-game screens. Ensures a polished, intuitive, and visually appealing experience.","Epic","Backlog","Critical","","pm@project.com","",328,"ui,ux,frontend","","","Monopoly Tycoon","","","","","",""
"STORY-US-008: Start a new game from the main menu","As a player, I want to select a 'New Game' option from the main menu so that I can proceed to the game setup screen and configure a new match.","User Story","Backlog","Must Have","","pm@project.com","",8,"ui,main-menu","Sprint 1","User Interface & Experience (UI/UX)","Monopoly Tycoon","","","EPIC-003","","","","Unity UI,C#"
"TASK-104: Create Main Menu Scene and Controller","Implement the basic Main Menu scene in Unity. Create a `MainMenuController.cs` script to handle UI logic. Add placeholder buttons for 'New Game', 'Load Game', 'Settings', and 'Quit'.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",8,"ui,main-menu,scene-management","Sprint 1","User Interface & Experience (UI/UX)","Monopoly Tycoon","","This is a foundational UI task.","STORY-US-008","","","","Unity UI,C#"
"STORY-US-011: Create a player profile with a custom name","As a player, I want to create a personal profile by entering a custom name so that my game progress and statistics are saved under my unique identity.","User Story","Backlog","Must Have","","pm@project.com","",16,"profile,setup,database","Sprint 2","User Interface & Experience (UI/UX)","Monopoly Tycoon","","US-008","EPIC-003","","","","C#,Unity UI,SQLite"
"TASK-107: Add Profile Name Input to Game Setup Screen","Add a `TextMeshPro - Input Field` to the Game Setup screen for the player to enter their name. Implement real-time validation logic in `GameSetupController.cs` to check for length (3-16 chars) and allowed characters (alphanumeric).","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",8,"ui,profile,validation","Sprint 2","User Interface & Experience (UI/UX)","Monopoly Tycoon","","Depends on the Game Setup Screen existing.","STORY-US-011","TASK-105","","","Unity UI,C#"
"TASK-108: Implement Player Profile Persistence Service","Create a `PlayerProfileRepository.cs` that handles creating and retrieving player profiles from the SQLite database. Implement the `GetOrCreateProfileAsync` method to avoid duplicates and handle new player creation.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",8,"database,persistence,sqlite","Sprint 2","Data Persistence & Management","Monopoly Tycoon","","Depends on the database schema being defined.","STORY-US-011","TASK-137","","","C#,SQLite"
"STORY-US-009: Configure a game with one to three AI opponents","As a player setting up a new game, I want to select the number of AI opponents from a choice of one, two, or three, so that I can customize the game's challenge and duration.","User Story","Backlog","Must Have","","pm@project.com","",8,"ui,setup,configuration","Sprint 2","User Interface & Experience (UI/UX)","Monopoly Tycoon","","US-008","EPIC-003","","","","Unity UI,C#"
"TASK-105: Design and Implement Game Setup Screen UI","Create the `GameSetup.scene` and `GameSetupController.cs`. Implement the UI layout to hold player profile name, token selection, and slots for AI opponent configurations.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",8,"ui,setup","Sprint 2","User Interface & Experience (UI/UX)","Monopoly Tycoon","","Depends on the Main Menu to navigate from.","STORY-US-009","TASK-104","","","Unity UI,C#"
"STORY-US-010: Set a unique difficulty level for each AI opponent","As a Human Player setting up a new game, I want to independently assign a difficulty level (Easy, Medium, or Hard) to each of my AI opponents so that I can customize the game's challenge.","User Story","Backlog","Must Have","","pm@project.com","",16,"ui,setup,ai-config","Sprint 2","User Interface & Experience (UI/UX)","Monopoly Tycoon","","US-009","EPIC-003","","","","Unity UI,C#"
"TASK-106: Add AI Configuration Controls to Setup Screen","For each potential AI slot (up to 3), add a UI dropdown or button group to select the difficulty ('Easy', 'Medium', 'Hard'). The visibility of these controls should be driven by the number of AI opponents selected in US-009.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",16,"ui,ai-config,setup","Sprint 2","User Interface & Experience (UI/UX)","Monopoly Tycoon","","Depends on the opponent selection UI from US-009.","STORY-US-010","TASK-105","","","Unity UI,C#"
"STORY-US-012: Receive feedback for an invalid profile name","As a player setting up my profile, I want to receive immediate and clear feedback if the name I enter is invalid so that I can easily correct it and proceed.","User Story","Backlog","Must Have","","pm@project.com","",8,"ui,validation,profile","Sprint 2","User Interface & Experience (UI/UX)","Monopoly Tycoon","","US-011","EPIC-003","","","","Unity UI,C#"
"TASK-109: Implement Real-time Validation Feedback for Profile Name","Enhance the `GameSetupController.cs` to show/hide a text element with specific error messages based on the validation logic (too short, too long, invalid characters). The 'Start Game' button's interactable state should be tied to the name's validity.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",8,"ui,validation,profile","Sprint 2","User Interface & Experience (UI/UX)","Monopoly Tycoon","","Depends on the profile name input field.","STORY-US-012","TASK-107","","","Unity UI,C#"
"STORY-US-014: Select my player token from a set of classic options","As a player setting up a new game, I want to choose my game piece from a visual selection of classic tokens, so that I can personalize my in-game identity.","User Story","Backlog","Must Have","","pm@project.com","",16,"ui,setup,personalization","Sprint 2","User Interface & Experience (UI/UX)","Monopoly Tycoon","","US-008,US-009,US-011","EPIC-003","","","","Unity UI,C#"
"TASK-110: Create Token Selection UI Component","Implement a UI component (grid or carousel) on the Game Setup screen to display the 8+ selectable token icons. Add logic to handle selection, highlighting, and storing the chosen `token_id`.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",16,"ui,setup,token-select","Sprint 2","User Interface & Experience (UI/UX)","Monopoly Tycoon","","Depends on the Game Setup Screen. Requires token art assets.","STORY-US-014","TASK-105","","","Unity UI,C#"
"EPIC-001: Core Gameplay Engine & Rule Implementation","The heart of the game, this epic covers the implementation of the game board, player state, turn management, all official Monopoly rules (movement, property transactions, cards, jail), and win/loss conditions.","Epic","Backlog","Critical","","pm@project.com","",500,"game-logic,rules-engine,backend","","","Monopoly Tycoon","","","","","",""
"STORY-US-029: Manage my properties before rolling the dice","As a strategic player, I want a dedicated phase at the start of my turn to manage my properties (build, mortgage, trade) before I roll the dice so that I can proactively adjust my financial position.","User Story","Backlog","Must Have","","pm@project.com","",24,"game-flow,turn-management,state-machine","Sprint 2","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-015,US-033,US-038,US-040,US-052","EPIC-001","","","","C#,Unity"
"TASK-026: Implement Turn Manager State Machine","Create a `TurnManager.cs` service with a state machine to handle the distinct phases of a player's turn (Pre-Turn, Pre-Roll Management, Roll, Movement, Action, Post-Roll). Implement the logic for the Pre-Roll Management phase that waits for player input.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",24,"state-machine,game-flow,backend","Sprint 2","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","This is a foundational logic component.","STORY-US-029","","","","C#,Unity"
"STORY-US-015: Roll two six-sided dice to start my move","As a human player whose turn it is, I want to click a button to roll two virtual dice so that I can determine how many spaces my token will move.","User Story","Backlog","Must Have","","pm@project.com","",24,"dice-roll,core-mechanic,rng","Sprint 3","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-029","EPIC-001","","","","C#,Unity"
"TASK-027: Create Dice Rolling Service","Implement a `DiceService.cs` that generates two random numbers between 1 and 6 using a cryptographically secure RNG. It should return the result, including the sum and a boolean for whether it was doubles.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",8,"rng,backend,dice","Sprint 3","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","","STORY-US-015","","","","C#,.NET 8"
"TASK-028: Implement Dice Roll UI and Animation","Create the 'Roll Dice' button on the main HUD. Implement the 3D dice roll animation. The animation should respect the game speed settings from US-055.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",16,"ui,animation,dice","Sprint 3","User Interface & Experience (UI/UX)","Monopoly Tycoon","","Depends on the main game HUD.","STORY-US-015","TASK-118","","","Unity UI,3D"
"STORY-US-016: Watch my token automatically move around the board","As a player, I want to see my game token animate its movement from one space to the next after I roll the dice so that I can visually track my progress.","User Story","Backlog","Must Have","","pm@project.com","",24,"animation,visual-feedback,3d","Sprint 3","User Interface & Experience (UI/UX)","Monopoly Tycoon","","US-014,US-015,US-055","EPIC-003","","","","Unity,C#,3D"
"TASK-111: Implement Token Movement Animation","Develop a `TokenController.cs` script that takes a dice roll result and animates the player's 3D token moving space-by-space around the board. Implement smooth camera following logic.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",16,"3d,animation,camera","Sprint 3","User Interface & Experience (UI/UX)","Monopoly Tycoon","","Depends on the dice roll result.","STORY-US-016","TASK-027","","","Unity,C#"
"TASK-112: Create Special Movement Animations (e.g., Go to Jail)","Implement specific animation paths for non-standard movements, such as the direct move to the 'In Jail' space, bypassing the normal sequential path.","Task","Backlog","Edge Case","ui-dev@project.com","pm@project.com","",8,"3d,animation,jail","Sprint 3","User Interface & Experience (UI/UX)","Monopoly Tycoon","","","STORY-US-016","TASK-111","","","Unity,C#"
"STORY-US-030: Choose to buy an unowned property I land on","As a human player, I want to be presented with a prompt when I land on an unowned property, giving me the option to purchase it so that I can strategically acquire assets.","User Story","Backlog","Must Have","","pm@project.com","",24,"core-mechanic,property,economy","Sprint 3","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-016,US-032,US-050","EPIC-001","","","","C#,Unity UI"
"TASK-029: Implement Property Purchase Logic","In the `RuleEngine.cs`, create the logic to handle a property purchase. This includes checking player funds, debiting cash, and adding the property to the player's `properties_owned` list. The transaction must be atomic.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",8,"backend,rules-engine,transaction","Sprint 3","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","","STORY-US-030","","","","C#"
"TASK-030: Create Property Purchase UI Dialog","Design and implement the modal dialog (using the generic modal from US-051) that appears when a player lands on an unowned property. It should display the property card and 'Buy'/'Auction' buttons. The 'Buy' button must be disabled if funds are insufficient.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",16,"ui,modal,property","Sprint 3","User Interface & Experience (UI/UX)","Monopoly Tycoon","","Depends on a generic modal system.","STORY-US-030","TASK-119","","","Unity UI,C#"
"STORY-US-031: Choose to send an unowned property to auction","As a Human Player, I want the option to decline the immediate purchase of an unowned property I land on to trigger an auction.","User Story","Backlog","Must Have","","pm@project.com","",8,"core-mechanic,property,auction","Sprint 3","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-030,US-032,US-016","EPIC-001","","","","C#,Unity UI"
"TASK-031: Wire Auction Button to Auction System","In the Property Purchase UI dialog, wire the 'Auction' button to call the `AuctionService.StartAuction(property)` method. Ensure the game state correctly transitions into the auction phase.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",8,"ui,integration,auction","Sprint 3","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","Depends on the Purchase UI and the Auction Service.","STORY-US-031","TASK-030,TASK-032","","","Unity UI,C#"
"STORY-US-032: Participate in an auction for a property","As a Human Player, I want to participate in a turn-based auction for an unowned property, placing bids against AI opponents.","User Story","Backlog","Must Have","","pm@project.com","",24,"core-mechanic,auction,economy","Sprint 3","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-031,US-045","EPIC-001","","","","C#,Unity UI,AI"
"TASK-032: Develop Auction Logic Service","Create an `AuctionService.cs` to manage the auction state machine. This includes tracking bidders, current bid, bidding order (clockwise), and determining the winner.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",12,"backend,state-machine,auction","Sprint 3","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","","STORY-US-032","","","","C#"
"TASK-033: Create Auction UI","Implement the modal UI for the auction. This includes displaying the property, current high bid, bidder, and controls for the human player to 'Place Bid' or 'Withdraw'. The UI must update in real-time as AIs place bids.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",12,"ui,modal,auction","Sprint 3","User Interface & Experience (UI/UX)","Monopoly Tycoon","","","STORY-US-032","TASK-032","","","Unity UI,C#"
"STORY-US-019: Collect $200 salary when passing or landing on GO","As a Player, I want my cash balance to be automatically credited with a $200 salary when I land on or pass over the GO space.","User Story","Backlog","Must Have","","pm@project.com","",8,"core-rule,economy","Sprint 4","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-016,US-049","EPIC-001","","","","C#"
"TASK-034: Implement Pass Go Salary Logic","In the `MovementController` or `RuleEngine`, add logic that checks if a player's token has passed or landed on the GO space (index 0) during its move. If so, credit the player's cash with $200. Ensure this is not triggered by 'Go to Jail' moves.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",8,"backend,rules-engine,economy","Sprint 4","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","","STORY-US-019","","","","C#"
"STORY-US-044: Automatically collect rent when an opponent lands on my property","As a property owner, I want the game to automatically calculate and transfer the correct rent from an opponent who lands on my property.","User Story","Backlog","Must Have","","pm@project.com","",24,"core-mechanic,rent,economy","Sprint 4","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-016,US-030,US-038,US-033,US-047","EPIC-001","","","","C#"
"TASK-035: Implement Rent Calculation Service","Create a `RentCalculator.cs` service. This service must accurately calculate the rent for any given property based on its type (standard, railroad, utility), ownership (monopoly status), development level (houses/hotels), and mortgaged status.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",16,"backend,rules-engine,rent","Sprint 4","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","","STORY-US-044","","","","C#"
"TASK-036: Implement Automatic Rent Transaction","Integrate the `RentCalculator` with the turn flow. When a player lands on an owned property, the system automatically calls the service, performs the cash transfer between players, and logs the transaction.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",8,"backend,transaction,rent","Sprint 4","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","Depends on the rent calculator.","STORY-US-044","TASK-035","","","C#"
"STORY-US-045: Automatically pay rent when I land on an opponent's property","As a player, I want the game to automatically calculate and process my rent payment when I land on an opponent's property.","User Story","Backlog","Must Have","","pm@project.com","",24,"core-mechanic,rent,economy","Sprint 4","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-016,US-030,US-033,US-038,US-047","EPIC-001","","","","C#"
"TASK-037: Integrate Rent Payment with Bankruptcy System","When a rent payment is triggered, the system must first check if the paying player has sufficient funds. If not, it must trigger the bankruptcy/asset liquidation flow instead of allowing a negative cash balance.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",24,"integration,bankruptcy,rent","Sprint 4","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","Depends on rent logic and bankruptcy logic.","STORY-US-045","TASK-036,TASK-087","","","C#"
"STORY-US-027: Pay a fixed Luxury Tax amount","As a player, I want the game to automatically deduct the fixed Luxury Tax amount from my cash when I land on that space.","User Story","Backlog","Must Have","","pm@project.com","",16,"core-rule,tax,economy","Sprint 4","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-016,US-038,US-047,US-052","EPIC-001","","","","C#"
"TASK-038: Implement Luxury Tax Action","Create the logic for the Luxury Tax space. When a player lands here, automatically deduct the fixed amount from their cash. This must integrate with the bankruptcy system if the player cannot pay.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",16,"backend,rules-engine,tax","Sprint 4","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","","STORY-US-027","TASK-087","","","C#"
"STORY-US-026: Choose to pay $200 or 10% for Income Tax","As a human player, I want to be presented with a choice between paying a flat $200 or 10% of my total net worth when I land on Income Tax.","User Story","Backlog","Must Have","","pm@project.com","",24,"core-rule,tax,economy,ui","Sprint 4","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-016,US-038,US-047","EPIC-001","","","","C#,Unity UI"
"TASK-039: Implement Net Worth Calculation Service","Create a `NetWorthCalculator.cs` service that accurately calculates a player's total net worth according to the rules (cash + printed value of all properties + total cost of all buildings).","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",8,"backend,rules-engine,economy","Sprint 4","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","","STORY-US-026","","","","C#"
"TASK-040: Create Income Tax Choice UI","Implement the modal dialog that presents the human player with the choice between paying $200 or 10%. The UI must display the calculated 10% value.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",16,"ui,modal,tax","Sprint 4","User Interface & Experience (UI/UX)","Monopoly Tycoon","","Depends on the Net Worth Calculator.","STORY-US-026","TASK-039","","","Unity UI,C#"
"STORY-US-017: Receive an extra turn after rolling doubles","As a player, I want to be granted an immediate, additional turn after I roll doubles.","User Story","Backlog","Must Have","","pm@project.com","",16,"core-rule,doubles,turn-management","Sprint 5","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-015,US-016,US-022","EPIC-001","","","","C#"
"TASK-041: Implement Doubles Logic in Turn Manager","Enhance the `TurnManager` state machine to check for doubles after a roll. If doubles are rolled (and it's not a 'get out of jail' roll), the state machine should loop back to the 'Pre-Roll Management' phase for the same player.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",16,"backend,state-machine,doubles","Sprint 5","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","Depends on the Turn Manager.","STORY-US-017","TASK-026","","","C#"
"STORY-US-018: Be sent to jail for rolling three consecutive doubles","As a player, I want to be automatically sent to jail if I roll three consecutive doubles in a single turn.","User Story","Backlog","Must Have","","pm@project.com","",16,"core-rule,jail,doubles","Sprint 5","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-015,US-017,US-020","EPIC-001","","","","C#"
"TASK-042: Implement 3-Doubles-to-Jail Rule","Add a counter to the `TurnManager` for consecutive doubles. If the counter reaches 3, the manager must immediately trigger the 'Go to Jail' action, bypassing normal movement, and end the player's turn.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",16,"backend,state-machine,jail","Sprint 5","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","Depends on the doubles logic.","STORY-US-018","TASK-041","","","C#"
"STORY-US-020: Get out of jail by paying the $50 fine","As a player in jail, I want the option to pay a $50 fine at the beginning of my turn.","User Story","Backlog","Must Have","","pm@project.com","",8,"core-rule,jail,economy","Sprint 5","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-018,US-049","EPIC-001","","","","C#,Unity UI"
"TASK-043: Create Jail Action UI","Design and implement the modal dialog that presents a jailed player with their options ('Pay Fine', 'Use Card', 'Roll for Doubles'). Button states should be dynamic based on player resources.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",8,"ui,modal,jail","Sprint 5","User Interface & Experience (UI/UX)","Monopoly Tycoon","","","STORY-US-020","","","","Unity UI,C#"
"STORY-US-022: Attempt to get out of jail by rolling for doubles","As a player in jail, I want to choose the option to roll the dice on my turn.","User Story","Backlog","Must Have","","pm@project.com","",16,"core-rule,jail,rng","Sprint 5","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-032,US-018,US-015,US-043,US-016","EPIC-001","","","","C#"
"TASK-044: Implement 'Roll for Doubles' Jail Logic","Add logic to the `JailService` or `TurnManager` to handle the 'Roll for Doubles' attempt. This must include decrementing the `jail_turns_remaining` counter on failure and correctly enforcing the 'no extra turn' rule on success.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",16,"backend,rules-engine,jail","Sprint 5","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","","STORY-US-022","","","","C#"
"STORY-US-023: Be forced to pay the jail fine after 3 failed rolls","As a player in jail for my third turn, I want the game to automatically force me to pay the $50 fine if I fail to roll doubles.","User Story","Backlog","Must Have","","pm@project.com","",24,"core-rule,jail,economy","Sprint 5","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-022,US-038,US-047","EPIC-001","","","","C#"
"TASK-045: Implement Forced Jail Payment Logic","Implement the rule for the third failed roll in jail. The system must force a $50 payment (triggering bankruptcy flow if needed) and then move the player according to that final roll.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",24,"backend,rules-engine,jail","Sprint 5","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","Depends on the 'Roll for Doubles' logic.","STORY-US-023","TASK-044","","","C#"
"STORY-US-004: Ensure UI and Game View Adapt to Different Monitor Aspect Ratios","As a PC gamer, I want the game's UI and 3D view to automatically adapt to my screen's dimensions so that I can play without visual distortion.","User Story","Backlog","Must Have","","pm@project.com","",32,"ui,responsiveness,compatibility","Sprint 5","Application Shell & Infrastructure","Monopoly Tycoon","","US-049,US-051,US-052","EPIC-005","","","","Unity UI"
"TASK-193: Configure Canvas Scaler for Responsive UI","Set up the root Unity UI Canvas with a Canvas Scaler component configured to 'Scale With Screen Size'. Establish a reference resolution and set the match mode to balance width and height.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",3.2,"ui,responsive-design","Sprint 5","Application Shell & Infrastructure","Monopoly Tycoon","","This is a foundational task for all other UI work.","STORY-US-004","","","","Unity UI"
"TASK-194: Refactor All UI Elements with Proper Anchoring","Systematically go through every UI screen and ensure every UI element is correctly anchored to its parent container's corners or edges.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",14.3,"ui,responsive-design,refactoring","Sprint 5","Application Shell & Infrastructure","Monopoly Tycoon","","Depends on the existence of the UI elements to be refactored.","STORY-US-004","TASK-104,TASK-118,TASK-134,TASK-146,TASK-193","","","Unity UI"
"TASK-195: Implement Camera Controller for Aspect Ratio Adaptation","Develop the main 3D camera controller to handle different aspect ratios gracefully, using pillarboxing or letterboxing to ensure the game board is always fully visible without distortion.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",8.7,"camera,3d,responsive-design","Sprint 5","Application Shell & Infrastructure","Monopoly Tycoon","","Requires the 3D game board scene to be set up.","STORY-US-004","","","","Unity,C#,Linear Algebra"
"TASK-196: Perform Full E2E Test for UI Responsiveness","Conduct a comprehensive end-to-end manual test of the entire application on the three target aspect ratios (16:9, 16:10, 21:9) and one extreme ratio (4:3).","Task","Backlog","Must Have","qa@project.com","pm@project.com","",5.2,"qa,testing,responsive-design","Sprint 5","Application Shell & Infrastructure","Monopoly Tycoon","","This task validates the implementation of the UI refactoring.","STORY-US-004","TASK-194","","","QA"
"STORY-US-052: Access a dedicated interface to manage all my properties","As a human player, I want to access a dedicated property management screen so that I can efficiently view and take strategic actions from a single interface.","User Story","Backlog","Must Have","","pm@project.com","",32,"ui,property-management,core-feature","Sprint 6","User Interface & Experience (UI/UX)","Monopoly Tycoon","","US-029,US-032,US-033,US-034,US-038","EPIC-003","","","","Unity UI,C#"
"TASK-121: Design and Implement Property Management UI Shell","Create the main UI prefab for the Property Management screen. It should include a scrollable list for property cards, a display for player cash, and buttons to close the screen.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",16,"ui,property-management","Sprint 6","User Interface & Experience (UI/UX)","Monopoly Tycoon","","","STORY-US-052","","","","Unity UI,C#"
"TASK-122: Populate Property Management UI with Player Data","Implement the logic to dynamically populate the property management screen with the current player's owned properties, grouped by color set. Display their current development level and mortgaged status.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",16,"ui,property-management,data-binding","Sprint 6","User Interface & Experience (UI/UX)","Monopoly Tycoon","","Depends on the UI shell.","STORY-US-052","TASK-121","","","Unity UI,C#"
"STORY-US-038: Mortgage an undeveloped property to get cash","As a player, I want to mortgage my undeveloped properties to get immediate cash.","User Story","Backlog","Must Have","","pm@project.com","",16,"core-rule,mortgage,economy","Sprint 6","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-052,US-044","EPIC-001","","","","C#"
"TASK-046: Implement Mortgage Logic","Create the backend logic in the `RuleEngine` to handle mortgaging a property. This includes updating the property's `is_mortgaged` state and crediting the player's cash with the mortgage value.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",8,"backend,rules-engine,mortgage","Sprint 6","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","","STORY-US-038","","","","C#"
"TASK-047: Integrate Mortgage Action into UI","Add a 'Mortgage' button to the property card in the management UI. The button should be enabled only for unmortgaged, undeveloped properties. Clicking it should trigger the backend logic and update the UI.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",8,"ui,integration,mortgage","Sprint 6","User Interface & Experience (UI/UX)","Monopoly Tycoon","","Depends on the Property Management UI.","STORY-US-038","TASK-121","","","Unity UI,C#"
"STORY-US-039: Unmortgage a property by paying the principal plus 10% interest","As a Human Player, I want to pay the bank to unmortgage one of my properties so that I can start collecting rent on it again.","User Story","Backlog","Must Have","","pm@project.com","",16,"core-rule,mortgage,economy","Sprint 6","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-038,US-052,US-044","EPIC-001","","","","C#"
"TASK-048: Implement Unmortgage Logic","Create the backend logic to handle unmortgaging. This includes calculating the cost (mortgage value + 10% interest), debiting the player's cash, and resetting the property's `is_mortgaged` state.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",8,"backend,rules-engine,mortgage","Sprint 6","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","","STORY-US-039","","","","C#"
"TASK-049: Integrate Unmortgage Action into UI","Add an 'Unmortgage' button to the property card in the management UI. The button should be enabled only for mortgaged properties where the player has sufficient funds. Clicking it triggers the backend logic.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",8,"ui,integration,mortgage","Sprint 6","User Interface & Experience (UI/UX)","Monopoly Tycoon","","Depends on the Property Management UI.","STORY-US-039","TASK-121","","","Unity UI,C#"
"STORY-US-033: Build houses on properties in a complete color set","As a player who owns a complete color set, I want to purchase and build houses on those properties.","User Story","Backlog","Must Have","","pm@project.com","",24,"core-mechanic,building,economy","Sprint 7","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-030,US-052,US-034,US-036","EPIC-001","","","","C#"
"TASK-050: Implement House Building Logic","In the `RuleEngine`, create the logic for building a house. This must validate all conditions: monopoly ownership, even-building rule, player funds, and bank house supply. If valid, it updates player cash, bank supply, and property state.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",12,"backend,rules-engine,building","Sprint 7","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","","STORY-US-033","","","","C#"
"TASK-051: Integrate Building Actions into UI","Add 'Build House' and 'Sell House' buttons to the property management UI. The state of these buttons (enabled/disabled) must be dynamically updated based on the game rules (monopoly, even-building, funds, etc.).","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",12,"ui,integration,building","Sprint 7","User Interface & Experience (UI/UX)","Monopoly Tycoon","","Depends on the Property Management UI.","STORY-US-033","TASK-121","","","Unity UI,C#"
"STORY-US-034: Enforce even building rule for property development","As a player, I want the game to enforce the 'even building' rule when I try to purchase or sell houses.","User Story","Backlog","Must Have","","pm@project.com","",24,"core-rule,building,validation","Sprint 7","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-033,US-052,US-038","EPIC-001","","","","C#"
"TASK-052: Implement Even Building Validation Service","Create a dedicated service or method `ValidationService.CanBuildHouse(property)` that encapsulates the complex logic of the even-building rule. This service will check house counts across all properties in a color set.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",24,"backend,rules-engine,validation","Sprint 7","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","","STORY-US-034","","","","C#"
"STORY-US-035: Upgrade a set of 4 houses to a single hotel","As a player, I want to purchase a hotel for properties with four houses to charge maximum rent.","User Story","Backlog","Must Have","","pm@project.com","",24,"core-rule,building,hotel","Sprint 7","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-033,US-034,US-052","EPIC-001","","","","C#"
"TASK-053: Implement Hotel Transaction Logic","Add logic to the `RuleEngine` for upgrading to a hotel. This includes validating that all properties in the set have 4 houses, deducting the cost, decrementing the bank's hotel supply, and incrementing the bank's house supply by 4.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",12,"backend,rules-engine,hotel","Sprint 7","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","Depends on house building logic.","STORY-US-035","TASK-050","","","C#"
"TASK-054: Add Hotel Actions to UI","Update the property management UI to show a 'Build Hotel' button when a property has 4 houses and meets all other criteria. This action should trigger the backend logic.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",12,"ui,integration,hotel","Sprint 7","User Interface & Experience (UI/UX)","Monopoly Tycoon","","Depends on the Property Management UI.","STORY-US-035","TASK-121","","","Unity UI,C#"
"STORY-US-036: Notify player of building shortage when attempting to build","As a player, I want to receive a clear notification when I am unable to build because the bank has run out of houses or hotels.","User Story","Backlog","Should Have","","pm@project.com","",16,"ui,feedback,building","Sprint 7","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-033,US-052","EPIC-001","","","","C#,Unity UI"
"TASK-055: Implement Bank Inventory Check","In the `RuleEngine`'s building validation logic, add a check against the `BankState` for available houses/hotels before allowing a build action.","Task","Backlog","Should Have","backend-dev@project.com","pm@project.com","",8,"backend,rules-engine,bank","Sprint 7","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","","STORY-US-036","","","","C#"
"TASK-056: Create Building Shortage UI Notification","Implement a non-intrusive 'toast' notification in the UI that can be triggered to display messages like 'No houses available in the bank.' The build buttons in the management UI must also be disabled when supply is zero.","Task","Backlog","Should Have","ui-dev@project.com","pm@project.com","",8,"ui,notification,feedback","Sprint 7","User Interface & Experience (UI/UX)","Monopoly Tycoon","","","STORY-US-036","","","","Unity UI,C#"
"STORY-US-024: Draw a Chance card when landing on a Chance space","As a player, I want the game to automatically draw a Chance card and execute its instructions when I land on a Chance space.","User Story","Backlog","Must Have","","pm@project.com","",32,"core-mechanic,cards,rng","Sprint 8","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-016,US-018,US-019,US-047","EPIC-001","","","","C#"
"TASK-057: Create Card Action System (Command Pattern)","Design and implement a flexible system for handling card actions using the Command Pattern. Create an `ICardAction` interface and concrete classes for each type of action (e.g., `PayMoneyAction`, `MoveToAction`, `GetOutOfJailCardAction`).","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",16,"backend,design-pattern,cards","Sprint 8","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","","STORY-US-024","","","","C#,Software Architecture"
"TASK-058: Implement All Chance Card Effects","Create the data file (JSON) for all 16 Chance cards. For each card, create a corresponding `Card` object that is linked to the appropriate `ICardAction` command.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",16,"backend,content,cards","Sprint 8","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","Depends on the Card Action System.","STORY-US-024","TASK-057","","","C#,JSON"
"STORY-US-025: Draw a Community Chest card when landing on a Community Chest space","As a player, I want the game to automatically draw a Community Chest card when I land on that space.","User Story","Backlog","Must Have","","pm@project.com","",24,"core-mechanic,cards,rng","Sprint 8","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-016,US-018,US-047","EPIC-001","","","","C#"
"TASK-059: Implement All Community Chest Card Effects","Create the data file (JSON) for all 16 Community Chest cards and implement their logic by reusing and extending the `ICardAction` system created for Chance cards.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",24,"backend,content,cards","Sprint 8","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","Depends on the Card Action System.","STORY-US-025","TASK-057","","","C#,JSON"
"STORY-US-053: Use a two-panel interface to build and review trade offers","As a Human Player, I want a clear, two-panel trading interface that displays my items and the opponent's items side-by-side.","User Story","Backlog","Must Have","","pm@project.com","",40,"ui,trading,core-feature","Sprint 8","User Interface & Experience (UI/UX)","Monopoly Tycoon","","US-040,US-041,US-042,US-052","EPIC-003","","","","Unity UI,C#"
"TASK-123: Design and Implement Two-Panel Trade UI","Create the main trading UI prefab. It must have two panels ('Your Offer', 'Their Offer'), sections for available assets, and input fields for cash. Implement the logic to add/remove assets from the offer.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",24,"ui,trading,ux","Sprint 8","User Interface & Experience (UI/UX)","Monopoly Tycoon","","","STORY-US-053","","","","Unity UI,C#"
"TASK-124: Add Validation Logic to Trade UI","Implement real-time validation in the trade UI. This must prevent trading developed properties, offering more cash than available, and proposing an empty trade. The 'Propose Trade' button state must be tied to this validation.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",16,"ui,trading,validation","Sprint 8","User Interface & Experience (UI/UX)","Monopoly Tycoon","","Depends on the base UI.","STORY-US-053","TASK-123","","","Unity UI,C#"
"EPIC-002: Artificial Intelligence (AI) System","Covers the design and implementation of the AI opponents, including their decision-making framework (Behavior Trees), different difficulty levels, and strategic logic for all game actions.","Epic","Backlog","Critical","","pm@project.com","",298.5,"ai,backend,game-logic","","","Monopoly Tycoon","","","","","",""
"STORY-US-040: Initiate a trade with an AI opponent during my turn","As a human player, I want to open a trading interface and construct a trade offer to strategically negotiate with AI opponents.","User Story","Backlog","Must Have","","pm@project.com","",24,"trading,player-action,ai-interaction","Sprint 9","User Interface & Experience (UI/UX)","Monopoly Tycoon","","US-032,US-052,US-053","EPIC-003","","","","C#,Unity UI"
"TASK-060: Implement AI Behavior Tree Framework","Set up the base architecture for the AI's decision-making using a Behavior Tree library or custom implementation. Create the root tree structure and define basic nodes like `Selector`, `Sequence`, and `Action`.","Task","Backlog","Must Have","ai-dev@project.com","pm@project.com","",24,"ai,architecture,behavior-tree","Sprint 9","Artificial Intelligence (AI) System","Monopoly Tycoon","","","STORY-US-040","","","","C#,AI"
"TASK-061: Create External JSON Configuration for AI Parameters","Design and implement the system to load AI behavior parameters from an external JSON file (as per REQ-1-063). Define parameters for property acquisition, trading logic, and risk aversion for each difficulty level.","Task","Backlog","Must Have","ai-dev@project.com","pm@project.com","",16,"ai,config,json","Sprint 9","Artificial Intelligence (AI) System","Monopoly Tycoon","","","STORY-US-040","","","","C#,JSON"
"TASK-125: Integrate 'Propose Trade' button with AI","Wire the 'Propose Trade' button in the trading UI to serialize the trade offer and pass it to the `AIEvaluationService` for the selected AI opponent.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",8,"ui,integration,trading","Sprint 9","User Interface & Experience (UI/UX)","Monopoly Tycoon","","Depends on the Trade UI and AI service stubs.","STORY-US-040","TASK-123","","","Unity UI,C#"
"STORY-US-041: Respond to a trade offer from an AI opponent","As a human player, I want to be presented with a clear dialog when an AI proposes a trade so I can accept or decline it.","User Story","Backlog","Must Have","","pm@project.com","",24,"trading,ai-interaction,ui","Sprint 9","User Interface & Experience (UI/UX)","Monopoly Tycoon","","US-053,US-040,US-032","EPIC-003","","","","C#,Unity UI"
"TASK-126: Implement AI Trade Proposal Event and UI Trigger","Create a game event `AITradeProposed` that the AI system can fire. The UI Manager will listen for this event and, when it occurs, open the trading UI in 'response' mode, pre-populated with the AI's offer.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",24,"ui,event-handling,trading","Sprint 9","User Interface & Experience (UI/UX)","Monopoly Tycoon","","Depends on the Trade UI.","STORY-US-041","TASK-123","","","Unity UI,C#"
"STORY-US-042: Propose a counter-offer to an AI's trade proposal","As a strategic player, I want to respond to an AI's trade proposal with a modified counter-offer.","User Story","Backlog","Should Have","","pm@project.com","",24,"trading,ai-interaction,ui","Sprint 9","User Interface & Experience (UI/UX)","Monopoly Tycoon","","US-041,US-053","EPIC-003","","","","C#,Unity UI"
"TASK-127: Add Counter-Offer Mode to Trade UI","Enhance the trading UI to support a 'counter-offer' mode. When triggered, it should pre-populate with the original offer but allow the user to edit both sides before submitting back to the AI.","Task","Backlog","Should Have","ui-dev@project.com","pm@project.com","",24,"ui,trading,state-management","Sprint 9","User Interface & Experience (UI/UX)","Monopoly Tycoon","","Depends on the Trade UI.","STORY-US-042","TASK-123","","","Unity UI,C#"
"STORY-US-043: Receive notification of AI-to-AI trades","As a human player, I want to see a non-intrusive notification when a trade is completed between two AI opponents.","User Story","Backlog","Should Have","","pm@project.com","",16,"ui,notification,feedback","Sprint 10","User Interface & Experience (UI/UX)","Monopoly Tycoon","","US-010,US-040","EPIC-003","","","","C#,Unity UI"
"TASK-062: Implement AI Trade Evaluation Logic","Develop the core AI logic for evaluating a trade offer. This behavior tree node will use the configured parameters (from the JSON file) to decide whether to accept, decline, or propose a trade.","Task","Backlog","Must Have","ai-dev@project.com","pm@project.com","",32,"ai,behavior-tree,trading","Sprint 10","Artificial Intelligence (AI) System","Monopoly Tycoon","","Depends on the BT framework.","STORY-US-043","TASK-060","","","C#,AI"
"TASK-063: Implement AI Property Management Logic","Create the behavior tree logic for AI decisions related to property management: when to build houses/hotels, when to mortgage properties, and when to unmortgage. This logic must vary based on the AI's difficulty level.","Task","Backlog","Must Have","ai-dev@project.com","pm@project.com","",40,"ai,behavior-tree,property-management","Sprint 10","Artificial Intelligence (AI) System","Monopoly Tycoon","","Depends on the BT framework.","STORY-US-043","TASK-060","","","C#,AI"
"TASK-128: Implement AI-to-AI Trade Notification","Create a `TradeCompleted` event that is fired when any trade is successfully executed. The UI Notification Manager will listen for this event, and if both parties are AIs, it will display a non-intrusive summary message to the human player.","Task","Backlog","Should Have","ui-dev@project.com","pm@project.com","",16,"ui,notification,event-handling","Sprint 10","User Interface & Experience (UI/UX)","Monopoly Tycoon","","","STORY-US-043","","","","Unity UI,C#"
"EPIC-004: Data Persistence & Management","Handles all aspects of saving and loading game state, as well as persisting player statistics and high scores. Ensures data integrity, versioning, and graceful failure handling.","Epic","Backlog","Critical","","pm@project.com","",272.8,"data,persistence,save-load,database","","","Monopoly Tycoon","","","","","",""
"STORY-US-061: Save my game progress into one of several save slots","As a player, I want to save my current game progress into a specific save slot at the start of my turn.","User Story","Backlog","Must Have","","pm@project.com","",32,"save-game,persistence,json","Sprint 10","Data Persistence & Management","Monopoly Tycoon","","US-054,US-044","EPIC-004","","","","C#,JSON"
"TASK-131: Implement GameState Serialization Service","Create a `SaveGameService` that can take the current `GameState` object and serialize it to a versioned JSON string using `System.Text.Json`. The service must also calculate and embed a checksum of the data.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",16,"serialization,json,persistence","Sprint 10","Data Persistence & Management","Monopoly Tycoon","","RISK-001: Risk of serialization failure.","STORY-US-061","","","","C#,JSON"
"TASK-132: Create Save Game UI Screen","Develop the UI screen for saving the game. It should display the 5+ save slots, show metadata for existing saves (timestamp, turn #), and handle the overwrite confirmation flow.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",16,"ui,save-game","Sprint 10","User Interface & Experience (UI/UX)","Monopoly Tycoon","","","STORY-US-061","","","","Unity UI,C#"
"STORY-US-062: Load a game from a previously saved slot","As a returning player, I want to select and load a previously saved game from the main menu.","User Story","Backlog","Must Have","","pm@project.com","",32,"load-game,persistence,json","Sprint 11","Data Persistence & Management","Monopoly Tycoon","","US-061,US-063","EPIC-004","","","","C#,JSON"
"TASK-133: Implement GameState Deserialization and Validation","Enhance the `SaveGameService` with a method to load a game. This involves reading the JSON file, validating the checksum (US-063), checking the version, and deserializing the string back into a `GameState` object.","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",16,"deserialization,json,validation","Sprint 11","Data Persistence & Management","Monopoly Tycoon","","Depends on the serialization service. RISK-001.","STORY-US-062","TASK-131","","","C#,JSON"
"TASK-134: Create Load Game UI Screen","Develop the UI screen for loading a game. It must display all save slots, show their metadata, and visually indicate slots that are 'Corrupted' or 'Incompatible' (US-063).","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",16,"ui,load-game","Sprint 11","User Interface & Experience (UI/UX)","Monopoly Tycoon","","","STORY-US-062","","","","Unity UI,C#"
"STORY-US-063: Visually indicate unusable save files on the load game screen","As a Returning Player, I want to see a clear, visual indication for any save files that are corrupted or incompatible.","User Story","Backlog","Must Have","","pm@project.com","",24,"validation,error-handling,save-load","Sprint 11","Data Persistence & Management","Monopoly Tycoon","","US-061,US-062","EPIC-004","","","","C#,Unity UI"
"TASK-135: Integrate Checksum and Version Validation into Load UI","Modify the `Load Game` UI controller to use the validation results from the `SaveGameService`. Based on the result, it must update the UI for each slot to show its status (Valid, Corrupted, Incompatible) and disable the 'Load' button for invalid slots.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",24,"ui,integration,validation","Sprint 11","Data Persistence & Management","Monopoly Tycoon","","Depends on the deserialization service and the Load UI.","STORY-US-063","TASK-133,TASK-134","","","Unity UI,C#"
"STORY-US-047: See a game-over screen when I go bankrupt","As a human player, I want to be shown a clear 'Game Over' screen immediately after I am declared bankrupt.","User Story","Backlog","Must Have","","pm@project.com","",24,"game-flow,end-condition,bankruptcy","Sprint 11","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-045,US-038,US-048","EPIC-001","","","","C#,Unity UI"
"TASK-087: Implement Bankruptcy Logic Service","Create a `BankruptcyService.cs` that handles the entire bankruptcy process. This includes logic for asset liquidation (selling buildings, mortgaging), determining if a debt can be paid, and transferring assets to the creditor (Bank or another player).","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",24,"backend,rules-engine,bankruptcy","Sprint 11","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","RISK-012: High complexity.","STORY-US-047","","","","C#"
"STORY-US-046: See a victory screen when I am the last player remaining","As a human player who has won the game, I want to be presented with a distinct and celebratory victory screen.","User Story","Backlog","Must Have","","pm@project.com","",24,"game-flow,end-condition,victory","Sprint 11","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-011,US-047,US-048,US-064,US-066","EPIC-001","","","","C#,Unity UI"
"TASK-088: Implement Win/Loss Condition Detection","In the `GameManager` or `TurnManager`, add a check after any player is bankrupted to see if only one active player remains. If so, trigger the appropriate game-end event (HumanVictory or AIVictory).","Task","Backlog","Must Have","backend-dev@project.com","pm@project.com","",8,"backend,game-flow,end-condition","Sprint 11","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","Depends on bankruptcy logic.","STORY-US-046","TASK-087","","","C#"
"TASK-089: Create Victory/Game Over and Summary Screens","Design and implement the UI screens for Victory, Game Over, and the final Game Summary. These screens should display relevant stats from the completed match.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",16,"ui,end-game,ux","Sprint 11","User Interface & Experience (UI/UX)","Monopoly Tycoon","","","STORY-US-046","","","","Unity UI,C#"
"STORY-US-013: View my persistent historical gameplay statistics","As a returning player, I want to access a screen that displays my cumulative gameplay statistics from all my completed games.","User Story","Backlog","Should Have","","pm@project.com","",24,"statistics,persistence,profile","Sprint 12","Data Persistence & Management","Monopoly Tycoon","","US-011,US-046,US-047","EPIC-004","","","","C#,SQLite,Unity UI"
"TASK-136: Implement Statistics Tracking Service","Create a `StatisticsService.cs` that subscribes to the `GameEnded` event. Upon game end, it will process the final `GameState` and update the persistent player statistics in the SQLite database.","Task","Backlog","Should Have","backend-dev@project.com","pm@project.com","",12,"backend,database,statistics","Sprint 12","Data Persistence & Management","Monopoly Tycoon","","Depends on game-end events.","STORY-US-013","TASK-088","","","C#,SQLite"
"TASK-137: Create Statistics UI Screen","Develop the UI screen to display the historical player statistics. This screen will fetch the data from the `StatisticsRepository` and display it in a read-only format.","Task","Backlog","Should Have","ui-dev@project.com","pm@project.com","",12,"ui,statistics","Sprint 12","User Interface & Experience (UI/UX)","Monopoly Tycoon","","","STORY-US-013","","","","Unity UI,C#"
"STORY-US-064: View a list of my top 10 victories","As a competitive player, I want to access a Top 10 High Score screen from the main menu.","User Story","Backlog","Should Have","","pm@project.com","",16,"high-scores,profile,replayability","Sprint 12","User Interface & Experience (UI/UX)","Monopoly Tycoon","","US-011,US-046,US-048","EPIC-003","","","","C#,SQLite,Unity UI"
"TASK-138: Implement High Score Logic and UI","Enhance the `StatisticsService` to check if a victorious game qualifies for the Top 10 list and update the database accordingly. Create the UI screen to display the Top 10 list with correct sorting (Net Worth DESC, Turns ASC).","Task","Backlog","Should Have","fullstack-dev@project.com","pm@project.com","",16,"database,ui,high-scores","Sprint 12","Data Persistence & Management","Monopoly Tycoon","","Depends on statistics service.","STORY-US-064","TASK-136","","","C#,SQLite,Unity UI"
"STORY-US-054: Access an in-game settings menu","As a player in the middle of a game, I want to access a settings menu without quitting the match.","User Story","Backlog","Must Have","","pm@project.com","",24,"ui,settings,pause-menu","Sprint 12","User Interface & Experience (UI/UX)","Monopoly Tycoon","","US-049","EPIC-003","","","","Unity UI,C#"
"TASK-146: Implement Pause Menu and Game State Pause Logic","Create the Pause Menu UI prefab. Implement the logic to pause and resume the game simulation robustly. The menu should be accessible via the ESC key and a HUD button.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",24,"ui,pause-menu,state-management","Sprint 12","User Interface & Experience (UI/UX)","Monopoly Tycoon","","","STORY-US-054","","","","Unity UI,C#"
"STORY-US-055: Adjust the game speed to make animations faster or instant","As an experienced player, I want to change the game speed setting.","User Story","Backlog","Should Have","","pm@project.com","",24,"settings,ux,animation","Sprint 12","User Interface & Experience (UI/UX)","Monopoly Tycoon","","US-054,US-061,US-062","EPIC-003","","","","Unity UI,C#"
"TASK-147: Implement Game Speed Controller","Create a `GameSpeedService` that manages animation speeds and AI thinking delays. Integrate a UI control in the settings menu to allow the player to select Normal, Fast, or Instant.","Task","Backlog","Should Have","fullstack-dev@project.com","pm@project.com","",24,"ux,settings,animation","Sprint 12","User Interface & Experience (UI/UX)","Monopoly Tycoon","","Depends on the settings menu.","STORY-US-055","TASK-146","","","Unity UI,C#"
"STORY-US-056: Adjust master, music, and sound effect volumes independently","As a player, I want to independently adjust the master, music, and sound effect volume levels.","User Story","Backlog","Must Have","","pm@project.com","",16,"settings,audio,ux","Sprint 12","User Interface & Experience (UI/UX)","Monopoly Tycoon","","US-054","EPIC-003","","","","Unity,Audio"
"TASK-148: Implement Audio Mixer and Volume Controls","Set up a Unity Audio Mixer with groups for Master, Music, and SFX. Create UI sliders in the settings menu and wire them to control the exposed volume parameters on the mixer. Persist the settings.","Task","Backlog","Must Have","ui-dev@project.com","pm@project.com","",16,"audio,settings,ui","Sprint 12","User Interface & Experience (UI/UX)","Monopoly Tycoon","","Depends on the settings menu.","STORY-US-056","TASK-146","","","Unity,Audio"
"STORY-US-059: Start an optional interactive tutorial to learn the game","As a new player, I want to start an optional, interactive tutorial to learn the basic rules and game controls.","User Story","Backlog","Should Have","","pm@project.com","",40,"tutorial,onboarding,ux","Sprint 13","User Interface & Experience (UI/UX)","Monopoly Tycoon","","US-008,US-015,US-030,US-044,US-049","EPIC-003","","","","Unity UI,C#"
"TASK-155: Develop Tutorial Scripting Engine","Create a data-driven system for the tutorial. This involves a state machine that reads tutorial steps from a ScriptableObject or JSON file, highlights the required UI element, and waits for the correct player action before proceeding.","Task","Backlog","Should Have","fullstack-dev@project.com","pm@project.com","",40,"tutorial,scripting,ux","Sprint 13","User Interface & Experience (UI/UX)","Monopoly Tycoon","","","STORY-US-059","","","","Unity UI,C#"
"STORY-US-060: Access and search a digital rulebook from game menus","As a player, I want to open a searchable digital rulebook from both the main menu and the in-game pause menu.","User Story","Backlog","Should Have","","pm@project.com","",24,"rulebook,ux,help","Sprint 13","User Interface & Experience (UI/UX)","Monopoly Tycoon","","US-008,US-054","EPIC-003","","","","Unity UI,C#"
"TASK-156: Implement Digital Rulebook UI and Search","Create the rulebook UI with a scrollable text area and a search input field. Load the rule text from an external JSON file. Implement the client-side search/filter logic.","Task","Backlog","Should Have","ui-dev@project.com","pm@project.com","",24,"ui,rulebook,search","Sprint 13","User Interface & Experience (UI/UX)","Monopoly Tycoon","","","STORY-US-060","","","","Unity UI,C#"
"STORY-US-037: Participate in an auction for the last available buildings","As a strategic player, I want to participate in an auction for the last available houses or hotels when there's a building shortage.","User Story","Backlog","Could Have","","pm@project.com","",56,"core-rule,auction,building,edge-case","Sprint 13","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","US-033,US-034,US-036","EPIC-001","","","","C#,Unity UI,AI"
"TASK-057-B: Implement Building Shortage Auction Logic","Extend the `AuctionService` to handle auctions for buildings. This requires identifying all eligible buyers (players with monopolies who can build) and conducting sequential auctions for each available building.","Task","Backlog","Could Have","backend-dev@project.com","pm@project.com","",56,"backend,auction,building","Sprint 13","Core Gameplay Engine & Rule Implementation","Monopoly Tycoon","","Depends on the property auction system.","STORY-US-037","TASK-032","","","C#"
"STORY-US-065: Export my top score history to a text file","As a competitive player, I want to export my Top 10 High Scores list to a simple text file.","User Story","Backlog","Could Have","","pm@project.com","",8,"high-scores,export,ux","Sprint 14","User Interface & Experience (UI/UX)","Monopoly Tycoon","","US-064","EPIC-003","","","","C#,Unity UI"
"TASK-157: Implement High Score Export Feature","Add an 'Export' button to the Top Scores screen. The button click will open a native Windows 'Save As' dialog and write the formatted high score list to a .txt file.","Task","Backlog","Could Have","ui-dev@project.com","pm@project.com","",8,"ui,export,file-io","Sprint 14","User Interface & Experience (UI/UX)","Monopoly Tycoon","","Depends on the Top Scores screen.","STORY-US-065","TASK-138","","","Unity UI,C#"
"STORY-US-067: Be notified of available game updates on startup","As a Game Player, I want to be notified when a new version of the game is available upon startup.","User Story","Backlog","Could Have","","pm@project.com","",22,"update-check,infrastructure,ux","Sprint 14","Application Shell & Infrastructure","Monopoly Tycoon","","US-008","EPIC-005","","","","C#,.NET 8"
"TASK-014-B: Implement Asynchronous Version Check Service","Create a service that makes an async HTTPS request to a predefined URL to fetch a JSON file with the latest version number and download URL. It must handle errors silently.","Task","Backlog","Could Have","backend-dev@project.com","pm@project.com","",7.2,"update-check,infrastructure","Sprint 14","Application Shell & Infrastructure","Monopoly Tycoon","","","STORY-US-067","","","","C#,.NET 8"
"TASK-015-B: Create Update Notification UI on Main Menu","Design a non-intrusive UI element on the main menu to display the update notification. This element will be hidden by default.","Task","Backlog","Could Have","ui-dev@project.com","pm@project.com","",6,"update-check,ui","Sprint 14","Application Shell & Infrastructure","Monopoly Tycoon","","Depends on the main menu.","STORY-US-067","TASK-104","","","Unity UI,C#"
"TASK-016-B: Integrate Update Check with Main Menu UI","Wire the update service to the main menu controller. On finding a new version, the controller will show the notification UI. Clicking the UI opens the download URL in a browser.","Task","Backlog","Could Have","fullstack-dev@project.com","pm@project.com","",8.3,"update-check,integration","Sprint 14","Application Shell & Infrastructure","Monopoly Tycoon","","Depends on the service and UI.","STORY-US-067","TASK-014-B,TASK-015-B","","","C#,Unity"
"STORY-US-066: Change the game's visual and audio theme","As a player, I want to select and apply different visual and audio themes for the game.","User Story","Backlog","Should Have","","pm@project.com","",64,"theming,ux,replayability","Sprint 14","Application Shell & Infrastructure","Monopoly Tycoon","","US-054","EPIC-005","","","","Unity,C#"
"TASK-009-B: Design Theme Management Architecture","Architect a data-driven theme management system using ScriptableObjects in Unity to hold references to all swappable assets.","Task","Backlog","Should Have","lead-dev@project.com","pm@project.com","",8.3,"theming,architecture","Sprint 14","Application Shell & Infrastructure","Monopoly Tycoon","","RISK-004: Risk of memory leaks.","STORY-US-066","","","","Unity,C#,Software Architecture"
"TASK-010-B: Create and Populate Theme Asset Packages","Create the ScriptableObject instances for 'Classic' and 'Futuristic' themes and populate them with all required placeholder or final assets.","Task","Backlog","Should Have","tech-artist@project.com","pm@project.com","",10.3,"theming,assets","Sprint 14","Application Shell & Infrastructure","Monopoly Tycoon","","Depends on the architecture. RISK-009: Asset delivery delay.","STORY-US-066","TASK-009-B","","","Unity"
"TASK-011-B: Implement Theme Application Logic","Implement the core logic in `ThemeManager.cs` to apply assets from the loaded theme to all registered game components and UI elements, ensuring old assets are unloaded.","Task","Backlog","Should Have","backend-dev@project.com","pm@project.com","",16.7,"theming,backend","Sprint 14","Application Shell & Infrastructure","Monopoly Tycoon","","Depends on architecture and assets.","STORY-US-066","TASK-009-B,TASK-010-B","","","Unity,C#"
"TASK-012-B: Integrate Theme Selection into Settings UI","Add a UI control to the Settings Menu to allow the user to select and apply a theme at runtime. Persist the choice.","Task","Backlog","Should Have","ui-dev@project.com","pm@project.com","",8.3,"theming,ui","Sprint 14","Application Shell & Infrastructure","Monopoly Tycoon","","Depends on settings menu and theme logic.","STORY-US-066","TASK-146,TASK-011-B","","","Unity UI,C#"
"TASK-013-B: Refactor Game Components for Theming","Perform a comprehensive refactoring of all UI and game objects to remove hard-coded asset references, replacing them with calls to the `ThemeManager`.","Task","Backlog","Should Have","fullstack-dev@project.com","pm@project.com","",16,"theming,refactoring","Sprint 14","Application Shell & Infrastructure","Monopoly Tycoon","","Depends on a functional ThemeManager.","STORY-US-066","TASK-011-B","","","Unity,C#"
"EPIC-006: Quality Engineering & Development Standards","Covers all tasks related to ensuring code quality, test coverage, and adherence to development standards, including setting up test frameworks and writing comprehensive tests.","Epic","Backlog","Critical","","pm@project.com","",154,"qa,testing,dev-standards","","","Monopoly Tycoon","","","","","",""
"TASK-160: Setup NUnit Test Project","Create and configure a new .NET project for NUnit tests within the solution. Ensure it can reference the core game logic project and that tests can be run from Visual Studio and the command line.","Task","Backlog","Must Have","lead-dev@project.com","pm@project.com","",8,"testing,nunit,setup","Sprint 1","Quality Engineering & Development Standards","Monopoly Tycoon","","","EPIC-006","","","","NUnit,.NET 8"
"TASK-161: Implement Unit Tests for Core Logic (Sprint 1-4)","Write NUnit tests for the core game logic developed in the initial sprints. This includes `RentCalculator`, `TaxCalculator`, `NetWorthCalculator`, and dice roll services. Aim for high coverage on these critical components.","Task","Backlog","Must Have","qa-engineer@project.com","pm@project.com","",32,"testing,nunit,rules-engine","Sprint 4","Quality Engineering & Development Standards","Monopoly Tycoon","","Depends on the logic being implemented.","EPIC-006","TASK-035,TASK-038,TASK-039","","","NUnit,C#"
"TASK-162: Implement Unit Tests for Turn and Jail Logic (Sprint 5)","Write comprehensive NUnit tests for the `TurnManager` state machine and all jail-related logic. Cover all state transitions, doubles rules, and jail exceptions.","Task","Backlog","Must Have","qa-engineer@project.com","pm@project.com","",24,"testing,nunit,state-machine","Sprint 5","Quality Engineering & Development Standards","Monopoly Tycoon","","Depends on the TurnManager implementation.","EPIC-006","TASK-026,TASK-041,TASK-042,TASK-044,TASK-045","","","NUnit,C#"
"TASK-163: Implement Unit Tests for Building Logic (Sprint 6-7)","Write NUnit tests for all property development logic in the `RuleEngine`, including validation for even-building, hotel upgrades, bank supply checks, and mortgage status.","Task","Backlog","Must Have","qa-engineer@project.com","pm@project.com","",24,"testing,nunit,building","Sprint 7","Quality Engineering & Development Standards","Monopoly Tycoon","","Depends on the building logic.","EPIC-006","TASK-050,TASK-052,TASK-053","","","NUnit,C#"
"TASK-164: Create Integration Test Suite and Scenarios","Set up the Unity Test Framework for integration testing. Create helper methods to load specific game states from the predefined test asset save files (REQ-1-027).","Task","Backlog","Must Have","qa-engineer@project.com","pm@project.com","",16,"testing,integration,setup","Sprint 8","Quality Engineering & Development Standards","Monopoly Tycoon","","","EPIC-006","","","","Unity Test Framework"
"TASK-165: Implement Integration Tests for Key Workflows","Write integration tests covering the key end-to-end workflows from REQ-1-026: 1) Save and successfully load a game state. 2) The complete trade negotiation sequence. 3) A player going bankrupt and their assets being correctly transferred.","Task","Backlog","Must Have","qa-engineer@project.com","pm@project.com","",32,"testing,integration,e2e","Sprint 12","Quality Engineering & Development Standards","Monopoly Tycoon","","Depends on the features being complete.","EPIC-006","TASK-131,TASK-123,TASK-087","","","Unity Test Framework"
"TASK-166: Create Predefined Save Game Test Assets","As part of the test assets, create and maintain a collection of curated save game files for testing specific edge cases, such as near bankruptcy, a housing shortage, and complex property ownerships (REQ-1-027).","Task","Backlog","Must Have","qa-engineer@project.com","pm@project.com","",16,"testing,test-data,qa","Sprint 9","Quality Engineering & Development Standards","Monopoly Tycoon","","Requires a functional save game system.","EPIC-006","TASK-131","","","QA"