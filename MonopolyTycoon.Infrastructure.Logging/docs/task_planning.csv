Title,Description,Type,Status,Priority,Assignee,Reporter,Due Date,Estimate,Labels,Sprint,Epic,Project,Attachments,Comments,Parent ID,Dependencies,Created At,Updated At,Skills Required
"Technical Foundation and Project Setup","Establish the core technical infrastructure, including error handling, logging, and build processes.","Epic","Backlog","Critical","","pm@project.com","",38,"infrastructure","Sprint 1","","Monopoly Tycoon","","","","","","",
"User Interface and Experience (UI/UX)","Develop all user-facing screens, HUDs, and visual elements for the game.","Epic","Backlog","Critical","","pm@project.com","",32.8,"ui,ux","Sprint 1","","Monopoly Tycoon","","","","","","",
"Data Persistence and Player Progression","Implement systems for saving/loading game state and tracking player statistics over time.","Epic","Backlog","Critical","","pm@project.com","",38.1,"persistence,database","Sprint 1","","Monopoly Tycoon","","","","","","",
"Core Gameplay and Rule Engine","Implement the core auction mechanics, including the state machine, UI, AI bidding logic, and testing.","Epic","Backlog","Critical","","pm@project.com","",73.8,"gameplay,rules","Sprint 2","","Monopoly Tycoon","","","","","","",
"Receive guidance on locating log files after an error","As a player who has encountered an unexpected game crash, I want to be shown a clear error message that includes a unique error ID and instructions on where to find the log files, so that I can easily provide developers with the necessary information to diagnose and fix the bug.","Story","Backlog","Critical","","pm@project.com","",38,"error-handling,supportability","Sprint 1","Technical Foundation and Project Setup","Monopoly Tycoon","","","EPIC-001","","","",
"TASK-005-01: Backend: Implement Global Exception Handler Service","Implement a service that registers with the .NET `AppDomain.CurrentDomain.UnhandledException` event. This handler will be responsible for catching any exception that is not caught elsewhere. It must generate a unique correlation ID (e.g., a GUID) for each exception.
AC:
1. The handler is registered at application startup.
2. The handler's event delegate is successfully invoked when an unhandled exception is thrown.
3. A unique, non-repeating ID is generated for each exception event.","Task","Backlog","Critical","","pm@project.com","",8.3,"infrastructure,error-handling,backend","Sprint 1","Technical Foundation and Project Setup","Monopoly Tycoon","","","US-005","","","","C#, .NET",
"TASK-005-02: Integration: Connect Exception Handler to Logging Service","Integrate the `GlobalExceptionHandler` with the `LoggingService`. When an exception is caught, the handler must call the logger to write a structured ERROR log entry containing the full exception object (message, stack trace) and the generated correlation ID.
AC:
1. The log entry is at the ERROR level and is structured JSON.
2. The entry contains a 'CorrelationId' field matching the one generated by the handler.
3. The log is flushed to disk before the application is allowed to terminate.","Task","Backlog","Critical","","pm@project.com","",6.3,"integration,logging","Sprint 1","Technical Foundation and Project Setup","Monopoly Tycoon","","","US-005","TASK-005-01,TASK-002-01","","","C#, Serilog",
"TASK-005-03: Frontend: Create Fatal Error Dialog UI","Create a new, simple Unity scene and UI prefab for the fatal error dialog. This UI must be self-contained and have minimal dependencies, ensuring it can be displayed even if the main game's UI system has failed. The dialog must have fields for the error message, correlation ID, and log path, plus a 'Close' button.
AC:
1. A `FatalErrorDialog.prefab` is created with a controller script.
2. The controller has a public method to populate the dialog's text fields.
3. The 'Close' button is hooked up to terminate the application.","Task","Backlog","Critical","","pm@project.com","",10.3,"ui,error-handling,frontend","Sprint 1","Technical Foundation and Project Setup","Monopoly Tycoon","","","US-005","","","","Unity UI, C#",
"TASK-005-04: Integration: Display Error Dialog from Exception Handler","Connect the `GlobalExceptionHandler` to the `FatalErrorDialog`. When an exception is caught, after logging, the handler must trigger the display of the error dialog, passing it the correlation ID and the resolved log file path. This may require careful handling of cross-thread UI updates.
AC:
1. Catching an exception successfully displays the fatal error dialog.
2. The dialog is populated with the correct correlation ID and log file path.
3. The application remains visible but frozen behind the modal dialog until closed.","Task","Backlog","Critical","","pm@project.com","",8.5,"integration,error-handling","Sprint 1","Technical Foundation and Project Setup","Monopoly Tycoon","","","US-005","TASK-005-01,TASK-005-03","","","C#, Unity",
"TASK-005-05: Review and Documentation","Review the entire global error handling pipeline. Document the flow from exception to log to user dialog in the project's technical documentation.
AC:
1. Code for all components is reviewed and approved.
2. A clear diagram and description of the error handling flow is added to the technical documentation.","Task","Backlog","Critical","","pm@project.com","",4.2,"documentation,code-review","Sprint 1","Technical Foundation and Project Setup","Monopoly Tycoon","","","US-005","TASK-005-01,TASK-005-02,TASK-005-03,TASK-005-04","","","Technical Writing",
"View at-a-glance information for all players in the HUD","As a player, I want a persistent on-screen display showing the name, token, and current cash for every player, so that I can instantly assess the financial standing of my opponents and myself to make better strategic decisions throughout the game.","Story","Backlog","Critical","","pm@project.com","",32.8,"ui,hud","Sprint 1","User Interface and Experience (UI/UX)","Monopoly Tycoon","","","EPIC-004","","","",
"TASK-049-01: Frontend: Create Player HUD Panel Prefab","Design and implement a reusable Unity UI prefab for a single player's HUD panel. It must contain UI elements for the player's name, token icon, and cash balance.
AC:
1. The prefab contains TextMeshPro fields for name and cash, and an Image field for the token.
2. A `PlayerHUDPanelController.cs` script is attached with public methods to update the displayed data.
3. The prefab includes a distinct visual element that can be enabled/disabled to indicate the active turn.","Task","Backlog","Critical","","pm@project.com","",6,"ui,hud,frontend","Sprint 1","User Interface and Experience (UI/UX)","Monopoly Tycoon","","","US-049","","","","Unity UI, C#",
"TASK-049-02: Backend: Implement HUDController for Data Binding","Create a `HUDController.cs` to manage the entire HUD. It will instantiate player panels and subscribe to game events (e.g., `OnTurnChanged`, `OnPlayerCashChanged`) to delegate UI updates to the appropriate panel.
AC:
1. The controller correctly creates 2, 3, or 4 panels based on the GameState.
2. The `OnTurnChanged` event correctly updates which panel is highlighted.
3. The `OnPlayerCashChanged` event updates the cash value for the correct player's panel.","Task","Backlog","Critical","","pm@project.com","",12,"ui,hud,backend","Sprint 1","User Interface and Experience (UI/UX)","Monopoly Tycoon","","","US-049","TASK-049-01","","","C#, Unity",
"TASK-049-03: Testing: Create Integration Test for HUD Updates","Using the Unity Test Framework, create an integration test that initializes a game state, programmatically triggers events like a turn change and a cash transaction, and verifies that the HUD controller correctly updates its child panel objects.
AC:
1. Test successfully instantiates the HUD in a test scene.
2. Test verifies that firing an `OnTurnChanged` event results in the correct panel's highlight being active.
3. Test verifies that firing an `OnPlayerCashChanged` event updates the correct panel's text.","Task","Backlog","Critical","","pm@project.com","",10.3,"testing,integration-test,ui","Sprint 1","User Interface and Experience (UI/UX)","Monopoly Tycoon","","","US-049","TASK-049-02","","","C#, Unity Test Framework",
"TASK-049-04: Review and Documentation","Review the implementation of the HUD system. Document the events the `HUDController` subscribes to and the public methods available on the `PlayerHUDPanelController`.
AC:
1. Code has been reviewed and approved.
2. Technical documentation for the HUD system is created and outlines its dependencies on the event bus.","Task","Backlog","Critical","","pm@project.com","",4.2,"documentation,code-review","Sprint 1","User Interface and Experience (UI/UX)","Monopoly Tycoon","","","US-049","TASK-049-01,TASK-049-02","","","Technical Writing",
"Save game progress into one of several save slots","As a player, I want to save my current game progress into a specific save slot at the start of my turn, so that I can safely exit the game and resume playing from the same point at a later time.","Story","Backlog","Critical","","pm@project.com","",38.1,"persistence,save-load","Sprint 1","Data Persistence and Player Progression","Monopoly Tycoon","","","EPIC-005","","","",
"TASK-061-01: Backend: Develop SaveGameRepository for Serialization","Create the `SaveGameRepository` and implement `SaveAsync`. This method will serialize the `GameState` object to a versioned JSON string, calculate a SHA256 checksum, and write the final payload to a file.
AC:
1. `SaveAsync` successfully creates a JSON file in '%APPDATA%/MonopolyTycoon/saves'.
2. The file contains 'version', 'checksum', and 'data' keys.
3. The checksum is a valid SHA256 hash of the data section.
4. File I/O operations are wrapped in try-catch blocks.","Task","Backlog","Critical","","pm@project.com","",12.3,"persistence,backend,serialization","Sprint 1","Data Persistence and Player Progression","Monopoly Tycoon","","","US-061","TASK-008-01","","","C#, System.Text.Json, File I/O",
"TASK-061-02: Frontend: Implement Save Game UI Screen","Develop the 'Save Game' UI screen prefab. The screen must display at least 5 save slots and have a controller script that can scan the save directory to read and display metadata from existing save files.
AC:
1. The UI displays 5 or more slots with distinct visual states for 'Empty' and 'Used'.
2. Used slots correctly show metadata read from the corresponding save files.
3. A 'Back' button is present to return to the pause menu.","Task","Backlog","Critical","","pm@project.com","",10.3,"ui,save-load,frontend","Sprint 1","Data Persistence and Player Progression","Monopoly Tycoon","","","US-061","","","","Unity UI, C#",
"TASK-061-03: Integration: Connect Save UI to Save Repository","Implement logic in the `SaveGameScreenController`. Clicking an empty slot calls `SaveGameRepository.SaveAsync`. Clicking a used slot displays a confirmation dialog before saving. The 'Save Game' button in the pause menu must be enabled/disabled based on the turn phase.
AC:
1. Clicking an empty slot triggers a save.
2. Clicking a used slot shows a confirmation modal before saving.
3. The pause menu's 'Save Game' button is correctly disabled after the player rolls the dice.","Task","Backlog","Critical","","pm@project.com","",8.3,"integration,save-load","Sprint 1","Data Persistence and Player Progression","Monopoly Tycoon","","","US-061","TASK-061-01,TASK-061-02","","","C#, Unity UI",
"TASK-061-04: Testing: Create Unit Tests for Save Logic","Write NUnit tests for the `SaveGameRepository`. Mock the file system dependency to verify the serialization process, versioning, and checksum calculation without performing actual file I/O.
AC:
1. A test verifies that the `GameState` object is correctly serialized to a JSON string.
2. A test verifies that a valid SHA256 checksum is generated.
3. A test verifies the final data structure includes 'version', 'checksum', and 'data' keys.","Task","Backlog","Critical","","pm@project.com","",7.2,"testing,unit-test","Sprint 1","Data Persistence and Player Progression","Monopoly Tycoon","","","US-061","TASK-061-01","","","C#, NUnit, Moq",
"Participate in an auction for a property","As a Human Player, I want to participate in a turn-based auction for an unowned property, placing bids against AI opponents, so that I have a strategic opportunity to acquire properties that were not purchased outright and can compete to complete my sets or block my opponents.","Story","Backlog","Critical","","pm@project.com","",73.8,"gameplay,auction","Sprint 2","Core Gameplay and Rule Engine","Monopoly Tycoon","","","EPIC-002","","","",
"TASK-032-01: Backend: Develop Auction Manager Service","Create the `AuctionManager` service responsible for managing the auction state machine. This includes initializing an auction, managing active bidders, tracking the current bid, and determining the winner.
AC:
1. The service can start an auction for a specific property.
2. The `ProcessBid` method correctly updates the high bidder and bid amount.
3. The service correctly identifies the winner when only one bidder remains.","Task","Backlog","Critical","","pm@project.com","",12.3,"gameplay-logic,auction,backend","Sprint 2","Core Gameplay and Rule Engine","Monopoly Tycoon","","","US-032","TASK-010-01","","","C#, Game Logic, State Machines",
"TASK-032-02: Frontend: Implement Auction UI Prefab","Create the Unity UI prefab for the auction modal dialog. It must include all required elements: property card display, current bid, high bidder, player status list, and buttons for 'Place Bid' and 'Withdraw'.
AC:
1. The prefab contains all required UI elements and is data-driven.
2. A `AuctionUIController` script is attached with public methods to update all displayed data.
3. The layout is responsive and adheres to the project's UI design standards.","Task","Backlog","Critical","","pm@project.com","",10.3,"ui,auction,frontend","Sprint 2","Core Gameplay and Rule Engine","Monopoly Tycoon","","","US-032","","","","Unity UI, C#",
"TASK-032-03: Integration: Connect Auction UI to Manager","Wire the `AuctionUIController` to the `AuctionManager`. The UI will listen for events from the manager and update the display. The UI buttons will call methods on the manager to process the human player's actions. Implement the game speed override logic.
AC:
1. When the manager's state changes, the UI updates within one frame.
2. Clicking the UI buttons correctly triggers the corresponding logic in the manager.
3. The game speed is set to 'Normal' when the auction UI is displayed and restored when it is closed.","Task","Backlog","Critical","","pm@project.com","",12,"integration,auction","Sprint 2","Core Gameplay and Rule Engine","Monopoly Tycoon","","","US-032","TASK-032-01,TASK-032-02","","","C#, Unity",
"TASK-032-04: AI: Implement AI Bidding Logic Node","Create a new node for the AI Behavior Tree that handles auction bidding. The node will receive the current auction state and use the AI's difficulty parameters from the JSON config to decide whether to bid or withdraw.
AC:
1. The AI can make a bid/withdraw decision based on its configured personality.
2. The AI will not bid more cash than it possesses.
3. 'Hard' AI bids aggressively up to a calculated property value.","Task","Backlog","Critical","","pm@project.com","",14.3,"ai,auction,backend","Sprint 2","Core Gameplay and Rule Engine","Monopoly Tycoon","","","US-032","TASK-032-01,TASK-017-01","","","C#, AI Development",
"TASK-032-05: Testing: Create Unit Tests for AuctionManager","Write a comprehensive suite of NUnit tests for the `AuctionManager` service. Cover all scenarios including starting an auction, processing bids, handling withdrawals, correct turn cycling, and winner declaration.
AC:
1. Test coverage for `AuctionManager.cs` exceeds 80%.
2. Tests for winner declaration logic are implemented and pass.
3. Tests for turn order and skipping withdrawn players are implemented and pass.","Task","Backlog","Critical","","pm@project.com","",8.3,"testing,unit-test","Sprint 2","Core Gameplay and Rule Engine","Monopoly Tycoon","","","US-032","TASK-032-01","","","C#, NUnit",
"TASK-032-06: Testing: Create Integration Test for Full Auction Flow","Using the Unity Test Framework, create an end-to-end integration test for the auction feature. The test will programmatically trigger an auction, simulate human and AI bids via service calls, and verify the final game state is correct.
AC:
1. The test successfully initiates an auction and simulates a complete bidding sequence.
2. The test verifies the winning player's cash is debited correctly.
3. The test verifies the winning player's property list is updated correctly.","Task","Backlog","Critical","","pm@project.com","",12.3,"testing,integration-test","Sprint 2","Core Gameplay and Rule Engine","Monopoly Tycoon","","","US-032","TASK-032-03,TASK-032-04","","","C#, Unity Test Framework",
"TASK-032-07: Review and Documentation","Conduct a final code review of all components of the auction system. Document the `AuctionManager`'s public API, the event contracts for UI updates, and the parameters used by the AI bidding node.
AC:
1. Code has been reviewed and approved by a senior developer.
2. Technical documentation is updated with the new components.
3. The `ai_params.json` file is documented with explanations for the auction-related parameters.","Task","Backlog","Critical","","pm@project.com","",4.2,"documentation,code-review","Sprint 2","Core Gameplay and Rule Engine","Monopoly Tycoon","","","US-032","TASK-032-01,TASK-032-02,TASK-032-03,TASK-032-04","","","Technical Writing",