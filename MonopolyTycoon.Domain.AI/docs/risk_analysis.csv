risk_id,risk_category,risk_description,probability,impact,risk_score,priority_level,affected_tasks,root_cause,mitigation_strategy,contingency_plan,monitoring_trigger,owner,due_date,status
RISK-001,Technical,"The serialization and deserialization of the complex `GameState` object (WI-201-002) for the save/load system (WS-601) is prone to errors, such as circular references or data loss, leading to corrupted save files.",4,5,20,High,"WI-201-002, WI-601-001, WI-601-002","High complexity of the game state's object graph, which needs to be fully serialized to JSON.",Implement a prototype of the save/load system early in the development cycle. Write comprehensive integration tests (as planned in WI-701-002) that cover the full save-load-verify cycle for complex game states. Use `[JsonIgnore]` attributes judiciously to break circular references.,If `System.Text.Json` proves inadequate for the object graph, switch to a more robust library like Newtonsoft.Json. Allocate a dedicated refactoring spike to update the serialization logic.,First failed integration test for the save/load cycle. Serialization exceptions appear in error logs.,Tech Lead,Sprint 2,Open
RISK-002,Quality,"The AI's decision-making logic (WI-401-003) is difficult to balance, resulting in AI opponents that are either too easy (providing no challenge) or too difficult/perfect (making the game unfun and feeling unfair).",4,4,16,High,"WI-401-003, EPIC-400","The subjective nature of ""fun"" and ""challenging"" AI behavior makes it hard to tune without extensive playtesting and data.",Externalize all AI decision parameters to `ai_config.json` (WI-401-002) to allow for rapid tuning without recompiling. Conduct extensive playtesting with a wide range of player skill levels. Use DEBUG level logging (REQ-1-019) to trace AI decision paths for analysis.,If the Behavior Tree becomes too complex to balance for the initial release, simplify the AI's goals and logic, focusing on competent but not optimal play. Allocate a post-launch sprint dedicated to AI tuning based on player feedback.,Playtester feedback consistently reports AI is ""too dumb"" or ""cheats"". Win/loss ratio for 'Hard' AI is <10% or >90% against experienced testers.,Game Designer,Ongoing,Open
RISK-003,Technical,"The automatic data migration for older save files (WI-601-003) fails or corrupts user data, causing players to lose their progress after an application update.",3,5,15,High,"WI-601-003, REQ-1-090","Complexity in correctly transforming data between different schema versions, especially with breaking changes.",Ensure the migration process is atomic by always backing up the original file before attempting to write the new one. Implement extensive unit tests for the `DataMigrationManager` covering all supported version-to-version hops. Log all migration attempts and failures in detail.,If a specific migration path is too risky, disable it. In the UI, mark the old save file as 'Incompatible' instead of attempting migration. Announce this breaking change clearly in the release notes.,Error logs show a `DataMigrationException`. QA reports that loading a previous version's save file fails or results in a corrupted state.,Lead Developer,Sprint 6,Open
RISK-004,Timeline,"The development of the core gameplay logic, including the Turn Management State Machine (WI-202-001), Rule Engine (WI-202-003), and Bankruptcy logic (WI-303-001), is significantly underestimated due to unforeseen rule complexity and edge cases.",4,4,16,High,"WI-202-001, WI-202-003, WI-303-001","The official Monopoly rulebook contains numerous specific exceptions and edge cases that are easy to overlook during initial estimation.",Prioritize the implementation and testing of the most complex rules first (e.g., bankruptcy, building shortage auctions). Use Test-Driven Development (TDD) by writing unit tests that codify the rules before implementing the logic. Break down large rule implementations into smaller, more manageable tasks.,De-scope less critical or complex rules if they are not part of the standard U.S. baseline (e.g., house rules are already de-scoped). Allocate additional QA resources to focus solely on rule validation.,Key gameplay features are failing their unit tests late in the sprint. Velocity on core logic tasks is consistently lower than estimated for two consecutive sprints.,Project Manager,Sprint 3,Open
RISK-005,Resource,"A key person dependency develops for the developer responsible for the highly specialized AI Behavior Tree framework (WI-401-001) and its decision logic (WI-401-003), creating a single point of failure.",2,5,10,Medium,"WS-401","Niche skill set required for AI architecture and game design balancing, leading to knowledge silos.",Enforce paired programming or mandatory, in-depth code reviews for all AI-related code. Maintain high-quality technical documentation for the AI architecture and configurable parameters (REQ-1-096). Ensure a second developer has a working knowledge of the system.,If the key person is lost, immediately halt new feature development in the AI domain. Allocate a new resource to spend a dedicated sprint getting up to speed on the existing codebase, using the documentation and unit tests as a guide.,Project commit history shows only one developer contributing to the AI system over a two-sprint period. No one else on the team can answer questions about the AI's behavior.,Tech Lead,Ongoing,Open
RISK-006,Quality,"The application fails to meet the performance requirement of maintaining a sustained average of 60 FPS and not dropping below 45 FPS on recommended hardware (REQ-1-014), particularly in late-game scenarios.",3,4,12,Medium,"WI-501-001, WI-501-002, WI-401-003","Unoptimized 3D assets, inefficient UI updates, or complex AI calculations on the main thread cause frame rate drops.",Conduct regular performance profiling in Unity throughout development, not just at the end. Establish performance budgets for rendering, UI, and scripts early. Optimize 3D assets (poly count, textures) and UI canvases. Offload heavy AI calculations to run asynchronously if they impact frame rate.,If performance targets cannot be met, introduce graphics quality settings in the menu (e.g., 'Low', 'Medium', 'High') that control shadow quality, anti-aliasing, and visual effect complexity. Reduce the complexity of non-critical visual effects.,Profiler reports frame drops below 45 FPS during QA testing on a machine matching the 'Recommended' specs. The game feels sluggish during playtesting.,Lead Developer,Ongoing,Open
RISK-007,External,"The project is delayed or blocked by the need to conform to Hasbro's intellectual property and branding guidelines (REQ-1-099), requiring rework of assets or UI elements after they have already been implemented.",3,4,12,Medium,"EPIC-500, All UI and Art Assets","External dependency on a third party's approval process and subjective branding guidelines.",Establish a clear review and approval process with the Hasbro licensing contact early in the project. Submit key art, UI mockups, and branding elements for review *before* implementation begins. Create a style guide based on their feedback.,If feedback is slow or requires significant rework, create a themed version of the game with generic, placeholder assets that can be swapped out later. This allows development to continue in parallel with the approval process.,Hasbro contact provides negative feedback on submitted assets. The approval process takes longer than the sprint cycle allocated for it.,Project Manager,Sprint 1,Open
RISK-008,Technical,"The logic for the building shortage auction (WI-302-002) is overly complex to implement, leading to bugs, game state corruption, or an unbalanced game economy.",4,3,12,Medium,"WI-302-002","This is a niche and complex Monopoly rule that requires its own sub-state machine and AI bidding logic, making it a high-risk feature.",Develop this feature in an isolated test scene first. Create extensive unit and integration tests specifically for the auction flow. Use predefined save game files (WI-702-001) to repeatedly test the trigger condition and auction resolution.,If the feature proves too unstable or time-consuming, de-scope the auction part for the initial release. Instead, when a shortage occurs, simply block all building until houses are returned to the bank via other means (selling/bankruptcy).,The building auction feature is not stable by the end of its development sprint. The AI consistently makes poor bidding decisions during the auction.,Tech Lead,Sprint 4,Open
RISK-009,Timeline,"The creation of unit tests with 70% coverage for core logic (WI-701-001) and comprehensive integration tests (WI-701-002) takes significantly more time than allocated, delaying the project or compromising quality.",4,3,12,Medium,"WI-701-001, WI-701-002","Writing good, maintainable tests for complex, stateful game logic is a difficult and time-consuming task that is often underestimated.",Integrate testing into the daily workflow rather than leaving it as a separate phase. Use a TDD-like approach for the most critical rule logic. Monitor code coverage metrics from the beginning of the project using a CI tool.,Reduce the coverage target for less critical components if the timeline is at risk, but maintain the 70% target for the absolute core (Rule Engine, Bankruptcy Service). Prioritize integration tests for the most critical user workflows (save/load, bankruptcy).,Code coverage reports are consistently below target. The number of regression bugs increases in later sprints, indicating a lack of effective automated testing.,QA Lead,Ongoing,Open
RISK-010,Operational,"The automated database backup system (WI-602-003) fails silently or incorrectly prunes recent backups, leading to unrecoverable loss of player statistics if the main database file becomes corrupted.",3,3,9,Medium,"WI-602-003, REQ-1-089","File I/O operations can be fragile due to disk space issues, file locks, or permissions, and silent failures are a risk if not handled and logged properly.",Implement robust exception handling and logging for all backup operations (creation, deletion, checking). Add a unit test to verify the pruning logic (e.g., ""given 4 backups, when new backup is created, assert oldest is deleted""). Manually test the recovery process during QA.,If the automated system is unreliable, increase the number of retained backups from 3 to 5 to provide a larger recovery window. Add a troubleshooting section to the user manual explaining how to manually restore a backup.,A user reports loss of statistics. QA testing with a corrupted database file reveals that no valid backups are available for restoration.,Lead Developer,Sprint 6,Open
RISK-011,Technical,"The custom scripting in the Inno Setup uninstaller (WI-801-002) to handle conditional deletion of user data is buggy, leading to either accidental deletion of user data or failure to remove it when requested.",3,4,12,Medium,"WI-801-002","Installer scripting is a specialized skill, and logic errors can have significant negative consequences for the user's system.",Thoroughly test the uninstaller on clean virtual machines for all user choices (keep data, delete data). Default the user-facing choice to ""Keep Data"" to make the least destructive action the default. Document the scripting logic clearly in the project's technical documentation.,If the custom scripting is unreliable, revert to a simpler uninstaller that always leaves the `%APPDATA%` folder untouched and provides manual instructions for data removal in the user manual or on a support website.,QA testing reveals the uninstaller is not deleting or is incorrectly deleting the user data folder based on the user's choice.,Build Engineer,Sprint 7,Open
RISK-012,Quality,"The UI does not adapt gracefully to all supported aspect ratios (16:9, 16:10, 21:9), leading to overlapped elements, clipped text, or non-functional buttons on certain monitors (REQ-1-016).",4,2,8,Medium,"EPIC-500, US-004","Building a fully responsive UI in Unity requires disciplined use of anchors, pivots, and layout groups for every single UI element, which is easy to get wrong.",Establish a standard for creating responsive UI prefabs early in the project. Conduct regular UI reviews on simulated aspect ratios in the Unity Editor for every new UI screen that is developed. Use the Unity Test Framework to take screenshots at different resolutions as part of a CI process.,If full responsiveness is too time-consuming, prioritize functionality on the most common ratio (16:9). For other ratios like 21:9, accept aesthetic issues like ""pillarboxing"" as long as all UI elements remain fully visible and clickable.,QA reports UI bugs that are specific to a certain screen resolution or aspect ratio. Buttons are off-screen or text is unreadable during playtesting on an ultrawide monitor.,UI/UX Lead,Ongoing,Open
RISK-013,External,"The .NET 8 framework or a critical third-party library (Serilog, NUnit, SQLite) has a regression or bug that blocks development or affects the final product's stability.",2,4,8,Medium,"Entire Project","Dependency on external software which is outside the project team's direct control.",Use stable, Long-Term Support (LTS) versions of frameworks and libraries where possible. Isolate third-party code behind abstraction layers (e.g., ILogger interface) to make swapping out a problematic library easier. Monitor the libraries' official repositories for reported issues.,If a critical bug is found, attempt to find a workaround. If none is available, downgrade to a previous stable version of the library and adjust any code that relied on newer features. Allocate time for this potential refactoring.,A known bug in a core library is identified that directly impacts a feature being developed. The build breaks after a package update and cannot be easily fixed.,Tech Lead,Ongoing,Open