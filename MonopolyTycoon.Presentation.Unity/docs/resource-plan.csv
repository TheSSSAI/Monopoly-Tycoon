task_id,task_name,primary_skill,secondary_skill,complexity_level,estimated_hours,required_experience,team_size,dependencies,critical_path,resource_notes,alternative_approach
WI-INFRA-001,"Initialize Unity Project and Git Repository",DevOps,Backend Development,Low,2.2,Junior,1,"EPIC-INFRA-SETUP",Yes,"Requires engineer with basic Unity and Git CLI knowledge. This task is a blocker for all subsequent development.",Use a pre-defined project template or boilerplate to accelerate setup.
WI-INFRA-002,"Configure Serilog for Structured Logging",Backend Development,DevOps,Medium,6.3,Mid,1,"EPIC-INFRA-SETUP,TASK-INFRA-017",Yes,"Requires C# developer with experience in logging frameworks. Must understand file I/O in Unity's environment (`%APPDATA%`).","Use Unity's built-in logging system for initial development and replace with Serilog later, but this would create technical debt."
WI-INFRA-003,"Setup NUnit Test Framework in Unity",DevOps,Quality Assurance,Medium,3.2,Mid,1,"EPIC-INFRA-SETUP,TASK-INFRA-017",Yes,"Requires engineer familiar with Unity's Assembly Definition files and the Test Framework package. Blocker for all unit testing.",Use an external test runner outside of Unity, but this complicates testing MonoBehaviours and the game loop.
WI-CORE-001,"Implement `PlayerState` Data Model and Enums",Backend Development,N/A,Medium,6,Mid,1,"EPIC-CORE-DATAMODEL",Yes,"Core C# data modeling task. Requires clear understanding of the game's player-specific state variables. This is a foundational data object.",Generate C# classes from a JSON schema definition to ensure consistency with serialization logic.
WI-CORE-002,"Define Static Property Data using ScriptableObjects",Backend Development,Design,Medium,9,Mid,1,"EPIC-CORE-DATAMODEL",Yes,"Requires a Unity developer comfortable with ScriptableObjects for data-driven design. Involves significant data entry.",Store property data in a JSON file and load at runtime. This makes data changes easier post-build but is less 'Unity-native' than ScriptableObjects.
WI-CORE-003,"Implement `BoardState` for Dynamic Data",Backend Development,N/A,Medium,5,Mid,1,"EPIC-CORE-DATAMODEL,TASK-CORE-002",Yes,"Straightforward C# data modeling. The choice of data structure (Dictionary vs. Array) has performance implications to consider.",Instead of a dedicated object, merge this state directly into the GameState object, but this reduces modularity.
WI-CORE-004,"Implement Aggregate `GameState` Root Object",Backend Development,N/A,Medium,6,Senior,1,"EPIC-CORE-DATAMODEL,TASK-CORE-001,TASK-CORE-003",Yes,"Architectural task requiring a senior developer to design the central state object. This is the core data structure for the entire application, including save/load.",Use a less structured approach like a dictionary of objects, but this is not type-safe and would be harder to maintain and serialize.
WI-TEST-001,"Unit Test Data Model Serialization",Quality Assurance,Backend Development,Medium,6.2,Mid,1,"EPIC-CORE-DATAMODEL,TASK-CORE-004",Yes,"Requires QA engineer with C# and NUnit skills. Critical for ensuring the save/load system's reliability.",Perform only manual E2E testing of save/load, but this is less reliable and doesn't cover edge cases for data corruption.
WI-CORE-005,"Design and Implement Turn Manager State Machine",Backend Development,N/A,High,12.7,Senior,1,"EPIC-CORE-TURN-MGR,TASK-CORE-001",Yes,"High-complexity architectural task. Requires a senior developer with experience in state machines and game loop design. This is a central piece of the game logic.",Use a simpler switch-statement-based manager, but this will become unmaintainable as more turn phases and edge cases are added.
WI-TEST-002,"Unit Test Turn Manager Logic",Quality Assurance,Backend Development,Low,2.2,Mid,1,"EPIC-CORE-TURN-MGR,TASK-CORE-012",Yes,"Requires QA engineer to write NUnit tests for the state machine's transitions and player cycling logic.",Rely solely on manual playtesting, which is inefficient for testing all player counts and bankruptcy edge cases.
WI-CORE-006,"Implement Secure Dice Rolling Service",Backend Development,N/A,Medium,3.8,Mid,1,"US-015",Yes,"Requires a C# developer with knowledge of .NET's cryptography libraries to ensure fair, non-predictable rolls as per requirements.",Use Unity's `Random.Range`, which is simpler but not cryptographically secure and may not meet the strict fairness requirement.
WI-UI-001,"Create Dice Roll UI and Animation",Frontend Development,Design,Medium,7.2,Mid,1,"US-015,TASK-CORE-005",No,"Requires a Unity frontend developer or technical artist. Involves UI (button), 3D asset integration, and animation/physics implementation.",Use a simple 2D animation or just display the numbers with no animation to save time, but this would reduce visual polish.
WI-CORE-007,"Implement Player Movement Service",Backend Development,N/A,Medium,4.2,Mid,1,"US-016",Yes,"Core game logic task. Requires careful implementation of board wrap-around logic (modulo arithmetic) and GO detection.",Combine movement logic directly into the Turn Manager, but this violates the Single Responsibility Principle and makes the manager more complex.
WI-UI-002,"Implement Token Movement Animation Controller",Frontend Development,N/A,Medium,8.3,Mid,1,"US-016,TASK-CORE-007",No,"Requires Unity developer skilled in animation, coroutines, or tweening libraries. The completion event is critical for syncing with the game state.",Implement a simple 'teleport' movement with no animation. This would be faster to develop but would fail to meet the visual experience requirements.
WI-UI-003,"Implement Camera Follow Script",Frontend Development,N/A,Low,2.7,Junior,1,"US-016,TASK-CORE-008",No,"Standard Unity task. Can be assigned to a junior developer. Focus on smoothness to avoid jarring camera movements.",Use a static, zoomed-out camera. This is simpler but provides a less dynamic and immersive player experience.
WI-CORE-008,"Implement GO Salary Logic",Backend Development,N/A,Medium,3.2,Mid,1,"US-019,TASK-CORE-007",Yes,"Requires careful integration into the turn sequence to ensure salary is paid *after* movement but *before* the landing space action. Must handle 'Go to Jail' exceptions.",Fire a 'PlayerPassedGo' event and have a separate financial service subscribe to it, which is a more decoupled but slightly more complex architecture.
WI-INFRA-004,"Create Initial Inno Setup Script",DevOps,N/A,Medium,4,Mid,1,"US-001",Yes,"Requires an engineer with experience in installer technologies, specifically Inno Setup. Blocker for any distributable build.",Use a simple ZIP file for distribution. This is unprofessional, provides no uninstaller, and doesn't create shortcuts.
WI-INFRA-005,"Implement File Packaging and Uninstaller Registration",DevOps,N/A,Medium,5.2,Mid,1,"US-001,TASK-INFRA-001",Yes,"Core installer task. Requires knowledge of Inno Setup's file and registry handling sections.",Manually create the uninstaller entry, which is error-prone and less robust than using the installer's built-in functionality.
WI-INFRA-006,"Implement Disk Space & UAC Handling",DevOps,N/A,Medium,4.2,Mid,1,"US-001,TASK-INFRA-001",Yes,"Requires some Pascal Script knowledge for the disk space check. UAC handling is a standard installer manifest setting.",Skip the disk space check, risking installation failure and user frustration. Don't require UAC, which would prevent installation in standard directories like Program Files.
WI-INFRA-007,"Add Directory Selection Page to Installer",DevOps,N/A,Medium,4.2,Mid,1,"US-002,TASK-INFRA-001",No,"Standard Inno Setup feature, requires configuring the wizard pages in the script.",Force all users to install to the default directory, which is a poor user experience for those with limited C: drive space.
WI-INFRA-008,"Add Desktop Shortcut Task to Installer",DevOps,N/A,Medium,3.7,Mid,1,"US-003,TASK-INFRA-001",No,"Standard Inno Setup feature, requires simple configuration in the `[Tasks]` and `[Icons]` sections.",Don't offer a shortcut, making it harder for users to find and launch the game after installation.
WI-AI-001,"Implement Core Behavior Tree Framework",Backend Development,Data Engineering,Critical,16.7,Senior,1,"EPIC-AI-ARCH",Yes,"High-complexity architectural task for a senior AI developer. This is the foundation for all AI logic. (See RISK-004)","As identified in RISK-004, evaluate and integrate a pre-existing open-source C# Behavior Tree library to accelerate development."
WI-AI-002,"Implement AI Configuration Service and JSON Schema",Backend Development,Data Engineering,Medium,8.3,Mid,1,"EPIC-AI-ARCH",Yes,"Requires a developer skilled in C# and JSON serialization. This service is critical for tuning AI without recompiling the game.",Hard-code AI parameters directly in the code. This is faster initially but makes balancing and tuning the AI extremely difficult and slow.
WI-TEST-003,"Unit Test AI Configuration Service",Quality Assurance,Backend Development,Medium,4.7,Mid,1,"EPIC-AI-ARCH,TASK-AI-002",Yes,"Requires QA engineer with C# and NUnit skills to test JSON parsing and error handling.",Rely on manual testing, which is slow and may not cover edge cases like malformed JSON files.
WI-CORE-009,"Implement Doubles Logic in Turn Manager",Backend Development,N/A,Medium,6.2,Mid,1,"US-017,TASK-CORE-012",Yes,"Requires modification of the core Turn Manager state machine. The 'get out of jail' exception is a key complexity.",Handle the extra turn with a simple boolean flag instead of a state transition, but this is less robust for handling the three-doubles rule.
WI-CORE-010,"Implement 'Three Doubles to Jail' Rule",Backend Development,N/A,Medium,6,Mid,1,"US-018,TASK-CORE-010",Yes,"Rule implementation that deeply integrates with the Turn Manager. Requires careful state management of the doubles counter.",Trigger the 'Go to Jail' action directly from the dice rolling service, but this couples the dice service with game rules and is poor architecture.
WI-CORE-011,"Implement 'Free Parking' Space Action (No-Op)",Backend Development,N/A,Low,2.2,Junior,1,"US-028,TASK-CORE-012",No,"Simple game rule implementation. Good task for a junior developer to get familiar with the Turn Manager.",Do nothing and have no specific logic, but it's better to explicitly handle it as a 'no-op' to prevent accidental future logic from being applied.
WI-CORE-012,"Implement Property Purchase Logic",Backend Development,N/A,Medium,5,Mid,1,"US-030,TASK-CORE-001,TASK-CORE-003",Yes,"Core economic transaction logic. Must be an atomic operation to prevent game state corruption (e.g., deducting cash without granting property).","Implement a Command Pattern for all financial transactions to ensure they are atomic and can be rolled back on failure."
WI-CORE-013,"Implement Auction Logic Service",Backend Development,N/A,High,9.3,Senior,1,"US-032",Yes,"Requires implementation of a mini-game loop for bidding. State management for bidders and turn order is complex.",Simplify the auction to a single round of sealed bids. This is not per the official rules but would be simpler to implement.
WI-CORE-014,"Implement Rent Calculation Service",Backend Development,N/A,Medium,8.3,Mid,1,"US-044,TASK-CORE-004",Yes,"Complex business logic with many conditional branches. A good candidate for Test-Driven Development (TDD).","Instead of a central service, place rent calculation logic on each property's ScriptableObject. This decentralizes logic, making it harder to manage global rules."
WI-CORE-015,"Implement Full Jail Rule Set",Backend Development,N/A,High,12,Senior,1,"EPIC-CORE-RULES-ADV,TASK-CORE-011,TASK-UI-015",Yes,"Complex interaction between the Turn Manager, Rule Engine, and UI. Requires careful state management for the 3-turn limit.",Implement only the 'pay fine' option initially, adding the other options later. This would not meet the requirements for an authentic experience.
WI-CORE-016,"Implement 'Get Out of Jail on Doubles' Exception",Backend Development,N/A,Medium,4.2,Mid,1,"US-017,TASK-CORE-010,TASK-CORE-040",Yes,"A specific, critical rule exception that modifies the standard doubles logic. High risk of bugs if not handled carefully.",Let the player get an extra turn. This would be a bug and violate the official rules, but would simplify the code.
WI-CORE-017,"Implement 'Build House' Validation Logic",Backend Development,N/A,Medium,6.2,Mid,1,"US-033,TASK-CORE-004",Yes,"Multi-condition validation logic that queries several parts of the game state (player cash, board state, bank supply).",Perform validation only on the client-side UI, but this is risky as it doesn't prevent invalid state changes if the UI has a bug.
WI-CORE-018,"Implement 'Build House' Execution Logic",Backend Development,N/A,Medium,4.2,Mid,1,"US-033,TASK-CORE-021",Yes,"Atomic transaction that modifies three different parts of the GameState (player, bank, board).",Separate the state changes into individual calls. This is not atomic and risks corrupting the game state if one call fails.
WI-CORE-019,"Implement 'Even Building' Validation Logic",Backend Development,N/A,Medium,6,Mid,1,"US-034,TASK-CORE-021",Yes,"Adds significant complexity to the build validation. Requires iterating over a group of related properties. (See RISK-005)",Ignore the rule. This would break game balance and violate the core requirement for authenticity.
WI-CORE-020,"Implement 'Even Selling' Validation Logic",Backend Development,N/A,Low,2.2,Mid,1,"US-034,TASK-CORE-023",Yes,"Similar to even building, but in reverse. A straightforward extension of the same logic.",Do not implement house selling. This would remove a strategic option for players needing to raise cash.
WI-CORE-021,"Implement 'Build Hotel' Validation Logic",Backend Development,N/A,Medium,4.8,Mid,1,"US-035,TASK-CORE-023",Yes,"Extends the 'even building' logic to its final step. Requires checking all properties in a monopoly have 4 houses.",Combine house and hotel validation into a single, more complex function. This might reduce code duplication but increase complexity.
WI-CORE-022,"Implement 'Build Hotel' Execution Logic",Backend Development,N/A,Medium,5.2,Mid,1,"US-035,TASK-CORE-025",Yes,"Complex atomic transaction involving cash, hotel supply, and house supply. High potential for errors if not handled carefully.",Let the player purchase a hotel without returning houses. This would incorrectly deplete the house supply and violate rules.
WI-CORE-023,"Implement Mortgage Validation & Execution Logic",Backend Development,N/A,Medium,4.8,Mid,1,"US-038",Yes,"Standard financial transaction. Validation must prevent mortgaging properties with buildings.",Allow mortgaging of developed properties, but this violates official rules and simplifies the game's financial strategy.
WI-CORE-024,"Modify Rent Collection Logic to check for Mortgage",Backend Development,N/A,Low,2,Mid,1,"US-038,TASK-CORE-034",Yes,"Simple modification to an existing service. Add a single conditional check at the beginning of the rent calculation.",Have the player who landed on the property check for the mortgage status. This decentralizes the rule enforcement.
WI-CORE-025,"Implement Unmortgage Validation & Execution Logic",Backend Development,N/A,Medium,4.2,Mid,1,"US-039,TASK-CORE-031",Yes,"Requires calculation of principal + 10% interest. The validation must check for sufficient cash to cover this total amount.",Use a flat fee for unmortgaging instead of percentage-based interest. This is simpler but not according to the rules.
WI-CORE-026,"Implement Card Deck Service and Actions",Backend Development,N/A,Critical,16.7,Senior,1,"EPIC-CORE-RULES-ADV",Yes,"High-complexity task requiring a flexible architecture like the Command Pattern to handle ~32 unique card actions without becoming unmaintainable.","Use a giant switch statement to handle all card actions. This is brittle, hard to test, and difficult to maintain."
WI-CORE-027,"Implement Net Worth Calculator",Backend Development,N/A,Low,3,Mid,1,"EPIC-CORE-RULES-ADV",Yes,"Utility service that reads from the game state. Logic is straightforward but must be accurate as it's used for the Income Tax rule.",Calculate net worth on-the-fly in the Tax logic. This is less reusable and violates the Single Responsibility Principle.
WI-CORE-028,"Implement Tax Space Logic",Backend Development,N/A,Medium,5.2,Mid,1,"EPIC-CORE-RULES-ADV,TASK-CORE-042,TASK-UI-015",Yes,"Requires integration between the backend Rule Engine, the Net Worth Calculator, and the UI for the player's choice.",Make Income Tax a fixed amount for all players. This removes the strategic choice and deviates from the official rules.
WI-GSTATE-001,"Implement GameState Serialization with Version & Checksum",Backend Development,N/A,Medium,8.3,Senior,1,"US-061,TASK-CORE-004",Yes,"Critical for data persistence and integrity. Requires a senior dev to ensure the implementation is robust against data loss. (See RISK-003)",Use binary serialization. This is often faster but creates brittle, non-human-readable files that are very difficult to debug or migrate.
WI-GSTATE-002,"Implement GameState Deserialization and Validation",Backend Development,N/A,High,9.3,Senior,1,"US-062,TASK-GSTATE-001",Yes,"Complex and high-risk task. Errors in deserialization or validation can lead to crashes or corrupted game states. Requires extensive error handling. (See RISK-003)",Don't validate the checksum. This is faster but extremely risky, as it would allow corrupted save files to be loaded, likely causing a crash.
WI-GSTATE-003,"Implement Save File Data Migration Logic",Backend Development,N/A,Medium,8.3,Senior,1,"US-062,TASK-GSTATE-004",Yes,"Requires careful planning of the data schema evolution. The migration must be atomic to prevent corrupting a user's save file on a failed migration attempt.",Force players to abandon old save files after every update. This would lead to extreme user dissatisfaction.
WI-GSTATE-004,"Implement Game State Restoration",Backend Development,Frontend Development,Medium,7.2,Mid,1,"US-062,TASK-GSTATE-004",Yes,"Requires close collaboration between backend (loading the data) and frontend (applying the data to the scene). The logic must correctly re-initialize all visual components.",Reload the entire Unity scene. This is simpler but can be slow and may not correctly restore dynamically created objects or complex states.
WI-AI-003,"Implement AI Property Acquisition Logic Nodes",Backend Development,Data Engineering,High,14.3,Senior,1,"EPIC-AI-LOGIC,TASK-AI-001,TASK-AI-002",Yes,"Core AI logic. Requires balancing logic that considers the property's value, its potential for a monopoly, and the AI's current cash reserves.",Use a simple logic, like 'always buy if cash > price * 2'. This would be easy to implement but would result in very predictable and weak AI.
WI-AI-004,"Implement AI Building Logic Node",Backend Development,Data Engineering,High,12,Senior,1,"EPIC-AI-LOGIC,TASK-AI-001",Yes,"Complex strategic decision. A 'Hard' AI should consider not just its own monopolies but also the potential to cause a housing shortage to block other players.",Have the AI build houses whenever it has a monopoly and enough cash. This is a simple strategy that doesn't account for strategic cash reserves or blocking opponents.
WI-AI-005,"Implement AI Financial Management Nodes",Backend Development,Data Engineering,High,10.3,Senior,1,"EPIC-AI-LOGIC,TASK-AI-001",Yes,"Key logic for AI survival and strategy. Deciding which property to mortgage is a non-trivial decision based on value vs. potential.",Have the AI mortgage the cheapest property whenever it needs cash. This is a simplistic approach that might cause it to lose valuable properties.
WI-CORE-029,"Implement Trade Service",Backend Development,N/A,Medium,8.3,Mid,1,"EPIC-CORE-RULES-ADV",Yes,"Implements the backend execution of a trade. The key is ensuring the transaction is atomic to prevent asset duplication or loss.",Modify player states directly from the UI controller. This is bad architecture, couples the UI to the core logic, and is not transaction-safe.
WI-CORE-030,"Implement Bankruptcy Detection Logic",Backend Development,N/A,Medium,6.3,Mid,1,"EPIC-CORE-RULES-ADV",Yes,"Crucial game rule logic. The calculation must be precise to correctly trigger the end-game condition for a player.",Check only for negative cash. This is incorrect as it doesn't account for a player's ability to liquidate assets to pay a debt.
WI-CORE-031,"Implement Asset Liquidation & Transfer Logic",Backend Development,N/A,High,12.3,Senior,1,"EPIC-CORE-RULES-ADV,TASK-CORE-037,TASK-CORE-019",Yes,"Very complex logic with two major branches (player vs. bank creditor). High risk of game state corruption if not handled atomically. (See RISK-001)","Simply remove the bankrupt player from the game without transferring assets. This violates official rules and breaks the game economy."
WI-CORE-032,"Implement Win/Loss Condition Logic",Backend Development,N/A,Medium,4.2,Mid,1,"EPIC-CORE-RULES-ADV,TASK-CORE-038",Yes,"The final step in the game loop. Triggers the end-game screens. Logic is simple but has critical importance.",End the game as soon as the human player is bankrupt, without simulating the AI finish. This would prevent final rankings and feel incomplete.
WI-CORE-033,"Implement Building Shortage Auction Logic",Backend Development,N/A,Medium,9.3,Mid,1,"US-037,TASK-CORE-021",No,"Adds a layer of complexity to the building rules, requiring a check for other eligible buyers before proceeding with a standard sale.",Ignore the rule and allow the first player to buy the remaining buildings. This is simpler but violates the official rules for handling shortages.
WI-CORE-034,"Implement Building Auction Flow",Backend Development,Frontend Development,High,12,Senior,1,"US-037,TASK-CORE-028,TASK-CORE-019,TASK-CORE-020",No,"Complex task that integrates the backend auction service with a new UI flow for a non-property item. Requires careful state management.",Handle the auction entirely in the backend with log messages, using no UI. This would be confusing and frustrating for the human player.
WI-AI-006,"Implement AI Bidding Logic for Building Auctions",Backend Development,Data Engineering,Medium,3,Mid,1,"US-037,TASK-AI-001",No,"New AI logic. A 'Hard' AI should bid more aggressively if the building will complete a high-value monopoly.",Have the AI always bid a fixed amount over the current bid, up to a certain percentage of its cash. This is a simple but exploitable strategy.
WI-AI-007,"Implement AI Trade Evaluation Logic Node",Backend Development,Data Engineering,Critical,16.7,Senior,1,"EPIC-AI-LOGIC,TASK-AI-001,TASK-CORE-044",Yes,"The 'brain' of the AI's trading ability. Extremely complex to balance. Requires a sophisticated heuristic for valuing properties in context. (See RISK-002)","Use a simple valuation based only on the sum of list prices. This would make the AI easy to exploit with unfair trades."
WI-AI-008,"Implement AI Trade Proposal Logic Node",Backend Development,Data Engineering,High,14.3,Senior,1,"EPIC-AI-LOGIC,TASK-AI-001",Yes,"Complex logic that requires the AI to be 'aware' of other players' board positions and needs in order to construct a compelling trade.",Have the AI randomly propose trades from its available properties. This would be non-strategic and likely result in nonsensical offers.
WI-AI-009,"Assemble and Tune AI Behavior Trees",Backend Development,Design,Critical,16.7,Lead,1,"EPIC-AI-LOGIC,TASK-AI-004,TASK-AI-005,TASK-AI-006,TASK-AI-007,TASK-AI-008",Yes,"A critical, time-consuming task requiring a Lead developer with both AI and Game Design sensibilities to create distinct, balanced personalities. (See RISK-002)","Use the same Behavior Tree for all difficulties and only change the parameters. This would likely fail to create a meaningful difference in play style between Easy, Medium, and Hard."
WI-TEST-004,"E2E Installer Testing and Signing",Quality Assurance,DevOps,Medium,6.3,Mid,1,"US-001,TASK-INFRA-002,TASK-INFRA-003",Yes,"Final release gate task. Requires a QA engineer and DevOps support for the code signing certificate integration.",Release an unsigned installer. This will trigger severe security warnings on Windows and erode user trust.
WI-INFRA-009,"Implement Global Exception Handler Service",Backend Development,DevOps,Medium,6.3,Senior,1,"US-005,TASK-INFRA-015",Yes,"Crucial for application stability and supportability. Requires a senior developer to correctly handle application-level exceptions. (See RISK-009)",Allow the application to crash to desktop without any error message. This is a very poor user experience.
WI-UI-004,"Create Error Dialog UI Prefab",Frontend Development,Design,Medium,5.2,Mid,1,"US-005",Yes,"Requires a UI developer to create a polished, reusable error dialog that can be instantiated even if the rest of the game's UI is in a crashed state.",Use Unity's default `Debug.LogError` and have no UI. This is not user-friendly and doesn't provide guidance on finding logs.
WI-INFRA-010,"Integrate Exception Handler with Logging and UI",Backend Development,Frontend Development,Medium,6.2,Mid,1,"US-005,TASK-INFRA-007,TASK-INFRA-008,TASK-INFRA-015",Yes,"Integration task requiring coordination between backend and frontend. The correlation ID is a key part of this task.",Show a generic error message with no ID. This makes it impossible to correlate a user's screenshot with a specific log entry.
WI-INFRA-011,"Implement Clean Uninstallation Logic",DevOps,N/A,Medium,5.2,Mid,1,"US-006,TASK-INFRA-002",Yes,"Requires Inno Setup scripting to handle file deletion, shortcut removal, and registry cleaning.",Provide no uninstaller, forcing users to manually delete files. This is unprofessional and can leave orphaned registry keys.
WI-INFRA-012,"Implement Conditional Data Deletion in Uninstaller",DevOps,N/A,Medium,4.2,Mid,1,"US-007,TASK-INFRA-010",No,"Requires Pascal Scripting within Inno Setup to add conditional logic and a message box to the uninstaller.",Always delete user data. This is hostile to users who may want to reinstall the game later and keep their progress.
WI-TEST-005,"E2E Uninstaller Testing",Quality Assurance,DevOps,Low,2.7,Mid,1,"US-006,TASK-INFRA-010,TASK-INFRA-012",Yes,"Manual testing task to verify all uninstallation paths on clean virtual machines.","Assume the Inno Setup script works as intended without testing. This is risky as misconfigurations could lead to incomplete uninstalls."
WI-INFRA-013,"Develop Version Check Service",Backend Development,N/A,Medium,6.2,Mid,1,"US-067",No,"Requires a C# developer to implement an asynchronous web request with proper error handling for network issues.",Hard-code the download URL into a button and never check for updates. The user would have to manually discover that a new version exists.
WI-UI-005,"Create Main Menu Update Notification UI",Frontend Development,Design,Medium,4.2,Mid,1,"US-067,TASK-UI-001",No,"Standard UI task to create a non-intrusive banner or badge element.",Use a blocking modal dialog on startup to announce an update. This is intrusive and a poor user experience.
WI-INFRA-014,"Integrate Update Check into Main Menu Startup",Backend Development,Frontend Development,Medium,4.7,Mid,1,"US-067,TASK-INFRA-013,TASK-INFRA-014",No,"Integration task to connect the backend service with the frontend UI element.",Perform the update check synchronously on the main thread. This would cause the application to freeze on startup until the web request completes or times out.
WI-GSTATE-005,"Implement SQLite Repository and Schema Setup",Backend Development,N/A,High,9.3,Senior,1,"EPIC-GSTATE-DB",Yes,"Foundational data persistence task. Requires a senior developer with database design and C#/SQLite experience.",Store all player statistics in a flat JSON file. This is not scalable, is inefficient to query, and is prone to corruption.
WI-GSTATE-006,"Implement Statistics Update and High Score Logic",Backend Development,N/A,High,12,Senior,1,"EPIC-GSTATE-DB,TASK-GSTATE-009",Yes,"Complex database logic requiring transactional updates to maintain data integrity. The Top 10 logic involves a conditional insert/delete.",Read the entire stats file, update it in memory, and write it back out. This is not transactional and can lead to data loss if it fails mid-write.
WI-GSTATE-007,"Implement Database Backup and Recovery Logic",Backend Development,DevOps,High,10.3,Senior,1,"EPIC-GSTATE-DB,TASK-GSTATE-009",Yes,"Complex, high-risk logic for data resilience. Requires careful file I/O and error handling to prevent making a bad situation worse. (See RISK-012)",Provide no backup mechanism. If the database becomes corrupted, the user loses all their historical progress permanently.
WI-TEST-006,"Write Initial Suite of Core Logic Unit Tests",Quality Assurance,Backend Development,High,10.2,Mid,1,"EPIC-INFRA-SETUP,TASK-INFRA-016,TASK-CORE-005,TASK-CORE-044",Yes,"Represents the ongoing effort of the QA team to build out the unit test suite in parallel with development to meet the 70% coverage requirement.",Delay all unit testing until the end of the project. This is a very poor practice that leads to low-quality code and a difficult, buggy integration phase.