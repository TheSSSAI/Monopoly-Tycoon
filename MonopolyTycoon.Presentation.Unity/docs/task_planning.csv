Title,Description,Type,Status,Priority,Assignee,Reporter,Due Date,Estimate,Labels,Sprint,Epic,Project,Attachments,Comments,Parent ID,Dependencies,Created At,Updated At,Skills Required
"Initialize Unity Project and Git Repository","Create a new Unity project targeting the Windows Standalone platform. Initialize a Git repository in the project folder. Create and commit a standard Unity .gitignore file to exclude library files, temp files, and build artifacts from version control. Establish the main branch and a development branch.","Configuration","Backlog","Critical","devops@project.com","pm@project.com","",2.2,"git,project-setup,core-infra","Sprint 1","Project Infrastructure & Tooling","Monopoly Tycoon",,"","EPIC-INFRA-SETUP",,"2024-01-01 09:00","2024-01-01 09:00","Git,Unity"
"Configure Serilog for Structured Logging","Integrate the Serilog library into the .NET project within Unity. Configure it to meet all logging requirements: structured JSON format, output to `%APPDATA%/MonopolyTycoon/logs`, INFO/DEBUG/ERROR levels, and the rolling file policy (7 days/50MB). Create a `LoggingService` wrapper.","Development","Backlog","Critical","backend@project.com","pm@project.com","",6.3,"logging,serilog,core-infra","Sprint 1","Project Infrastructure & Tooling","Monopoly Tycoon",,"","EPIC-INFRA-SETUP","TASK-INFRA-017","2024-01-01 09:00","2024-01-01 09:00","C#,Serilog,Unity"
"Setup NUnit Test Framework in Unity","Configure the Unity Test Framework to run NUnit tests. Create the necessary Assembly Definitions for test code (`.Tests`) and configure them to have access to the production code assemblies. Write a simple 'Hello World' unit test to verify the setup.","Configuration","Backlog","Critical","devops@project.com","pm@project.com","",3.2,"testing,nunit,core-infra","Sprint 1","Project Infrastructure & Tooling","Monopoly Tycoon",,"","EPIC-INFRA-SETUP","TASK-INFRA-017","2024-01-01 09:00","2024-01-01 09:00","Unity Test Framework,NUnit"
"Implement `PlayerState` Data Model and Enums","Create the `PlayerState.cs` class. Define all properties as specified in REQ-1-031, including primitive types (cash, position), lists (properties_owned), and custom enums for `PlayerStatus` (e.g., Active, InJail, Bankrupt) and `AIDifficulty` (Easy, Medium, Hard).","Development","Backlog","Critical","backend@project.com","pm@project.com","",6,"data-model,domain-logic","Sprint 1","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","EPIC-CORE-DATAMODEL",,"2024-01-01 09:00","2024-01-01 09:00","C#,Data Modeling"
"Define Static Property Data using ScriptableObjects","Create a `PropertyData.cs` class inheriting from `ScriptableObject`. Define fields for all static property attributes: name, price, rent table (base, 1-4 houses, hotel), mortgage value, house cost, color group, etc. Create one ScriptableObject asset for each of the 28 purchasable properties.","Development","Backlog","Critical","backend@project.com","pm@project.com","",9,"data-model,scriptable-object","Sprint 1","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","EPIC-CORE-DATAMODEL",,"2024-01-01 09:00","2024-01-01 09:00","Unity (ScriptableObjects),C#"
"Implement `BoardState` for Dynamic Data","Create the `BoardState.cs` class to track the dynamic state of all properties. This will likely be a dictionary or array mapping a property ID to an object containing its current owner's ID and its development level (number of houses/hotel).","Development","Backlog","Critical","backend@project.com","pm@project.com","",5,"data-model,domain-logic","Sprint 1","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","EPIC-CORE-DATAMODEL","TASK-CORE-002","2024-01-01 09:00","2024-01-01 09:00","C#,Data Modeling"
"Implement Aggregate `GameState` Root Object","Create the `GameState.cs` class which will be the aggregate root for the entire game model. It will contain a list of `PlayerState` objects, the `BoardState` object, the state of the Bank (houses/hotels available), the order of the Chance and Community Chest decks, and current turn metadata (turn number, active player index).","Development","Backlog","Critical","backend@project.com","pm@project.com","",6,"data-model,architecture,save-load","Sprint 1","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","EPIC-CORE-DATAMODEL","TASK-CORE-001,TASK-CORE-003","2024-01-01 09:00","2024-01-01 09:00","C#,Game Architecture"
"Unit Test Data Model Serialization","Write a suite of NUnit tests specifically to validate the JSON serialization and deserialization of the core data models (`PlayerState`, `BoardState`, `GameState`). This ensures the foundation for the save/load system is solid.","Testing","Backlog","Critical","qa@project.com","pm@project.com","",6.2,"testing,unit-test,save-load","Sprint 1","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","EPIC-CORE-DATAMODEL","TASK-CORE-004","2024-01-01 09:00","2024-01-01 09:00","NUnit,C#,System.Text.Json"
"Design and Implement Turn Manager State Machine","Create the `TurnManager.cs` service. Design and implement a robust finite state machine (FSM) to manage the distinct phases of a player's turn as specified in REQ-1-038. This includes states for Pre-Turn (handling jail status), Pre-Roll Management, Roll, Movement, Action, and Post-Roll.","Development","Backlog","Critical","backend@project.com","pm@project.com","",12.7,"architecture,state-machine,game-logic","Sprint 1","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","EPIC-CORE-TURN-MGR","TASK-CORE-001","2024-01-01 09:00","2024-01-01 09:00","C#,Game Architecture,State Machines"
"Unit Test Turn Manager Logic","Write a comprehensive suite of unit tests for the `TurnManager`. Focus on testing the turn cycling logic (2, 3, and 4 players), skipping bankrupt players, and the basic state transitions.","Testing","Backlog","Critical","qa@project.com","pm@project.com","",2.2,"testing,unit-test","Sprint 1","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","EPIC-CORE-TURN-MGR","TASK-CORE-012","2024-01-01 09:00","2024-01-01 09:00","NUnit,C#"
"Implement Secure Dice Rolling Service","Create a `DiceService.cs` class. Implement a `Roll()` method that uses `System.Security.Cryptography.RandomNumberGenerator` to generate two fair, random integers between 1 and 6. The method should return an object containing the value of each die and a boolean indicating if it was a doubles roll.","Development","Backlog","Critical","backend@project.com","pm@project.com","",3.8,"game-logic,service","Sprint 1","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-015",,"2024-01-01 09:00","2024-01-01 09:00","C#,.NET Cryptography"
"Create Dice Roll UI and Animation","Create the visual components for the dice roll. This includes the 'Roll Dice' button in the HUD and the 3D dice animation. The animation can be physics-based or pre-canned, but must smoothly transition to show the final result from the `DiceService`.","Development","Backlog","Critical","frontend@project.com","pm@project.com","",7.2,"ui,animation,vfx","Sprint 1","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-015","TASK-CORE-005","2024-01-01 09:00","2024-01-01 09:00","Unity UI,Unity Animation,3D"
"Implement Player Movement Service","Create a `MovementService.cs` that contains the core logic for player movement. It will take a player's current position and a dice roll total, and calculate the new position, correctly handling board wrap-around (e.g., from space 39 to 0). It should also determine if the player passed GO during the move.","Development","Backlog","Critical","backend@project.com","pm@project.com","",4.2,"game-logic,service","Sprint 1","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-016",,"2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement Token Movement Animation Controller","Create a `TokenAnimator.cs` MonoBehaviour. This script will take a start space, an end space, and the game speed setting. It will execute a coroutine or use a tweening library to animate the token's 3D model from space to space along the board's path. It must fire a completion event when finished.","Development","Backlog","Critical","frontend@project.com","pm@project.com","",8.3,"animation,vfx","Sprint 1","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-016","TASK-CORE-007","2024-01-01 09:00","2024-01-01 09:00","Unity,C# (Coroutines),Vector Math"
"Implement Camera Follow Script","Create a camera controller script that smoothly tracks the active player's token during its movement animation. The camera should pan and possibly zoom to keep the token centered and in view.","Development","Backlog","Critical","frontend@project.com","pm@project.com","",2.7,"camera,vfx","Sprint 1","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-016","TASK-CORE-008","2024-01-01 09:00","2024-01-01 09:00","Unity,C#"
"Implement GO Salary Logic","In the `TurnManager` or a dedicated `FinancialService`, after a player's movement is calculated but before the destination space action is resolved, check if the move passed GO. If it did, and if the move was not a 'Go to Jail' action, credit the player's cash balance with $200.","Development","Backlog","Critical","backend@project.com","pm@project.com","",3.2,"game-logic,rules-engine","Sprint 1","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-019","TASK-CORE-007","2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Create Initial Inno Setup Script","Create the basic `MonopolyTycoon.iss` script. Define application metadata (name, version, publisher), default installation directories, and the basic wizard pages (Welcome, EULA, Finished).","Development","Backlog","Critical","devops@project.com","pm@project.com","",4,"installer,inno-setup","Sprint 1","Project Infrastructure & Tooling","Monopoly Tycoon",,"","US-001",,"2024-01-01 09:00","2024-01-01 09:00","Inno Setup"
"Implement File Packaging and Uninstaller Registration","Update the Inno Setup script to correctly package the game's build output. Define the `[Files]` section to recursively include all necessary files and folders. Ensure the script creates an entry in 'Add or Remove Programs' for clean uninstallation.","Development","Backlog","Critical","devops@project.com","pm@project.com","",5.2,"installer,inno-setup","Sprint 1","Project Infrastructure & Tooling","Monopoly Tycoon",,"","US-001","TASK-INFRA-001","2024-01-01 09:00","2024-01-01 09:00","Inno Setup"
"Implement Disk Space & UAC Handling","Add Pascal Script code to the `.iss` file to check for sufficient disk space on the target drive before installation begins. Configure the installer manifest to require administrator privileges, ensuring a UAC prompt appears for standard users.","Development","Backlog","Critical","devops@project.com","pm@project.com","",4.2,"installer,validation","Sprint 1","Project Infrastructure & Tooling","Monopoly Tycoon",,"","US-001","TASK-INFRA-001","2024-01-01 09:00","2024-01-01 09:00","Inno Setup,Pascal Script"
"Add Directory Selection Page to Installer","Modify the Inno Setup script to include the `SelectDir` wizard page. Configure the page to display a default path, a 'Browse...' button, and text elements to show required vs. available disk space.","Development","Backlog","Critical","devops@project.com","pm@project.com","",4.2,"installer,inno-setup,feature","Sprint 1","Project Infrastructure & Tooling","Monopoly Tycoon",,"","US-002","TASK-INFRA-001","2024-01-01 09:00","2024-01-01 09:00","Inno Setup"
"Add Desktop Shortcut Task to Installer","Modify the Inno Setup script to add an option for creating a desktop shortcut. This involves defining a task in the `[Tasks]` section and a corresponding entry in the `[Icons]` section that is conditional on the task being selected.","Development","Backlog","High","devops@project.com","pm@project.com","",3.7,"installer,inno-setup,feature","Sprint 1","Project Infrastructure & Tooling","Monopoly Tycoon",,"","US-003","TASK-INFRA-001","2024-01-01 09:00","2024-01-01 09:00","Inno Setup"
"Implement Core Behavior Tree Framework","Implement the core components of a Behavior Tree system: an abstract `Node` class, composite nodes (`Sequence`, `Selector`), decorator nodes (`Inverter`), and a leaf `ActionNode`. Create an `AIBehaviorTreeExecutor` that 'ticks' the tree for an AI agent on its turn.","Development","Backlog","Critical","ai-dev@project.com","pm@project.com","",16.7,"ai,architecture","Sprint 2","Artificial Intelligence Opponent","Monopoly Tycoon",,"","EPIC-AI-ARCH",,"2024-01-01 09:00","2024-01-01 09:00","C#,AI Architecture,Design Patterns"
"Implement AI Configuration Service and JSON Schema","Create the `AIConfigurationService` to load `ai_config.json`. Define the JSON schema to hold tunable parameters for each difficulty level (e.g., `propertyPurchaseThreshold`, `tradeAcceptanceModifier`). The service will use System.Text.Json to deserialize this into C# objects.","Development","Backlog","Critical","ai-dev@project.com","pm@project.com","",8.3,"ai,configuration,json","Sprint 2","Artificial Intelligence Opponent","Monopoly Tycoon",,"","EPIC-AI-ARCH",,"2024-01-01 09:00","2024-01-01 09:00","C#,System.Text.Json"
"Unit Test AI Configuration Service","Write unit tests for the `AIConfigurationService` to ensure it correctly parses valid JSON, handles errors for malformed or missing files, and returns the correct parameter set for each difficulty level.","Testing","Backlog","Critical","qa@project.com","pm@project.com","",4.7,"testing,unit-test","Sprint 2","Artificial Intelligence Opponent","Monopoly Tycoon",,"","EPIC-AI-ARCH","TASK-AI-002","2024-01-01 09:00","2024-01-01 09:00","NUnit,C#"
"Implement Doubles Logic in Turn Manager","Modify the `TurnManager` state machine. After the 'Action' phase, check if the last roll was doubles. If yes, and the player is not getting out of jail, transition back to the 'Pre-Roll Management Phase' for the same player and increment their `consecutive_doubles_count`. If no, reset the count and advance to the next player.","Development","Backlog","Critical","backend@project.com","pm@project.com","",6.2,"game-logic,state-machine","Sprint 2","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-017","TASK-CORE-012","2024-01-01 09:00","2024-01-01 09:00","C#,State Machines,Game Logic"
"Implement 'Three Doubles to Jail' Rule","In the `TurnManager`, before granting an extra turn for doubles, check the `consecutive_doubles_count`. If the count is already 2, instead of granting another turn, trigger a 'Go to Jail' event. This event should set the player's status to 'InJail', move their position to the jail space, reset the doubles count, and end their turn immediately.","Development","Backlog","Critical","backend@project.com","pm@project.com","",6,"game-logic,rules-engine","Sprint 2","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-018","TASK-CORE-010","2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement 'Free Parking' Space Action (No-Op)","In the `TurnManager`'s action resolution step, add logic to identify when a player lands on the Free Parking space. For this space, the action is a 'no operation' (no-op). The manager should simply proceed to the post-roll phase (checking for doubles/ending the turn) without any other state changes.","Development","Backlog","Critical","backend@project.com","pm@project.com","",2.2,"game-logic,rules-engine","Sprint 2","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-028","TASK-CORE-012","2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement Property Purchase Logic","In the `RuleEngine`, create a method `ExecutePurchase(playerId, propertyId)`. This method validates if the player can afford the property, and if so, debits their cash and updates the `BoardState` to reflect the new ownership. The transaction must be atomic.","Development","Backlog","Critical","backend@project.com","pm@project.com","",5,"rules-engine,game-logic","Sprint 2","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-030","TASK-CORE-001,TASK-CORE-003","2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement Auction Logic Service","Create an `AuctionService.cs`. This service will manage the state of an active auction: the property being auctioned, the list of active bidders, the current high bid, and the high bidder. It will handle the clockwise turn order for bidding and determine the winner when only one bidder remains.","Development","Backlog","Critical","backend@project.com","pm@project.com","",9.3,"game-logic,rules-engine","Sprint 2","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-032",,"2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement Rent Calculation Service","Create a `RentCalculator.cs` service. This class will contain the complex logic for calculating rent. It must handle all cases: standard properties, monopolies (double rent), properties with houses/hotels, railroads (based on number owned), and utilities (based on dice roll).","Development","Backlog","Critical","backend@project.com","pm@project.com","",8.3,"rules-engine,game-logic","Sprint 2","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-044","TASK-CORE-004","2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement Full Jail Rule Set","Implement the complete set of jail rules in the `RuleEngine` and `TurnManager`. This includes sending a player to jail, and on their turn, presenting the UI with options to pay, use a card, or roll. It must also track the 3-turn limit and force payment on the third failed roll.","Development","Backlog","Critical","backend@project.com","pm@project.com","",12,"rules-engine,game-logic","Sprint 2","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","EPIC-CORE-RULES-ADV","TASK-CORE-011,TASK-UI-015","2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement 'Get Out of Jail on Doubles' Exception","In the `TurnManager`'s doubles-checking logic, add a condition to check the player's status *before* the roll. If the player's status was 'InJail' and they rolled doubles, the extra turn logic must be bypassed, and the turn should advance to the next player.","Development","Backlog","Critical","backend@project.com","pm@project.com","",4.2,"game-logic,rules-engine","Sprint 2","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-017","TASK-CORE-010,TASK-CORE-040","2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement 'Build House' Validation Logic","In the `RuleEngine`, create a validation method `CanBuildHouse(playerId, propertyId)`. This method must check all prerequisites: player owns a full monopoly for that property, the property is not mortgaged, the player has enough cash, and the bank has at least one house available.","Development","Backlog","Critical","backend@project.com","pm@project.com","",6.2,"rules-engine,validation","Sprint 3","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-033","TASK-CORE-004","2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement 'Build House' Execution Logic","In the `RuleEngine`, create a method `ExecuteBuildHouse(playerId, propertyId)`. This method performs the state changes for a validated build action: deducts cash from the player, decrements the bank's house supply, and increments the house count on the property in the `BoardState`.","Development","Backlog","Critical","backend@project.com","pm@project.com","",4.2,"rules-engine,game-logic","Sprint 3","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-033","TASK-CORE-021","2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement 'Even Building' Validation Logic","Enhance the `CanBuildHouse` validation method in the `RuleEngine`. It must now iterate through all properties in the same color group to ensure that the target property does not have more houses than any other property in the group before a new house is added.","Development","Backlog","Critical","backend@project.com","pm@project.com","",6,"rules-engine,game-logic","Sprint 3","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-034","TASK-CORE-021","2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement 'Even Selling' Validation Logic","In the `RuleEngine`, create a `CanSellHouse` validation method. This logic is the reverse of even-building: it must ensure a player can only sell a house from a property if that property has the most houses in the color group.","Development","Backlog","Critical","backend@project.com","pm@project.com","",2.2,"rules-engine,game-logic","Sprint 3","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-034","TASK-CORE-023","2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement 'Build Hotel' Validation Logic","In the `RuleEngine`, create a `CanBuildHotel(playerId, propertyId)` method. It must validate that every property in the target property's monopoly has exactly 4 houses, the player has enough cash for the hotel, and the bank has at least one hotel available.","Development","Backlog","Critical","backend@project.com","pm@project.com","",4.8,"rules-engine,game-logic","Sprint 3","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-035","TASK-CORE-023","2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement 'Build Hotel' Execution Logic","Create `ExecuteBuildHotel(playerId, propertyId)`. This atomic transaction must: 1. Deduct hotel cost from player cash. 2. Decrement bank hotel supply by 1. 3. Increment bank house supply by 4. 4. Set the property's house count to 0 and hotel count to 1.","Development","Backlog","Critical","backend@project.com","pm@project.com","",5.2,"rules-engine,game-logic","Sprint 3","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-035","TASK-CORE-025","2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement Mortgage Validation & Execution Logic","In `RuleEngine`, create `CanMortgageProperty` and `ExecuteMortgage` methods. The validation must check that the property is unmortgaged and has no buildings. The execution must be an atomic transaction that updates the property's `is_mortgaged` status and adds the mortgage value to the player's cash.","Development","Backlog","Critical","backend@project.com","pm@project.com","",4.8,"rules-engine,game-logic","Sprint 3","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-038",,"2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Modify Rent Collection Logic to check for Mortgage","Update the service responsible for rent collection. Before calculating and charging rent, it must first check the `is_mortgaged` status of the property. If true, the rent collection process should be aborted, and a 'no rent due' event can be fired.","Development","Backlog","Critical","backend@project.com","pm@project.com","",2,"rules-engine,game-logic","Sprint 3","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-038","TASK-CORE-034","2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement Unmortgage Validation & Execution Logic","In `RuleEngine`, create `CanUnmortgageProperty` and `ExecuteUnmortgage` methods. Validation must check if the property is currently mortgaged and if the player has sufficient cash to pay the mortgage value plus 10% interest. Execution must deduct the full amount and reset the property's `is_mortgaged` status.","Development","Backlog","Critical","backend@project.com","pm@project.com","",4.2,"rules-engine,game-logic","Sprint 3","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-039","TASK-CORE-031","2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement Card Deck Service and Actions","Create the `DeckService` to manage the two card decks. Use a Command Pattern to implement all 16 actions for both Chance and Community Chest cards. This includes financial transactions, movement, property repairs, and card awards.","Development","Backlog","Critical","backend@project.com","pm@project.com","",16.7,"rules-engine,game-logic","Sprint 3","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","EPIC-CORE-RULES-ADV",,"2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic,Design Patterns"
"Implement Net Worth Calculator","Create a `NetWorthCalculator.cs` service. It will have a single method that takes a player's ID and the current `GameState` and returns their total net worth, calculated as cash + sum of printed property values + sum of building costs.","Development","Backlog","Critical","backend@project.com","pm@project.com","",3,"utility,game-logic","Sprint 3","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","EPIC-CORE-RULES-ADV",,"2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement Tax Space Logic","Implement the logic for both tax spaces. For Luxury Tax, automatically deduct the fixed amount. For Income Tax, trigger the UI dialog for the human player, using the `NetWorthCalculator` to display the 10% option. AI players will have a simple logic (e.g., always choose the cheaper option).","Development","Backlog","Critical","backend@project.com","pm@project.com","",5.2,"rules-engine,integration","Sprint 3","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","EPIC-CORE-RULES-ADV","TASK-CORE-042,TASK-UI-015","2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement GameState Serialization with Version & Checksum","In a `SaveGameRepository`, implement the `SaveAsync` method. This method will take the `GameState` object, serialize it to a JSON string using System.Text.Json, calculate a checksum (e.g., SHA256) of the JSON data, and write a final file containing the version, checksum, and data.","Development","Backlog","Critical","backend@project.com","pm@project.com","",8.3,"save-load,serialization,persistence","Sprint 3","Game State & Data Persistence","Monopoly Tycoon",,"","US-061","TASK-CORE-004","2024-01-01 09:00","2024-01-01 09:00","C#,System.Text.Json,File I/O"
"Implement GameState Deserialization and Validation","In `SaveGameRepository`, implement `LoadAsync`. This method reads a specified save file, validates the checksum, checks the version, and deserializes the JSON back into a `GameState` object. It must throw specific exceptions for corruption or incompatibility.","Development","Backlog","Critical","backend@project.com","pm@project.com","",9.3,"save-load,deserialization,persistence","Sprint 3","Game State & Data Persistence","Monopoly Tycoon",,"","US-062","TASK-GSTATE-001","2024-01-01 09:00","2024-01-01 09:00","C#,System.Text.Json,File I/O"
"Implement Save File Data Migration Logic","Create a `DataMigrationService` that can upgrade older (but still compatible) save file JSON data to the current version's schema. This might involve adding new fields with default values or renaming existing ones. The process must be atomic.","Development","Backlog","Critical","backend@project.com","pm@project.com","",8.3,"save-load,data-migration","Sprint 3","Game State & Data Persistence","Monopoly Tycoon",,"","US-062","TASK-GSTATE-004","2024-01-01 09:00","2024-01-01 09:00","C#,JSON Manipulation"
"Implement Game State Restoration","Create the logic that takes a deserialized `GameState` object and restores the live game. This involves loading the main game scene and then iterating through the game state data to configure every game object (player tokens, property indicators, HUDs) to match the saved state.","Development","Backlog","Critical","backend@project.com","pm@project.com","",7.2,"save-load,integration","Sprint 3","Game State & Data Persistence","Monopoly Tycoon",,"","US-062","TASK-GSTATE-004","2024-01-01 09:00","2024-01-01 09:00","C#,Unity"
"Implement AI Property Acquisition Logic Nodes","Create BT action nodes for: 1. `DecideBuyOrAuctionProperty`: Decides whether to buy a landed-on property outright. 2. `DetermineAuctionBid`: Calculates a bid amount during a property auction. Both nodes must use parameters from the AI config to vary behavior by difficulty.","Development","Backlog","Critical","ai-dev@project.com","pm@project.com","",14.3,"ai,behavior-tree","Sprint 3","Artificial Intelligence Opponent","Monopoly Tycoon",,"","EPIC-AI-LOGIC","TASK-AI-001,TASK-AI-002","2024-01-01 09:00","2024-01-01 09:00","C#,Game AI"
"Implement AI Building Logic Node","Create a `DecideBuildingAction` BT node. This node will determine if the AI should build houses or hotels on any of its monopolies during its pre-roll management phase. The decision will be based on cash reserves, the strategic value of the monopoly, and the potential to cause a housing shortage.","Development","Backlog","Critical","ai-dev@project.com","pm@project.com","",12,"ai,behavior-tree","Sprint 3","Artificial Intelligence Opponent","Monopoly Tycoon",,"","EPIC-AI-LOGIC","TASK-AI-001","2024-01-01 09:00","2024-01-01 09:00","C#,Game AI"
"Implement AI Financial Management Nodes","Create BT nodes for financial decisions: 1. `DecideMortgageProperty`: Determines which property to mortgage when cash is needed. 2. `DecideUnmortgageProperty`: Decides if surplus cash should be used to unmortgage a property.","Development","Backlog","Critical","ai-dev@project.com","pm@project.com","",10.3,"ai,behavior-tree","Sprint 3","Artificial Intelligence Opponent","Monopoly Tycoon",,"","EPIC-AI-LOGIC","TASK-AI-001","2024-01-01 09:00","2024-01-01 09:00","C#,Game AI"
"Implement Trade Service","Create a `TradeService.cs` to handle the backend validation and execution of trades. The service will take a trade proposal object (defining what each player gives/gets) and perform an atomic transaction to swap the assets if the trade is valid.","Development","Backlog","Critical","backend@project.com","pm@project.com","",8.3,"game-logic,service","Sprint 4","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","EPIC-CORE-RULES-ADV",,"2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement Bankruptcy Detection Logic","Create a `BankruptcyService.cs`. Implement the logic to determine if a player is bankrupt. This involves calculating their total liquidatable assets (cash + sale value of buildings + mortgage value of properties) and comparing it to their current debt.","Development","Backlog","Critical","backend@project.com","pm@project.com","",6.3,"rules-engine,game-logic","Sprint 4","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","EPIC-CORE-RULES-ADV",,"2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement Asset Liquidation & Transfer Logic","Implement the process for handling a bankrupt player's assets. This must handle two cases: 1) Bankruptcy to another player: Transfer all assets (cash, properties, cards) to the creditor. 2) Bankruptcy to the Bank: Return all properties to the bank to be auctioned off.","Development","Backlog","Critical","backend@project.com","pm@project.com","",12.3,"rules-engine,game-logic","Sprint 4","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","EPIC-CORE-RULES-ADV","TASK-CORE-037,TASK-CORE-019","2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement Win/Loss Condition Logic","After any bankruptcy event, the `TurnManager` must check the number of non-bankrupt players. If the count is 1, trigger the game end. If the human player was the one who went bankrupt, trigger the 'Loss' event. If the last AI went bankrupt, trigger the 'Win' event.","Development","Backlog","Critical","backend@project.com","pm@project.com","",4.2,"game-logic,state-machine","Sprint 4","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","EPIC-CORE-RULES-ADV","TASK-CORE-038","2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement Building Shortage Auction Logic","Modify the `RuleEngine`'s building logic. When a build is requested and the bank supply is low, the engine must first identify all other players who are also eligible to build. If there are multiple interested parties, it must trigger a building auction instead of a direct sale.","Development","Backlog","Medium","backend@project.com","pm@project.com","",9.3,"rules-engine,game-logic,auction","Sprint 4","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-037","TASK-CORE-021","2024-01-01 09:00","2024-01-01 09:00","C#,Game Logic"
"Implement Building Auction Flow","Integrate the building auction logic with the existing `AuctionService` and `AuctionController` UI. The auction flow will be for a 'Building' instead of a 'Property'. The system must loop through auctions until all available buildings are sold.","Development","Backlog","Medium","backend@project.com","pm@project.com","",12,"integration,auction","Sprint 4","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-037","TASK-CORE-028,TASK-CORE-019,TASK-CORE-020","2024-01-01 09:00","2024-01-01 09:00","C#,Unity UI,Game Logic"
"Implement AI Bidding Logic for Building Auctions","Create a new Behavior Tree node or logic for the AI to decide how much to bid in a building auction. The decision should be based on its cash on hand, the strategic value of completing development on a monopoly, and its difficulty setting.","Development","Backlog","Medium","ai-dev@project.com","pm@project.com","",3,"ai,auction","Sprint 4","Core Gameplay Engine & Rules","Monopoly Tycoon",,"","US-037","TASK-AI-001","2024-01-01 09:00","2024-01-01 09:00","C#,Game AI"
"Implement AI Trade Evaluation Logic Node","Create an `EvaluateTradeOffer` BT node. This is a critical piece of logic that takes an incoming trade proposal and returns an accept/decline decision. The evaluation must be heavily influenced by the AI's difficulty setting and strategic goals (e.g., completing its own monopolies vs. blocking others).","Development","Backlog","Critical","ai-dev@project.com","pm@project.com","",16.7,"ai,behavior-tree","Sprint 4","Artificial Intelligence Opponent","Monopoly Tycoon",,"","EPIC-AI-LOGIC","TASK-AI-001,TASK-CORE-044","2024-01-01 09:00","2024-01-01 09:00","C#,Game AI"
"Implement AI Trade Proposal Logic Node","Create a `ProposeTrade` BT node. This action will scan the game state to identify potential trades that would benefit the AI (e.g., acquiring the last property for a monopoly) and construct a trade proposal to send to another player (human or AI).","Development","Backlog","Critical","ai-dev@project.com","pm@project.com","",14.3,"ai,behavior-tree","Sprint 4","Artificial Intelligence Opponent","Monopoly Tycoon",,"","EPIC-AI-LOGIC","TASK-AI-001","2024-01-01 09:00","2024-01-01 09:00","C#,Game AI"
"Assemble and Tune AI Behavior Trees","Construct the full Behavior Trees for each difficulty level by arranging the implemented action nodes with composite and decorator nodes. Populate the `ai_config.json` with initial parameter values for 'Easy', 'Medium', and 'Hard' profiles.","Development","Backlog","Critical","ai-dev@project.com","pm@project.com","",16.7,"ai,behavior-tree,tuning","Sprint 4","Artificial Intelligence Opponent","Monopoly Tycoon",,"","EPIC-AI-LOGIC","TASK-AI-004,TASK-AI-005,TASK-AI-006,TASK-AI-007,TASK-AI-008","2024-01-01 09:00","2024-01-01 09:00","Game AI,Game Design"
"E2E Installer Testing and Signing","Perform comprehensive end-to-end manual testing of the installer on clean Windows 10 and Windows 11 virtual machines. Integrate the code signing certificate into the build process to digitally sign the final installer executable.","Testing","Backlog","Critical","qa@project.com","pm@project.com","",6.3,"installer,e2e-testing,security","Sprint 5","Project Infrastructure & Tooling","Monopoly Tycoon",,"","US-001","TASK-INFRA-002,TASK-INFRA-003","2024-01-01 09:00","2024-01-01 09:00","QA,CI/CD,Inno Setup"
"Implement Global Exception Handler Service","Create a `GlobalExceptionHandler.cs` service. Implement logic to subscribe to `AppDomain.CurrentDomain.UnhandledException` and Unity's `Application.logMessageReceived` for exceptions. This service will be responsible for orchestrating the logging and UI display.","Development","Backlog","Critical","backend@project.com","pm@project.com","",6.3,"error-handling,core-infra","Sprint 5","Project Infrastructure & Tooling","Monopoly Tycoon",,"","US-005","TASK-INFRA-015","2024-01-01 09:00","2024-01-01 09:00","C#,Unity Engine,Error Handling"
"Create Error Dialog UI Prefab","Design and implement a Unity UI prefab for the modal error dialog. It must include text elements for the message, a selectable text field for the Error ID, a selectable text field for the log path, and a 'Close' button.","Development","Backlog","Critical","frontend@project.com","pm@project.com","",5.2,"ui,error-handling","Sprint 5","Project Infrastructure & Tooling","Monopoly Tycoon",,"","US-005",,"2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Integrate Exception Handler with Logging and UI","Wire the `GlobalExceptionHandler` to the logging service and the new error dialog. Ensure the unique Error ID is passed to both systems for correlation. The full, resolved log path should be passed to the UI. Ensure the log is flushed to disk before the application quits.","Development","Backlog","Critical","backend@project.com","pm@project.com","",6.2,"error-handling,integration","Sprint 5","Project Infrastructure & Tooling","Monopoly Tycoon",,"","US-005","TASK-INFRA-007,TASK-INFRA-008,TASK-INFRA-015","2024-01-01 09:00","2024-01-01 09:00","C#,Unity"
"Implement Clean Uninstallation Logic","Enhance the Inno Setup script to ensure a clean uninstall. This includes removing the installation directory, all shortcuts, and any registry keys created by the installer. Add a check to detect if the game executable is running and block uninstallation if it is.","Development","Backlog","Critical","devops@project.com","pm@project.com","",5.2,"uninstaller,inno-setup","Sprint 5","Project Infrastructure & Tooling","Monopoly Tycoon",,"","US-006","TASK-INFRA-002","2024-01-01 09:00","2024-01-01 09:00","Inno Setup,Pascal Script"
"Implement Conditional Data Deletion in Uninstaller","Using Pascal Script within the Inno Setup `.iss` file, implement the logic for the uninstaller. The script must check for the existence of the `%APPDATA%/MonopolyTycoon` directory. If it exists, display a message box with 'Yes'/'No' options. Based on the user's choice, conditionally delete the directory.","Development","Backlog","High","devops@project.com","pm@project.com","",4.2,"uninstaller,inno-setup,data-management","Sprint 5","Project Infrastructure & Tooling","Monopoly Tycoon",,"","US-007","TASK-INFRA-010","2024-01-01 09:00","2024-01-01 09:00","Inno Setup,Pascal Script"
"E2E Uninstaller Testing","Perform end-to-end manual testing of the uninstallation process on clean Windows 10 and Windows 11 virtual machines. This must cover all scenarios from US-006 and US-007.","Testing","Backlog","Critical","qa@project.com","pm@project.com","",2.7,"uninstaller,e2e-testing","Sprint 5","Project Infrastructure & Tooling","Monopoly Tycoon",,"","US-006","TASK-INFRA-010,TASK-INFRA-012","2024-01-01 09:00","2024-01-01 09:00","QA"
"Develop Version Check Service","Create an `UpdateCheckService.cs`. This service will be responsible for making an asynchronous HTTPS GET request to a predefined URL. It will parse the JSON response, compare the remote version with the application's current version, and handle all network errors and timeouts gracefully.","Development","Backlog","Medium","backend@project.com","pm@project.com","",6.2,"networking,feature","Sprint 5","Project Infrastructure & Tooling","Monopoly Tycoon",,"","US-067",,"2024-01-01 09:00","2024-01-01 09:00","C#,async/await,HTTP,JSON"
"Create Main Menu Update Notification UI","Create a Unity UI prefab for the non-intrusive update notification. This should be a small banner or button with a badge that appears in a corner of the main menu. It will contain text and a clickable element.","Development","Backlog","Medium","frontend@project.com","pm@project.com","",4.2,"ui,feature","Sprint 5","Project Infrastructure & Tooling","Monopoly Tycoon",,"","US-067","TASK-UI-001","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Integrate Update Check into Main Menu Startup","In the `MainMenuController`, call the `UpdateCheckService` on startup. Based on the returned result, control the visibility of the update notification UI element.","Development","Backlog","Medium","backend@project.com","pm@project.com","",4.7,"integration,feature","Sprint 5","Project Infrastructure & Tooling","Monopoly Tycoon",,"","US-067","TASK-INFRA-013,TASK-INFRA-014","2024-01-01 09:00","2024-01-01 09:00","C#,Unity"
"Implement SQLite Repository and Schema Setup","Create a `StatisticsRepository.cs`. Implement logic to check for the existence of the database file on startup and create it with the correct schema if it's missing. The schema will include tables for profiles, aggregate statistics, and top scores. Use a library like `Microsoft.Data.Sqlite`.","Development","Backlog","High","backend@project.com","pm@project.com","",9.3,"database,sqlite,persistence","Sprint 5","Game State & Data Persistence","Monopoly Tycoon",,"","EPIC-GSTATE-DB",,"2024-01-01 09:00","2024-01-01 09:00","C#,SQLite,SQL"
"Implement Statistics Update and High Score Logic","In `StatisticsRepository`, implement the method `UpdateStatsFromGameResult`. This method will take a summary of a completed game and perform transactional updates to the database: increment games played, update wins/losses, and update other aggregate stats. It must also check if a win qualifies for the Top 10 list and insert/update it accordingly.","Development","Backlog","High","backend@project.com","pm@project.com","",12,"database,sqlite,game-logic","Sprint 5","Game State & Data Persistence","Monopoly Tycoon",,"","EPIC-GSTATE-DB","TASK-GSTATE-009","2024-01-01 09:00","2024-01-01 09:00","C#,SQLite,SQL"
"Implement Database Backup and Recovery Logic","In `StatisticsRepository`'s initialization logic, implement the backup and recovery mechanism. On startup, check if the DB file has been modified since last backup. If so, create a new backup, and prune old backups to keep only the 3 most recent. Add a try-catch block around the initial DB connection attempt; on failure, attempt to restore from the newest backup.","Development","Backlog","High","backend@project.com","pm@project.com","",10.3,"database,persistence,resilience","Sprint 5","Game State & Data Persistence","Monopoly Tycoon",,"","EPIC-GSTATE-DB","TASK-GSTATE-009","2024-01-01 09:00","2024-01-01 09:00","C#,File I/O,Error Handling"
"Write Initial Suite of Core Logic Unit Tests","Write NUnit tests for foundational, non-MonoBehaviour classes as they are developed. This includes initial tests for `DiceService` randomness, `NetWorthCalculator`, and basic `PlayerState` mutations. This task represents the initial effort to build the test suite and achieve early coverage.","Testing","Backlog","Critical","qa@project.com","pm@project.com","",10.2,"testing,unit-test","Sprint 5","Project Infrastructure & Tooling","Monopoly Tycoon",,"","EPIC-INFRA-SETUP","TASK-INFRA-016,TASK-CORE-005,TASK-CORE-044","2024-01-01 09:00","2024-01-01 09:00","NUnit,C#,TDD"