Title,Description,Type,Status,Priority,Assignee,Reporter,Due Date,Estimate,Labels,Sprint,Epic,Project,Attachments,Comments,Parent ID,Dependencies,Created At,Updated At,Skills Required
"Setup Git Repository, Solution, and Project Structure","Create the Git repository. Set up the Visual Studio 2022 solution with the Unity project and a separate .NET 8 class library for core logic. Configure a standard Unity .gitignore.","Configuration","Backlog","Critical","devops-1@project.com","pm@project.com","",8.33,"setup,architecture","Sprint 0: Foundation","Project Foundation & Tooling","Monopoly Tycoon","","This is the foundational task for the entire project.","N/A","","","2024-01-01 09:00","2024-01-01 09:00","Git,Unity,Visual Studio,.NET 8"
"Backend: Implement Serilog Wrapper Service","Create a `LoggingService` class that encapsulates Serilog configuration. This service will be responsible for initializing the logger with a rolling file sink, structured JSON output, and the specified retention policy.","SourceCode","Backlog","Critical","backend-dev-1@project.com","pm@project.com","",6.17,"logging,serilog,service","Sprint 0: Foundation","Project Foundation & Tooling","Monopoly Tycoon","","","N/A","TASK-1001-01","2024-01-01 09:00","2024-01-01 09:00","C#,Serilog"
"Integration: Initialize and Use Logging Service in Unity","In the Unity project, create a startup script (e.g., `GameInitializer`) that calls the `LoggingService.Initialize()` method when the application starts. Inject the logging service or a logger interface into other services to be used for logging game events.","SourceCode","Backlog","Critical","unity-dev-1@project.com","pm@project.com","",5.17,"logging,integration,startup","Sprint 0: Foundation","Project Foundation & Tooling","Monopoly Tycoon","","","N/A","TASK-1003-01","2024-01-01 09:00","2024-01-01 09:00","Unity,C#"
"Create Basic Inno Setup Script for Game Installation","Develop the initial Inno Setup script (.iss) to package a placeholder game executable. The script will define the application metadata, default installation directory, and basic file copying.","Configuration","Backlog","Critical","devops-1@project.com","pm@project.com","",6.17,"installer,inno-setup","Sprint 0: Foundation","Project Foundation & Tooling","Monopoly Tycoon","installer.iss","Requires a placeholder build from the CI pipeline.","US-001","TASK-1001-01","2024-01-01 09:00","2024-01-01 09:00","Inno Setup"
"Implement Global Exception Handler","Implement a global exception handler that catches unhandled exceptions. It will generate a unique correlation ID, log the full exception details using the LoggingService at ERROR level including the ID, and then trigger an event to display a UI dialog.","SourceCode","Backlog","High","backend-dev-1@project.com","pm@project.com","",4.33,"error-handling,stability","Sprint 0: Foundation","Quality & Supportability","Monopoly Tycoon","GlobalExceptionHandler.cs","","N/A","TASK-1003-02","2024-01-01 09:00","2024-01-01 09:00","C#,.NET 8,Unity"
"Implement PlayerState and Supporting Enums","Create the `PlayerState.cs` class in the core logic library. Define all fields as per REQ-1-031. Create the required enums `PlayerStatus` and `AIDifficulty`.","SourceCode","Backlog","Critical","backend-dev-1@project.com","pm@project.com","",4.17,"data-model,architecture","Sprint 1: Core Data & Game Loop Foundation","Core Gameplay Engine & Rules","Monopoly Tycoon","PlayerState.cs,PlayerStatus.cs,AIDifficulty.cs","","N/A","TASK-1001-01","2024-01-01 09:00","2024-01-01 09:00","C#,.NET 8"
"Unit Test PlayerState Serialization","Write NUnit tests to verify that a `PlayerState` object can be serialized to a JSON string and deserialized back into an identical object without data loss using System.Text.Json.","Testing","Backlog","Critical","backend-dev-1@project.com","pm@project.com","",3.0,"unit-test,serialization","Sprint 1: Core Data & Game Loop Foundation","Core Gameplay Engine & Rules","Monopoly Tycoon","PlayerStateTests.cs","","N/A","TASK-2001-01","2024-01-01 09:00","2024-01-01 09:00","C#,NUnit,System.Text.Json"
"Implement GameState Data Model","Create the `GameState.cs` class in the core logic library as the root object for a game session, per REQ-1-041. It will contain a list of `PlayerState` objects and other state-related fields.","SourceCode","Backlog","Critical","backend-dev-1@project.com","pm@project.com","",6.17,"data-model,architecture,save-load","Sprint 1: Core Data & Game Loop Foundation","Core Gameplay Engine & Rules","Monopoly Tycoon","GameState.cs","","N/A","TASK-2001-01","2024-01-01 09:00","2024-01-01 09:00","C#,.NET 8"
"Unit Test GameState Serialization","Write NUnit tests to verify that a complex `GameState` object (with multiple players, properties, etc.) can be successfully serialized and deserialized without data loss.","Testing","Backlog","Critical","backend-dev-2@project.com","pm@project.com","",5.17,"unit-test,serialization,save-load","Sprint 1: Core Data & Game Loop Foundation","Core Gameplay Engine & Rules","Monopoly Tycoon","GameStateTests.cs","","N/A","TASK-2002-01","2024-01-01 09:00","2024-01-01 09:00","C#,NUnit,System.Text.Json"
"Define Schemas and Create Data Files for Board and Cards","Define the JSON structure for game data, including properties (name, price, rents, group, etc.) and cards (text, type, action parameters). Create the initial `BoardData.json` and `CardData.json` files with the standard US Monopoly board data.","Configuration","Backlog","Critical","backend-dev-2@project.com","pm@project.com","",9.33,"data,json,configuration","Sprint 1: Core Data & Game Loop Foundation","Core Gameplay Engine & Rules","Monopoly Tycoon","BoardData.json,CardData.json,DataSchema.md","","N/A","","2024-01-01 09:00","2024-01-01 09:00","JSON"
"Implement Data Loading Service for Game Configuration","Create a `DataLoaderService` that reads `BoardData.json` and `CardData.json` from Unity's Resources or StreamingAssets folder at application startup. The service will parse the JSON and populate in-memory data structures that the rest of the game can access.","SourceCode","Backlog","Critical","backend-dev-2@project.com","pm@project.com","",8.33,"data,service,startup","Sprint 1: Core Data & Game Loop Foundation","Core Gameplay Engine & Rules","Monopoly Tycoon","DataLoaderService.cs,PropertyData.cs,CardData.cs","","N/A","TASK-2003-01","2024-01-01 09:00","2024-01-01 09:00","C#,Unity,JSON"
"Design and Implement Turn Phase State Machine","Design a state machine for the player turn cycle based on REQ-1-038 (Pre-Turn, Pre-Roll, Roll, Movement, Action, Post-Roll). Implement the `TurnManagerService` to manage transitions between these states for the active player.","SourceCode","Backlog","Critical","backend-dev-1@project.com","pm@project.com","",12.0,"game-loop,architecture,state-machine","Sprint 1: Core Data & Game Loop Foundation","Core Gameplay Engine & Rules","Monopoly Tycoon","TurnManagerService.cs,TurnPhase.cs","","N/A","TASK-2002-01","2024-01-01 09:00","2024-01-01 09:00","C#,Software Architecture,State Machines"
"Integrate Player Turn Cycling","Extend the `TurnManagerService` to handle cycling turns between active players (REQ-1-037). The service must maintain a turn order and correctly select the next player, skipping any who are bankrupt.","SourceCode","Backlog","Critical","backend-dev-1@project.com","pm@project.com","",6.33,"game-loop,turn-management","Sprint 1: Core Data & Game Loop Foundation","Core Gameplay Engine & Rules","Monopoly Tycoon","Updated TurnManagerService.cs","","N/A","TASK-2101-01","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Dice Service and Doubles Rule Logic","Create a `DiceService` to generate rolls using a secure RNG. Integrate this service into the `TurnManager`. Implement the logic to track consecutive doubles within a turn sequence. This includes granting an extra turn (1st and 2nd double) and triggering a 'go to jail' event (3rd double).","SourceCode","Backlog","Critical","backend-dev-2@project.com","pm@project.com","",8.33,"dice,game-rules","Sprint 1: Core Data & Game Loop Foundation","Core Gameplay Engine & Rules","Monopoly Tycoon","DiceService.cs,Updated TurnManagerService.cs","","N/A","TASK-2101-01","2024-01-01 09:00","2024-01-01 09:00","C#,.NET 8"
"Implement Main Menu Scene and UI","Create the `MainMenu.unity` scene. Implement the UI layout with buttons for 'New Game', 'Load Game', 'Settings', 'Quit'. Style the UI to match the game's primary theme.","SourceCode","Backlog","Critical","unity-dev-1@project.com","pm@project.com","",8.33,"ui,main-menu","Sprint 2: First Playable","User Interface & Experience (UI/UX)","Monopoly Tycoon","MainMenu.unity","","N/A","","2024-01-01 09:00","2024-01-01 09:00","Unity UI"
"Implement Scene Navigation Service","Create a `SceneNavigationService` to handle transitions between different scenes (e.g., MainMenu -> GameSetup). This service should include logic for fade-in/fade-out transitions to ensure a smooth user experience.","SourceCode","Backlog","Critical","unity-dev-1@project.com","pm@project.com","",6.33,"ui,architecture,service","Sprint 2: First Playable","User Interface & Experience (UI/UX)","Monopoly Tycoon","SceneNavigationService.cs","","N/A","","2024-01-01 09:00","2024-01-01 09:00","Unity,C#"
"Wire Main Menu Buttons to Navigation Service","In the `MainMenuController`, hook up the `onClick` events for the 'New Game', 'Load Game', and 'Settings' buttons to call the `SceneNavigationService`. The 'Quit' button should call `Application.Quit()`.","SourceCode","Backlog","Critical","unity-dev-1@project.com","pm@project.com","",3.0,"ui,main-menu,integration","Sprint 2: First Playable","User Interface & Experience (UI/UX)","Monopoly Tycoon","MainMenuController.cs","","N/A","TASK-5001-01,TASK-5001-02","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Implement Game Setup UI Layout","Create the `GameSetup.unity` scene and build the static UI layout. This includes placeholders for the player name input, token selection grid, AI opponent count selector, and the dynamic area for individual AI configurations.","SourceCode","Backlog","Critical","unity-dev-2@project.com","pm@project.com","",12.0,"ui,game-setup","Sprint 2: First Playable","User Interface & Experience (UI/UX)","Monopoly Tycoon","GameSetup.unity","","N/A","TASK-5001-03","2024-01-01 09:00","2024-01-01 09:00","Unity UI"
"Implement Game Setup Controller Logic","Write the `GameSetupController.cs` script. Implement logic to handle player input: validate the profile name, store the selected token, manage the number of AI opponents, and dynamically show/hide the UI panels for each AI. Store the selections in a configuration object.","SourceCode","Backlog","Critical","unity-dev-2@project.com","pm@project.com","",14.33,"ui,game-setup,controller","Sprint 2: First Playable","User Interface & Experience (UI/UX)","Monopoly Tycoon","GameSetupController.cs","","N/A","TASK-5002-01","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Implement Player Movement and GO Salary Logic","Develop the logic within the `Movement` phase of the turn manager. This task involves calculating the player's new board position based on the dice roll. It must correctly handle wrapping around the board (passing space 39) and trigger the awarding of a $200 GO salary (REQ-1-049).","SourceCode","Backlog","Critical","backend-dev-1@project.com","pm@project.com","",6.17,"movement,game-rules","Sprint 2: First Playable","Core Gameplay Engine & Rules","Monopoly Tycoon","MovementService.cs","","N/A","TASK-2101-01","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Logic for No-Op Spaces (Free Parking, Just Visiting)","Implement the 'Action' phase logic for spaces that have no effect, such as Free Parking (REQ-1-046) and Just Visiting. The `TurnManager` should correctly identify these spaces and simply transition to the Post-Roll phase.","SourceCode","Backlog","Critical","backend-dev-1@project.com","pm@project.com","",2.0,"game-rules","Sprint 2: First Playable","Core Gameplay Engine & Rules","Monopoly Tycoon","Updated TurnManagerService.cs","","N/A","TASK-2101-01","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Property Purchase Logic","In the `Action` phase of the turn, implement the logic for when a player lands on an unowned property. For a human player, this involves setting a game state that waits for a UI decision ('Buy' or 'Auction'). For an AI, this involves querying the AI's behavior tree for a decision.","SourceCode","Backlog","Critical","backend-dev-2@project.com","pm@project.com","",8.17,"game-rules,economy","Sprint 3: The Economic Core","Core Gameplay Engine & Rules","Monopoly Tycoon","PropertyService.cs","","N/A","TASK-2101-01","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Property Auction Logic","Develop the `AuctionService` to manage the property auction process (REQ-1-052). This includes establishing the bidding order (clockwise from the declining player), managing bids from players, handling player withdrawals, and identifying the winner.","SourceCode","Backlog","Critical","backend-dev-2@project.com","pm@project.com","",14.33,"game-rules,economy,state-machine","Sprint 3: The Economic Core","Core Gameplay Engine & Rules","Monopoly Tycoon","AuctionService.cs","","N/A","TASK-2103-01","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Tax Space Actions (Income & Luxury)","Implement the 'Action' phase logic for landing on tax spaces. For Luxury Tax, deduct the fixed amount. For Income Tax (REQ-1-048), implement the net worth calculation (cash + property values + building costs) and logic to present the choice to the human player or have AI decide.","SourceCode","Backlog","Critical","backend-dev-1@project.com","pm@project.com","",9.33,"game-rules,economy","Sprint 3: The Economic Core","Core Gameplay Engine & Rules","Monopoly Tycoon","TaxService.cs,NetWorthCalculator.cs","","N/A","TASK-2101-01","2024-01-01 09:00","2024-01-01 09:00","C#"
"Develop Unit Test Suite for Turn Management","Create a comprehensive NUnit test suite for the `TurnManagerService`. This suite must cover turn cycling, phase transitions, and the integration of the doubles rule.","Testing","Backlog","High","qa-1@project.com","pm@project.com","",12.0,"unit-test,game-loop","Sprint 3: The Economic Core","Core Gameplay Engine & Rules","Monopoly Tycoon","TurnManagerServiceTests.cs","","N/A","TASK-2101-01,TASK-2101-02,TASK-2102-01","2024-01-01 09:00","2024-01-01 09:00","C#,NUnit"
"Implement Card Deck Service (Chance & Community Chest)","Create a `CardService` to manage the Chance and Community Chest decks. This service will be responsible for shuffling the decks at the start of the game, drawing the top card, and returning used cards to the bottom of the deck. It will not execute the card actions, but will return the card data to the `TurnManager` to process.","SourceCode","Backlog","Critical","backend-dev-1@project.com","pm@project.com","",7.17,"game-rules,cards","Sprint 4: Jail & Chance","Core Gameplay Engine & Rules","Monopoly Tycoon","CardService.cs","","N/A","TASK-2003-02","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Card Action Executor","Create a system within the `TurnManager` or a new service that takes a drawn card's data and executes the corresponding game action. This will involve modifying player state (cash, position), awarding items, or triggering other game events like 'Go to Jail'.","SourceCode","Backlog","Critical","backend-dev-1@project.com","pm@project.com","",12.0,"game-rules,cards,command-pattern","Sprint 4: Jail & Chance","Core Gameplay Engine & Rules","Monopoly Tycoon","CardActionExecutor.cs","","N/A","TASK-2105-04","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Jail Logic (Entry and Exit Options)","Implement all rules related to Jail (REQ-1-050). This includes sending players to jail for landing on 'Go to Jail', drawing a card, or rolling three doubles. In the 'Pre-Turn' phase, for a jailed player, provide the logic to handle the three exit options: pay fine, use card, or attempt to roll doubles.","SourceCode","Backlog","Critical","backend-dev-2@project.com","pm@project.com","",12.0,"game-rules,state-management","Sprint 4: Jail & Chance","Core Gameplay Engine & Rules","Monopoly Tycoon","JailService.cs","","N/A","TASK-2101-01,TASK-2102-01","2024-01-01 09:00","2024-01-01 09:00","C#"
"Develop Unit Test Suite for Board Actions","Create NUnit tests for the services handling board actions, such as `TaxService`, `JailService`, and `CardService`.","Testing","Backlog","High","qa-1@project.com","pm@project.com","",14.17,"unit-test,game-rules","Sprint 4: Jail & Chance","Core Gameplay Engine & Rules","Monopoly Tycoon","TaxServiceTests.cs,JailServiceTests.cs,CardServiceTests.cs","","N/A","TASK-2105-02,TASK-2105-03,TASK-2105-04,TASK-2105-05","2024-01-01 09:00","2024-01-01 09:00","C#,NUnit"
"Implement Rent Calculation Service","Create a dedicated, stateless `RentCalculator` service. This service will take a property and the current `GameState` as input and return the correct rent amount. It must handle all rules: base rent, monopoly (doubled rent for undeveloped), houses/hotels, number of railroads owned, and utilities (based on dice roll and number owned).","SourceCode","Backlog","Critical","backend-dev-1@project.com","pm@project.com","",12.0,"game-rules,economy,calculation","Sprint 5: The Mid-Game","Core Gameplay Engine & Rules","Monopoly Tycoon","RentCalculator.cs","","N/A","TASK-2003-02","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Rent Collection Logic","Integrate the `RentCalculator` into the `Action` phase of the turn. When a player lands on an owned property, this logic will call the calculator, check if the property is mortgaged (no rent), and if rent is due, process the transaction between the renter and the owner.","SourceCode","Backlog","Critical","backend-dev-1@project.com","pm@project.com","",6.17,"game-rules,economy,integration","Sprint 5: The Mid-Game","Core Gameplay Engine & Rules","Monopoly Tycoon","Updated TurnManagerService.cs","","N/A","TASK-2103-03,TASK-2101-01","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Property Development Validation Logic","Create the core validation logic for building. This includes checking for monopoly ownership (REQ-1-053), enforcing the strict 'even building' rule (REQ-1-054), checking for sufficient player funds, and checking the bank's finite supply of houses and hotels (REQ-1-055).","SourceCode","Backlog","Critical","backend-dev-2@project.com","pm@project.com","",12.33,"game-rules,economy,validation","Sprint 5: The Mid-Game","Core Gameplay Engine & Rules","Monopoly Tycoon","DevelopmentService.cs","","N/A","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Building and Selling Transactions","Implement the transaction logic for buying/selling houses and hotels. When a valid build action is confirmed, this logic will debit the player's cash, decrement the bank's supply, and increment the house count on the property. Selling works in reverse. The 'even selling' rule must also be enforced.","SourceCode","Backlog","Critical","backend-dev-2@project.com","pm@project.com","",10.17,"game-rules,economy,transaction","Sprint 5: The Mid-Game","Core Gameplay Engine & Rules","Monopoly Tycoon","Updated DevelopmentService.cs","","N/A","TASK-2104-01","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Mortgage and Unmortgage Logic","Implement the logic for mortgaging (REQ-1-057) and unmortgaging (REQ-1-058) properties. This includes validating that a property is undeveloped before mortgaging, transferring the mortgage value to the player, and calculating the 10% interest fee for unmortgaging.","SourceCode","Backlog","Critical","backend-dev-1@project.com","pm@project.com","",8.17,"game-rules,economy","Sprint 5: The Mid-Game","Core Gameplay Engine & Rules","Monopoly Tycoon","MortgageService.cs","","N/A","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Building Shortage Auction Logic","Implement the logic for the building auction (REQ-1-056). When the number of available buildings is less than the number players want to buy, this service will take over. It will identify eligible buyers and conduct a one-by-one auction for each available building.","SourceCode","Backlog","Could Have","backend-dev-2@project.com","pm@project.com","",15.0,"game-rules,economy,auction","Sprint 6: Advanced Development & AI Foundation","Core Gameplay Engine & Rules","Monopoly Tycoon","BuildingAuctionService.cs","","N/A","TASK-2104-01","2024-01-01 09:00","2024-01-01 09:00","C#"
"Develop Unit Test Suite for Economic Systems","Create a comprehensive NUnit test suite for all economic services: `PropertyService`, `AuctionService`, `RentCalculator`, `DevelopmentService`, and `MortgageService`. Aim for 70% coverage.","Testing","Backlog","High","qa-1@project.com","pm@project.com","",16.67,"unit-test,economy,game-rules","Sprint 6: Advanced Development & AI Foundation","Core Gameplay Engine & Rules","Monopoly Tycoon","PropertyServiceTests.cs,AuctionServiceTests.cs,RentCalculatorTests.cs,DevelopmentServiceTests.cs,MortgageServiceTests.cs","","N/A","TASK-2103-01,TASK-2103-02,TASK-2103-03,TASK-2104-01,TASK-2104-02,TASK-2104-03","2024-01-01 09:00","2024-01-01 09:00","C#,NUnit"
"Implement Core Behavior Tree (BT) Classes","Create the foundational classes for the Behavior Tree system in the core logic library. This includes an abstract `BTNode` class and concrete implementations for composite nodes (`Selector`, `Sequence`) and decorator nodes (`Inverter`). Also create a `BehaviorTreeExecutor` to run the tree.","SourceCode","Backlog","Critical","backend-dev-1@project.com","pm@project.com","",12.33,"ai,behavior-tree,architecture","Sprint 6: Advanced Development & AI Foundation","AI Opponent System","Monopoly Tycoon","BTNode.cs,SelectorNode.cs,SequenceNode.cs,BehaviorTreeExecutor.cs","","N/A","","2024-01-01 09:00","2024-01-01 09:00","C#,AI Programming,Data Structures"
"Define and Implement AI Parameter Configuration","Define the schema for `AIBehaviorParameters.json`. This file will hold all tunable parameters that differ between difficulty levels (e.g., `propertyPurchaseRiskAversion`, `monopolyPriorityMultiplier`). Create a service to load and provide these parameters based on an AI's assigned difficulty.","SourceCode","Backlog","Critical","backend-dev-1@project.com","pm@project.com","",8.33,"ai,configuration,json","Sprint 6: Advanced Development & AI Foundation","AI Opponent System","Monopoly Tycoon","AIBehaviorParameters.json,AIConfigService.cs","","N/A","","2024-01-01 09:00","2024-01-01 09:00","C#,JSON"
"Implement AI Leaf Nodes for Property Decisions","Create the first set of specific BT leaf nodes (Actions and Conditions) for property-related decisions. This includes `ShouldBuyPropertyCondition`, `BuyPropertyAction`, `ShouldAuctionPropertyCondition`, and `BidInAuctionAction`. These nodes will use parameters from the `AIConfigService`.","SourceCode","Backlog","Critical","backend-dev-2@project.com","pm@project.com","",14.33,"ai,behavior-tree,game-rules","Sprint 7: AI Brain (Economy)","AI Opponent System","Monopoly Tycoon","BuyPropertyNode.cs,AuctionDecisionNode.cs","","N/A","TASK-4001-01,TASK-4002-01,TASK-2103-01,TASK-2103-02","2024-01-01 09:00","2024-01-01 09:00","C#,AI Programming"
"Implement AI Leaf Nodes for Development and Mortgaging","Create BT leaf nodes for managing assets. This includes `ShouldBuildHouseCondition`, `BuildEvenlyAction`, `ShouldMortgagePropertyCondition`, and `MortgageAction`. The logic must adhere to game rules and be influenced by the AI's difficulty parameters (e.g., cash reserve thresholds).","SourceCode","Backlog","Critical","backend-dev-2@project.com","pm@project.com","",14.33,"ai,behavior-tree,economy","Sprint 7: AI Brain (Economy)","AI Opponent System","Monopoly Tycoon","BuildDecisionNode.cs,MortgageDecisionNode.cs","","N/A","TASK-4001-01,TASK-4002-01,TASK-2104-01,TASK-2104-03","2024-01-01 09:00","2024-01-01 09:00","C#,AI Programming"
"Assemble and Integrate AI Behavior Trees","Assemble the individual leaf nodes into complete behavior trees for an AI's turn. Create an `AIController` that, on the AI's turn, runs the appropriate tree (e.g., 'Pre-Roll Tree', 'Jail Turn Tree') via the `BehaviorTreeExecutor` and applies the resulting action to the game state.","SourceCode","Backlog","Critical","backend-dev-1@project.com","pm@project.com","",12.33,"ai,behavior-tree,integration,game-loop","Sprint 7: AI Brain (Economy)","AI Opponent System","Monopoly Tycoon","AIController.cs","","N/A","TASK-4002-02,TASK-4002-03,TASK-4002-04,TASK-2101-01","2024-01-01 09:00","2024-01-01 09:00","C#,AI Programming"
"Implement AI Leaf Nodes for Trading","Create BT leaf nodes for trading. This is a complex task involving `ShouldProposeTradeCondition`, `ConstructTradeOfferAction`, and `EvaluateTradeOfferAction`. The evaluation logic must be heavily influenced by difficulty, with 'Easy' AI accepting bad trades and 'Hard' AI aggressively seeking to complete monopolies or block others.","SourceCode","Backlog","Critical","backend-dev-2@project.com","pm@project.com","",17.0,"ai,behavior-tree,trading","Sprint 8: AI Brain (Trading)","AI Opponent System","Monopoly Tycoon","TradeDecisionNode.cs","","N/A","TASK-4001-01,TASK-4002-01","2024-01-01 09:00","2024-01-01 09:00","C#,AI Programming"
"Implement Bankruptcy Detection Logic","Create the logic to determine if a player is bankrupt (REQ-1-065). This involves calculating a player's total liquidatable assets (cash + half value of buildings + mortgage value of undeveloped properties) and comparing it to their current debt.","SourceCode","Backlog","Critical","backend-dev-1@project.com","pm@project.com","",10.17,"game-rules,economy,bankruptcy","Sprint 9: The End Game","Core Gameplay Engine & Rules","Monopoly Tycoon","BankruptcyService.cs","","N/A","TASK-2104-02,TASK-2104-03","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Asset Transfer on Bankruptcy","Implement the two bankruptcy outcomes. If the creditor is another player, transfer all of the bankrupt player's assets to the creditor. If the creditor is the Bank, return all properties to the Bank to be immediately auctioned off.","SourceCode","Backlog","Critical","backend-dev-1@project.com","pm@project.com","",12.33,"game-rules,economy,bankruptcy,transaction","Sprint 9: The End Game","Core Gameplay Engine & Rules","Monopoly Tycoon","Updated BankruptcyService.cs","","N/A","TASK-2106-01,TASK-2103-02","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Win/Loss Condition and Post-Loss AI Simulation","Integrate bankruptcy events with the `TurnManager` to detect the game-end condition (one player left). Implement the human player's loss condition (REQ-1-069), which triggers a high-speed simulation mode where the remaining AIs play to completion.","SourceCode","Backlog","Critical","backend-dev-2@project.com","pm@project.com","",14.33,"game-loop,win-loss","Sprint 9: The End Game","Core Gameplay Engine & Rules","Monopoly Tycoon","GameEndService.cs,Updated TurnManagerService.cs","","N/A","TASK-2106-01,TASK-2101-02","2024-01-01 09:00","2024-01-01 09:00","C#,Software Architecture"
"Develop Unit Test Suite for Bankruptcy and Game End","Create NUnit tests for the `BankruptcyService` and `GameEndService`. This suite must cover all scenarios of bankruptcy detection, asset transfer, and win/loss condition checking.","Testing","Backlog","High","qa-1@project.com","pm@project.com","",12.33,"unit-test,bankruptcy,game-rules","Sprint 9: The End Game","Core Gameplay Engine & Rules","Monopoly Tycoon","BankruptcyServiceTests.cs,GameEndServiceTests.cs","","N/A","TASK-2106-01,TASK-2106-02,TASK-2106-03","2024-01-01 09:00","2024-01-01 09:00","C#,NUnit"
"Design and Implement SQLite Schema","Based on the provided ERD, write the SQL script to create the necessary tables in the SQLite database: `PlayerProfile`, `PlayerStatistic`, `GameResult`, `GameParticipant`, and `SavedGame` (metadata).","Configuration","Backlog","Critical","backend-dev-1@project.com","pm@project.com","",6.0,"database,sqlite,schema","Sprint 10: Persistence & Progression","Player & Profile Management","Monopoly Tycoon","DatabaseSchema.sql","","N/A","","2024-01-01 09:00","2024-01-01 09:00","SQL,SQLite"
"Implement SQLite Repository for Player Profiles and Stats","Create a `StatisticsRepository.cs` class that implements the Repository Pattern for all SQLite database operations. It should handle creating/retrieving player profiles and reading/writing aggregate statistics.","SourceCode","Backlog","Critical","backend-dev-1@project.com","pm@project.com","",12.0,"database,sqlite,repository-pattern","Sprint 10: Persistence & Progression","Player & Profile Management","Monopoly Tycoon","StatisticsRepository.cs","","N/A","TASK-3001-01","2024-01-01 09:00","2024-01-01 09:00","C#,SQLite,SQL"
"Implement Repository for Game Results and Top Scores","Extend the `StatisticsRepository` to handle saving detailed game results and managing the 'Top 10 Scores' list. This includes inserting a `GameResult` and its `GameParticipant`s, and querying/updating the top scores.","SourceCode","Backlog","High","backend-dev-1@project.com","pm@project.com","",10.17,"database,sqlite","Sprint 10: Persistence & Progression","Player & Profile Management","Monopoly Tycoon","Updated StatisticsRepository.cs","","N/A","TASK-3001-02","2024-01-01 09:00","2024-01-01 09:00","C#,SQLite,SQL"
"Implement Automated Database Backup Mechanism","Implement the logic required by REQ-1-089. On application startup, the system must check if the SQLite database file has been modified since the last session. If so, create a timestamped backup. The system must also manage backups, retaining only the three most recent copies.","SourceCode","Backlog","High","backend-dev-2@project.com","pm@project.com","",8.17,"database,backup,reliability","Sprint 10: Persistence & Progression","Player & Profile Management","Monopoly Tycoon","DatabaseBackupService.cs","","N/A","TASK-3001-02","2024-01-01 09:00","2024-01-01 09:00","C#,File I/O"
"Implement GameState Serialization to JSON","Create the `SaveGameRepository`. Implement the 'Save' method which takes a `GameState` object and a slot number. It will serialize the object to JSON using System.Text.Json, calculate a checksum of the JSON string, and write the versioned data to a file.","SourceCode","Backlog","Critical","backend-dev-2@project.com","pm@project.com","",9.33,"save-load,serialization,json","Sprint 10: Persistence & Progression","Player & Profile Management","Monopoly Tycoon","SaveGameRepository.cs","","N/A","TASK-2002-01","2024-01-01 09:00","2024-01-01 09:00","C#,System.Text.Json,File I/O"
"Implement GameState Deserialization and Validation","Implement the 'Load' method in `SaveGameRepository`. It will read a JSON file, verify its checksum for integrity, check its version for compatibility, and then deserialize it back into a `GameState` object. It must handle corrupted or incompatible files gracefully.","SourceCode","Backlog","Critical","backend-dev-2@project.com","pm@project.com","",12.33,"save-load,deserialization,validation","Sprint 10: Persistence & Progression","Player & Profile Management","Monopoly Tycoon","Updated SaveGameRepository.cs","","N/A","TASK-3002-01","2024-01-01 09:00","2024-01-01 09:00","C#,System.Text.Json,File I/O"
"Implement Settings UI Panel","Create a `SettingsMenu.prefab` that contains all the UI controls for game settings: three volume sliders (Master, Music, SFX), a game speed selector (e.g., segmented control for Normal/Fast/Instant), and buttons for data management ('Reset Stats', 'Delete Saves').","SourceCode","Backlog","High","unity-dev-1@project.com","pm@project.com","",12.0,"ui,settings","Sprint 11: Polish & QoL","User Interface & Experience (UI/UX)","Monopoly Tycoon","SettingsMenu.prefab","","N/A","","2024-01-01 09:00","2024-01-01 09:00","Unity UI"
"Implement Settings Persistence Service","Create a `SettingsService` to handle saving and loading user settings (volume, game speed). The settings should be saved to a local JSON file in '%APPDATA%/MonopolyTycoon/'. The service should provide default values if no settings file exists.","SourceCode","Backlog","High","backend-dev-1@project.com","pm@project.com","",8.17,"service,persistence,settings","Sprint 11: Polish & QoL","User Interface & Experience (UI/UX)","Monopoly Tycoon","SettingsService.cs,UserSettings.cs","","N/A","","2024-01-01 09:00","2024-01-01 09:00","C#,File I/O,JSON"
"Implement Settings Controller Logic","Write the `SettingsController.cs` to manage the Settings Menu. It should populate the UI with values from the `SettingsService` on open. User interactions (e.g., moving a slider) should update the service in real-time. It must also handle the confirmation flows for destructive actions.","SourceCode","Backlog","High","unity-dev-1@project.com","pm@project.com","",12.33,"ui,settings,controller","Sprint 11: Polish & QoL","User Interface & Experience (UI/UX)","Monopoly Tycoon","SettingsController.cs","","N/A","TASK-5003-01,TASK-5003-02,TASK-3001-02,TASK-3002-01","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Implement External Rulebook Loading","Extend the `DataLoaderService` or create a new service to load the digital rulebook content from an external, structured JSON file (`Rulebook.json`) as per REQ-1-083.","SourceCode","Backlog","Should Have","backend-dev-2@project.com","pm@project.com","",1.5,"data,rulebook","Sprint 11: Polish & QoL","Core Gameplay Engine & Rules","Monopoly Tycoon","Updated DataLoaderService.cs,Rulebook.json","","N/A","TASK-2003-02","2024-01-01 09:00","2024-01-01 09:00","C#,JSON"
"Implement Save File Data Migration Logic","Create a `DataMigrationService` for save files (REQ-1-090). This service will have version-specific transformation logic. When the `SaveGameRepository` detects an older (but supported) version, it will pass the raw JSON to this service to upgrade it to the current version's schema before deserialization.","SourceCode","Backlog","High","backend-dev-2@project.com","pm@project.com","",10.33,"save-load,migration,architecture","Sprint 12: Final Polish & Release Prep","Player & Profile Management","Monopoly Tycoon","DataMigrationService.cs","","N/A","TASK-3002-02","2024-01-01 09:00","2024-01-01 09:00","C#,JSON"
"Implement Custom Directory and Shortcut Options in Installer","Modify the Inno Setup script to include the 'SelectDir' page, allowing users to choose a custom installation path. Add a task for creating a desktop shortcut, checked by default.","Configuration","Backlog","High","devops-1@project.com","pm@project.com","",4.17,"installer,inno-setup,ux","Sprint 12: Final Polish & Release Prep","Project Foundation & Tooling","Monopoly Tycoon","Updated installer.iss","","US-001,US-002,US-003","TASK-1002-01","2024-01-01 09:00","2024-01-01 09:00","Inno Setup"
"Add Uninstaller Logic for User Data Management","Script the uninstaller using Pascal Script within Inno Setup to check for the existence of the '%APPDATA%/MonopolyTycoon' directory. If it exists, display a confirmation dialog asking the user if they want to delete this data. Implement logic to delete or keep the directory based on user choice.","SourceCode","Backlog","High","devops-1@project.com","pm@project.com","",7.33,"installer,inno-setup,uninstaller","Sprint 12: Final Polish & Release Prep","Project Foundation & Tooling","Monopoly Tycoon","Updated installer.iss with custom script block.","","US-006,US-007","TASK-1002-01","2024-01-01 09:00","2024-01-01 09:00","Inno Setup,Pascal Script"
"Implement Pre-Install Checks in Installer","Add logic to the Inno Setup script to check for sufficient disk space before allowing installation to begin. Also, add a check to detect if the game is currently running and block the uninstaller from proceeding if it is.","SourceCode","Backlog","High","devops-1@project.com","pm@project.com","",3.0,"installer,uninstaller,validation","Sprint 12: Final Polish & Release Prep","Project Foundation & Tooling","Monopoly Tycoon","Updated installer.iss","","US-001,US-006","TASK-1002-01","2024-01-01 09:00","2024-01-01 09:00","Inno Setup,Pascal Script"
"Backend: Implement Asynchronous Update Check Service","Create a service `UpdateCheckService` that, when called, makes an asynchronous HTTPS request to a predefined URL. This service will fetch a version JSON file, compare the remote version with the application's current version, and return a result indicating if an update is available and the download URL.","SourceCode","Backlog","Could Have","backend-dev-1@project.com","pm@project.com","",6.33,"networking,startup,service","Sprint 12: Final Polish & Release Prep","Project Foundation & Tooling","Monopoly Tycoon","UpdateCheckService.cs","","US-067","","2024-01-01 09:00","2024-01-01 09:00","C#,async,.NET 8 HttpClient"
"Frontend: Implement Update Notification UI on Main Menu","In the Main Menu scene, create a UI element (e.g., a banner or a button with a badge) that is initially hidden. This element will be activated by the `MainMenuController` if the `UpdateCheckService` reports an available update. The element must contain a button that, when clicked, opens the provided download URL in the user's default web browser.","SourceCode","Backlog","Could Have","unity-dev-1@project.com","pm@project.com","",3.17,"ui,main-menu","Sprint 12: Final Polish & Release Prep","Project Foundation & Tooling","Monopoly Tycoon","UpdateNotification.prefab,Updated MainMenuController.cs","","US-067","TASK-5001-01","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Integration: Connect Update Service to Main Menu on Startup","Integrate the `UpdateCheckService` into the application's startup sequence. The service should be called when the main menu is loaded. The result of the async call should be used to trigger the visibility of the UI notification element.","SourceCode","Backlog","Could Have","unity-dev-1@project.com","pm@project.com","",2.67,"integration,startup","Sprint 12: Final Polish & Release Prep","Project Foundation & Tooling","Monopoly Tycoon","Updated MainMenuController.cs","","US-067","TASK-1004-01,TASK-1004-02","2024-01-01 09:00","2024-01-01 09:00","Unity,C#"
"Create Privacy Policy UI Panel","Design and implement a reusable UI panel (Prefab) in Unity for displaying text content. It should include a title, a scrollable text area (ScrollRect with TextMeshPro), and a 'Close' button.","SourceCode","Backlog","Should Have","unity-dev-2@project.com","pm@project.com","",3.17,"ui,modal","Sprint 12: Final Polish & Release Prep","Project Foundation & Tooling","Monopoly Tycoon","TextDisplayPanel.prefab","","US-068","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Integrate Privacy Policy on Main Menu","Add a 'Privacy Policy' button to the Main Menu UI. Wire this button to instantiate the TextDisplayPanel, load the privacy text from a `Resources/Text/PrivacyPolicy.txt` file, and display the panel. The 'Close' button callback should destroy the panel instance.","SourceCode","Backlog","Should Have","unity-dev-2@project.com","pm@project.com","",2.0,"ui,main-menu,integration","Sprint 12: Final Polish & Release Prep","Project Foundation & Tooling","Monopoly Tycoon","Updated MainMenuController.cs,PrivacyPolicy.txt","","US-068","TASK-1005-01,TASK-5001-01","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Develop Integration Test for Save/Load Cycle","Using the Unity Test Framework, create a test that starts a new game, plays a few turns, saves the game, loads it, and performs a deep comparison to ensure the loaded state is identical to the saved state.","Testing","Backlog","High","qa-1@project.com","pm@project.com","",12.33,"integration-test,save-load","Sprint 12: Final Polish & Release Prep","Quality & Supportability","Monopoly Tycoon","SaveLoadIntegrationTest.cs","","N/A","TASK-3002-01,TASK-3002-02","2024-01-01 09:00","2024-01-01 09:00","C#,Unity Test Framework"
"Develop Integration Test for Trade Negotiation","Create a Unity integration test that simulates a trade negotiation. It will set up a game state, programmatically initiate a trade offer, simulate acceptance, and verify that the assets have been correctly transferred.","Testing","Backlog","High","qa-1@project.com","pm@project.com","",14.33,"integration-test,trading","Sprint 12: Final Polish & Release Prep","Quality & Supportability","Monopoly Tycoon","TradeIntegrationTest.cs","","N/A","TASK-4002-04","2024-01-01 09:00","2024-01-01 09:00","C#,Unity Test Framework"
"Develop Integration Test for Bankruptcy","Create a Unity integration test for bankruptcy. It will load a pre-made save file where a player is about to go bankrupt, trigger the event, and verify that assets are correctly transferred.","Testing","Backlog","High","qa-1@project.com","pm@project.com","",14.67,"integration-test,bankruptcy","Sprint 12: Final Polish & Release Prep","Quality & Supportability","Monopoly Tycoon","BankruptcyIntegrationTest.cs","","N/A","TASK-2106-02,TASK-6003-01","2024-01-01 09:00","2024-01-01 09:00","C#,Unity Test Framework"
"Create Curated Save Files for Testing","Manually play the game to specific edge-case scenarios and save the game state. Create and document at least three critical test assets: a player near bankruptcy, a board state with a housing shortage, and a complex property ownership configuration.","Configuration","Backlog","High","qa-1@project.com","pm@project.com","",10.33,"test-data,qa","Sprint 12: Final Polish & Release Prep","Quality & Supportability","Monopoly Tycoon","near_bankruptcy_save.json,housing_shortage_save.json,complex_trade_save.json,TestSaves.md","","N/A","TASK-3002-01","2024-01-01 09:00","2024-01-01 09:00","QA,JSON"
"Document System Architecture and Data Schemas","Create the internal technical documentation. Use Markdown files in a `/docs` directory. Create high-level diagrams for the system architecture. Formally document the JSON schema for save files and the SQLite schema.","Documentation","Backlog","High","tech-lead@project.com","pm@project.com","",12.0,"documentation","Sprint 12: Final Polish & Release Prep","Quality & Supportability","Monopoly Tycoon","/docs/architecture.md,/docs/data_schemas.md","","N/A","TASK-1001-01,TASK-2002-01,TASK-3001-01","2024-01-01 09:00","2024-01-01 09:00","Technical Writing,Software Architecture,Markdown"
"Document AI Configuration Parameters","Create the `ai_configuration.md` document. For each parameter in `AIBehaviorParameters.json`, provide a detailed description of its purpose, its effect on AI behavior, and the range of typical values for each difficulty level.","Documentation","Backlog","High","ai-lead@project.com","pm@project.com","",6.33,"documentation,ai","Sprint 12: Final Polish & Release Prep","Quality & Supportability","Monopoly Tycoon","/docs/ai_configuration.md","","N/A","TASK-4002-01","2024-01-01 09:00","2024-01-01 09:00","Technical Writing,AI Programming"