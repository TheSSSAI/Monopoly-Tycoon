risk_id,risk_category,risk_description,probability,impact,risk_score,priority_level,affected_tasks,root_cause,mitigation_strategy,contingency_plan,monitoring_trigger,owner,due_date,status
RISK-001,Technical,"Game state becomes corrupted (e.g., assets duplicated or lost) during complex, multi-step transactions like bankruptcy or trading, leading to a broken game session.",4,5,20,High,"WI-CORE-011, WI-CORE-010, WI-CORE-008",Lack of atomic operations for state changes involving multiple objects (players, bank, board).,"Implement all game state modifications through a transactional Command Pattern, allowing for rollback on failure. Enforce strict validation before and after each transaction. All database writes for statistics must use ACID-compliant transactions.",Rely on the global exception handler to catch the fault and provide logs for post-mortem debugging. Prioritize a patch to fix the specific transactional flaw. Players would need to abandon the corrupted game.,Automated integration tests for bankruptcy and trading fail. User reports of game-breaking bugs after a trade.,Tech Lead,2025-03-31,Open
RISK-002,Quality,"The AI's strategic behavior is unbalanced, making the game either trivially easy (on 'Hard') or frustratingly unfair/predictable, which undermines the core single-player experience.",4,4,16,High,"WI-AI-003, WI-AI-004, WI-AI-005",The complexity of balancing strategic decision-making parameters (e.g., property valuation, trade acceptance) for different play styles.,"[Preventive] Externalize all AI parameters into the JSON config file for rapid tuning without recompiling. [Detective] Implement extensive DEBUG-level logging for the AI's decision-making process to analyze its choices. Schedule regular playtesting sessions with players of varying skill levels.",Plan for post-launch updates dedicated to AI tuning based on broader player feedback and data analysis. The external config file makes this feasible.,Playtesting feedback consistently indicates AI is too easy, too hard, or makes nonsensical decisions. Review of AI decision logs shows repetitive or illogical patterns.,AI Dev,2025-07-31,Open
RISK-003,Technical,"Save files become corrupted or are rendered unusable by a game update, leading to a total loss of player progress and severe user frustration.",3,5,15,High,"WI-GSTATE-001, WI-GSTATE-002",The `GameState` data model evolves during development, and the data migration logic fails to handle an edge case or is implemented incorrectly.,"Implement a robust, forward-compatible versioning system for the save file format from day one. Write atomic save operations (write to temp file, then rename on success). Create an extensive suite of integration tests for the save/load and data migration systems using curated test files.",Implement an automated backup system for save files (e.g., keep the last 3 saves). Provide clear UI feedback for corrupted/incompatible saves as per REQ-1-088 rather than crashing. Prioritize a patch to fix the migration logic.,Integration tests for data migration fail after a `GameState` schema change. First user reports of save files failing to load after a patch is released.,Lead Dev,2025-04-30,Open
RISK-004,Timeline,"Implementation of the core Behavior Tree (BT) framework is more complex than anticipated, delaying the development of all AI decision logic.",3,4,12,Medium,WI-AI-001,Underestimation of the architectural complexity required to build a flexible and performant BT system from scratch.,Time-box an initial R&D spike to evaluate existing open-source C# Behavior Tree libraries. If a suitable, well-maintained library is found, favor integration over building from scratch to save time and leverage a mature solution.,If no library is suitable and the custom implementation is falling behind, simplify the AI for the initial release (e.g., using a simpler state machine for 'Easy'/'Medium' AI) and plan to enhance it with the full BT system in a post-launch update.,The BT framework is not feature-complete by the end of its allocated sprint. AI developers are blocked from implementing action nodes.,AI Dev,2025-05-15,Open
RISK-005,Quality,"A core gameplay rule is misinterpreted or implemented incorrectly (e.g., the 'even building' rule, auction initiation, or bankruptcy asset transfer), breaking the game's authenticity.",3,4,12,Medium,"WI-CORE-007, WI-CORE-008, WI-CORE-011",Ambiguity in the official Hasbro rulebook or developer oversight during implementation.,"[Preventive] Assign one team member as the 'Rules Czar' to be the final authority on rule interpretation. [Detective] For every complex rule, create a specific unit test in NUnit that codifies the expected behavior. Conduct peer reviews of all rule-engine code specifically against the written rulebook.",Be prepared to issue a patch to correct the rule logic. Publicly acknowledge the deviation in patch notes to maintain transparency with the player base.,A unit test for a specific rule fails. Playtesters report behavior that contradicts the official rules.,QA Lead,2025-06-30,Open
RISK-006,Technical,"The in-game UI (e.g., HUD cash display, property ownership markers) becomes desynchronized from the authoritative backend `GameState`, causing player confusion and potentially allowing invalid actions.",4,3,12,Medium,"WI-UI-003, WI-UI-005",Lack of a robust, centralized eventing system, leading to ad-hoc UI updates that miss certain game state change triggers.,Implement a strict one-way data flow using an event-driven architecture. The core game logic should publish events (e.g., `PlayerCashChanged`, `PropertyOwnershipChanged`), and the UI controllers should be the only subscribers that update the view. The UI should never modify the game state directly.,As a fallback, implement a periodic full refresh of the UI from the GameState, especially after complex actions like trades or bankruptcy, to correct any desynchronization.,During playtesting, a player's cash in the HUD is observed to be incorrect after a transaction, but the underlying `GameState` value is correct.,UI Dev,2025-05-31,Open
RISK-007,Quality,"The application fails to maintain a sustained 60 FPS on recommended hardware, or drops below 45 FPS during typical gameplay, violating NFRs and creating a poor user experience.",3,4,12,Medium,"EPIC-UI, EPIC-AI","Unoptimized 3D assets (high poly count, large textures), inefficient C# scripts (e.g., in `Update()`), or computationally expensive AI calculations causing CPU spikes.","[Preventive] Establish strict asset performance budgets (poly count, texture size). Conduct regular performance profiling sessions on a machine with the 'recommended' specs. [Detective] Integrate an on-screen FPS counter into all debug builds.",Provide more granular graphics settings in the options menu, allowing users to disable or reduce the quality of expensive features like visual effects or high-quality textures. Optimize the highest-impact performance bottlenecks identified during profiling.,Regular profiling shows FPS dropping below the 45 FPS threshold during key events (e.g., dice rolls, AI turns).,Lead Dev,2025-08-15,Open
RISK-008,Timeline,"The process of manually creating and maintaining a comprehensive set of curated save files for testing specific edge cases (REQ-1-027) is significantly more time-consuming than estimated, delaying QA.",4,2,8,Medium,WI-INFRA-007,"The difficulty of manually playing the game into a very specific state (e.g., a housing shortage with 3 active players) for every required test case.",Develop an internal debug/cheat menu that allows QA to directly manipulate the game state (e.g., give player money, transfer property, set house count) to rapidly create the desired test conditions before saving the file.,Reduce the number of required curated save files to only the most critical edge cases (e.g., bankruptcy, housing shortage). Rely more heavily on unit tests and procedurally generated integration tests for other scenarios.,The QA team reports that creating a single required test save file is taking several hours, indicating the process is not scalable.,QA Lead,2025-06-15,Open
RISK-009,Technical,"The Global Exception Handler fails to catch certain types of exceptions (e.g., those from native code, unmanaged memory access, or non-main threads), resulting in a silent crash-to-desktop with no logs.",2,3,6,Low,WI-INFRA-003,The exception handler is only configured for managed C# exceptions on the main thread, but Unity or other plugins can cause faults at a lower level.,Implement handlers for all available exception domains (`AppDomain.CurrentDomain.UnhandledException` for .NET, `Application.logMessageReceived` for Unity-level errors). Ensure the logging system is initialized as early as possible in the application startup sequence.,Rely on player reports and Windows Event Viewer logs to diagnose crashes that bypass the in-game handler. This is a reactive measure for a low-probability risk.,A user reports a consistent crash-to-desktop that does not produce a log file or the error dialog.,Tech Lead,2025-04-15,Open
RISK-010,External,"Hasbro updates the official U.S. Monopoly rules after development has started, making parts of the implemented `RuleEngine` obsolete or incorrect.",1,4,4,Low,EPIC-CORE,Dependency on an external entity's official standard which is subject to change outside of the project's control.,Use the specified '2024 baseline version' as a hard rule set. Design the `RuleEngine` to be as modular as possible, isolating different rules (e.g., building, auctions) into separate classes to make future modifications easier.,If a significant rule change occurs, assess the development effort required to update the engine. Communicate the deviation from the newest rules to players via the digital rulebook or release notes if an immediate update is not feasible.,Hasbro, Inc. releases a new official version of the U.S. Monopoly rules.,Project Manager,2025-09-01,Open
RISK-011,Resource,"The primary developer responsible for the complex AI system becomes unavailable for an extended period, creating a significant knowledge gap and bottleneck for the project.",2,5,10,Medium,"EPIC-AI, WS-AI-001, WS-AI-002",Over-reliance on a single person for a critical, specialized component of the project (Key Person Dependency).,"Enforce a policy of pair programming for the most complex AI modules. Mandate that all AI architecture and decision logic is thoroughly documented in the internal technical documentation (REQ-1-096). Conduct regular code reviews of AI components with at least one other developer.",Hire an external contractor with Unity AI expertise to take over the work. Alternatively, descale the AI's complexity for the initial release and plan to enhance it in a future update.,The primary AI developer is unexpectedly absent, and no other team member is confident enough to continue their work.,Project Manager,2025-03-01,Open
RISK-012,Operational,"The automated backup and recovery system for the SQLite statistics database (REQ-1-089) contains a flaw and fails to restore data correctly during a real corruption event.",2,4,8,Medium,WI-GSTATE-005,The recovery logic is complex and is only executed in a rare failure scenario, making it difficult to test exhaustively.,"[Preventive] Write specific integration tests that simulate database corruption (e.g., by writing garbage data to the .db file) and then verify that the recovery logic successfully restores from a known-good backup. [Detective] Add logging around the entire backup and recovery process.",If automated recovery fails, the user will be presented with the final graceful failure dialog, giving them the option to reset their statistics. The original corrupted file and its backups will be available for manual recovery by a support technician if the user provides the files.,Integration tests for the database recovery process fail. A user reports that their statistics were wiped after a crash, even though backup files exist.,Lead Dev,2025-07-15,Open