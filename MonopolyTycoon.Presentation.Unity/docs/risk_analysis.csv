risk_id,risk_category,risk_description,probability,impact,risk_score,priority_level,affected_tasks,root_cause,mitigation_strategy,contingency_plan,monitoring_trigger,owner,due_date,status
RISK-TECH-001,Technical,"The core Rule Engine logic has subtle bugs due to the high number of rule interactions (e.g., bankruptcy during an auction, trading mortgaged properties), leading to game-breaking exploits or freezes.","4","5","20","High","WI-004, WI-006, WI-008, WI-009, WI-011, WI-016","High complexity and combinatorial nature of Monopoly rules.","Implement a comprehensive, data-driven integration test suite (WI-040) using curated save files (WI-041) for specific edge cases. Conduct rigorous peer reviews of all rule-implementing service classes.","Allocate a ""stabilization sprint"" before release dedicated to fixing bugs found during extensive QA playtesting. Prepare a post-launch patching strategy for any discovered exploits.","An integration test (WI-040) fails due to an unexpected rule interaction. Manual QA reports a reproducible state corruption bug.","Lead Developer",2025-03-15,Identified
RISK-TECH-002,Technical,"The AI Behavior Tree (BT) engine implementation (WI-012) is more complex than estimated, causing a significant delay that blocks all subsequent AI development tasks.","3","5","15","High","WI-014, WI-015, WI-016","High inherent complexity of creating a robust and generic BT execution engine from scratch.","Prioritize a ""vertical slice"" of the BT engine that only supports the minimum required node types for a simple AI. Consider using a proven, third-party BT asset from the Unity Asset Store to accelerate development.","Re-scope AI for initial release to be simpler, possibly script-based, if the BT engine is significantly delayed. Shift developers from AI logic tasks to other epics until the engine is stable.","The BT engine (WI-012) is not feature-complete by the end of its first allocated sprint. Unit tests for the engine show fundamental architectural issues.","AI Lead",2025-02-28,Identified
RISK-QUAL-001,Quality,"AI difficulty levels are poorly balanced (REQ-1-064). 'Hard' AI is easily exploitable or 'Easy' AI is frustratingly random, leading to poor player experience and negative reviews.","4","4","16","High","WI-015, WI-016","Subjectivity of perceived difficulty and the complexity of tuning AI strategic evaluation logic.","Use external JSON configuration (WI-013) for all AI parameters to allow for rapid tuning without recompiling. Schedule iterative playtesting sessions with players of different skill levels to gather feedback. Implement AI vs. AI simulations to gather balancing data.","Plan for a day-one or first-week patch to deploy updated AI configuration files based on initial player feedback and telemetry.","Internal playtesting feedback consistently rates the AI as either ""too easy"" or ""unfair"". Win/loss statistics from AI vs. AI simulations are heavily skewed.","Game Designer",2025-05-15,Identified
RISK-TECH-003,Technical,"Serialization or deserialization of the complex `GameState` object (WI-002) is buggy, leading to corrupted save files and a non-functional save/load system.","3","5","15","High","WI-017, WI-018, WI-019, WI-020, WI-041","Complexity of object graph serialization, especially with collections and nested objects. Forgetting to serialize a single critical field can break the game state.",""Implement a dedicated integration test suite (WI-040) for a full save-load-verify cycle. Use a schema-first approach where the JSON structure is explicitly defined. Peer review the `GameState` model for serialization-friendliness (e.g., avoiding circular references).""","If corruption is found late, temporarily disable save slots and focus development on a patch. Use the data migration service (WI-020) to attempt to repair corrupted saves for users post-launch.","The save-load integration test (WI-040) fails. A loaded game state is not identical to the pre-save state. Manual testing reveals corrupted saves.","Lead Developer",2025-03-30,Identified
RISK-TIMELINE-001,Timeline,"The development of high-quality 3D assets, animations, and audio (WI-030, WI-031, WI-032) is delayed, blocking UI and presentation layer completion and impacting the perceived quality of the final product.","3","4","12","Medium","WI-030, WI-031, WI-032, EPIC-004","Dependency on creative disciplines which can have unpredictable timelines; underestimation of asset optimization work required for performance.","Develop all gameplay logic and UI using simple placeholder assets ('grey-boxing'). Establish a clear asset delivery schedule with explicit deadlines and quality requirements.","If final assets are delayed, ship the game with a polished 'developer art' or minimalist theme. Plan a free post-launch update that adds the final, high-quality themed assets.","The first major asset delivery milestone (e.g., all player tokens) is missed. Delivered assets fail to meet the performance budget (e.g., polygon count too high).","Project Manager",2025-04-15,Identified
RISK-TECH-004,Technical,"The Global Exception Handler (WI-036) fails to catch all unhandled exceptions or fails itself, resulting in a hard crash-to-desktop and preventing diagnostic logs from being written.","3","4","12","Medium","WI-036","Complexity of handling exceptions across different threads and within the Unity engine's lifecycle. The error-handling UI itself could be a source of errors.","Implement the handler early in the project lifecycle and test it with intentionally thrown exceptions from various parts of the code (coroutines, async methods, UI callbacks). Keep the handler's own logic and UI as simple and robust as possible.","If the handler is unreliable, the contingency is to rely solely on Unity's default crash logs, which are less user-friendly. Increase manual testing efforts on platforms where crashes have been observed.","A crash-to-desktop is reported during QA testing without the custom error dialog appearing. The log file is not updated upon a crash.","Lead Developer",2025-02-15,Identified
RISK-QUAL-002,Quality,"The 70% unit test coverage target (REQ-1-025) is insufficient for the complex rule engine, allowing critical bugs in untested edge cases to reach the final product.","4","3","12","Medium","WI-039","The 70% target may be an arbitrary number that doesn't reflect the risk profile of the code. Core rule logic has a higher need for coverage than simple data objects.","Focus test-writing efforts on the most complex and critical modules (Rule Engine, Bankruptcy Service, Trade Service) and aim for 85%+ coverage there, even if other areas are lower. Supplement unit tests with a broad suite of integration tests (WI-040).","Allocate additional QA resources for extensive, exploratory manual testing focused on breaking the game's economic and rule systems.","Code coverage reports show that critical logic branches within the rule engine are not being tested. A high number of bugs are found by manual QA in modules that have met the 70% coverage target.","QA Lead",2025-05-30,Identified
RISK-TECH-005,Technical,"The save file data migration system (WI-020) is flawed, causing it to fail on certain old save files or corrupting user data during an upgrade.","3","4","12","Medium","WI-020","High complexity of writing a robust, atomic data transformation process. Unforeseen changes in the data schema can make migration difficult.","Ensure the migration process is atomic by using a backup-migrate-overwrite-delete pattern. Create and maintain a suite of 'legacy' save files from each previous version to run automated regression tests against the migration service.","If migration fails, the system must leave the original file untouched. Communicate to the user that the save is from an unsupported version. Provide a tool for users to submit old save files for manual analysis and potential repair.","A regression test for the migration service fails. A user reports that their save file became corrupted after a game update.","Lead Developer",2025-04-30,Identified
RISK-TECH-006,Technical,"The localization readiness architecture (WI-037) is implemented poorly, resulting in some hardcoded strings remaining or performance issues due to inefficient string lookups.","3","3","9","Medium","WI-037, WI-038","Difficulty of enforcing the 'no hardcoded strings' rule across a large codebase and within the Unity editor's inspector fields.","Implement a static analysis tool or script that scans the codebase and scene files for hardcoded user-facing strings. Use a centralized, singleton `LocalizationManager` for all text lookups, and cache the language file in memory on load.","For a V1.0 English-only release, the impact is low. A dedicated 'localization sprint' would be required post-launch to find and fix all hardcoded strings before a new language could be added.","A code review finds a new UI element with hardcoded text. The profiler shows significant time spent in text lookup functions during gameplay.","Lead Developer",2025-03-15,Identified
RISK-EXTERNAL-001,External,"The game's assets or branding violate the Hasbro IP and branding guidelines (REQ-1-099), requiring costly and time-consuming rework late in the project.","2","5","10","Medium","WI-030, EPIC-004","Misinterpretation of the licensing agreement or lack of a formal review process for creative assets.","Establish a formal asset approval process where a designated stakeholder reviews all player-facing assets (tokens, board art, UI) against the Hasbro style guide before they are integrated into the game. Maintain a central document of approved assets.","Delay the release to rework all non-compliant assets. If the violation is minor, release the game and plan a mandatory update to fix the assets as soon as possible.","A stakeholder review identifies an asset that does not conform to the licensing agreement. Hasbro provides negative feedback during a milestone review.","Project Manager",2025-05-01,Identified
RISK-QUAL-003,Quality,"The game fails to meet the performance targets of 60 FPS average / 45 FPS minimum on recommended hardware (REQ-1-014) due to unoptimized 3D assets, effects, or AI logic.","3","3","9","Medium","WI-030, WI-031, WI-015","Cumulative impact of many small performance bottlenecks. 3D art assets are created without a strict performance budget (poly count, texture size).",""Define and enforce strict performance budgets for all assets from the beginning. Conduct regular performance profiling sessions (e.g., weekly) on a machine that matches the ""recommended"" hardware spec.""","Introduce lower-quality graphics settings that disable or reduce expensive effects (e.g., shadows, particle effects). Allocate an optimization-focused sprint to refactor slow code and simplify assets.","The game's FPS consistently drops below 45 during key moments (e.g., token movement, AI turn processing) during tests on the target hardware.","QA Lead",2025-06-01,Identified
RISK-TIMELINE-002,Timeline,"The high number of tasks marked with ""High"" complexity are underestimated, causing a cascade of delays across dependent tasks and threatening the release date.","4","3","12","Medium","WI-004, WI-006, WI-008, WI-009, WI-011, WI-012, WI-014, WI-015, WI-016, WI-020, WI-025, WI-026, WI-027, WI-030, WI-031, WI-036, WI-037, WI-039, WI-040","Optimism bias in estimation. Unforeseen technical challenges in complex areas like the rule engine, AI, and persistence layers.","Break down all high-complexity tasks into smaller, more manageable sub-tasks with their own estimates. Use time-boxing (spikes) to investigate technical uncertainty before committing to a full implementation. Prioritize work on the critical path.",""De-scope non-essential features (e.g., reduce the number of themes from two to one, simplify some animations). Negotiate a new, more realistic deadline with stakeholders based on updated velocity metrics.""","A high-complexity task takes more than 150% of its estimated time. The project's burndown chart shows a clear and consistent deviation from the ideal line.","Project Manager",2025-03-01,Identified
RISK-TECH-007,Technical,"The SQLite database backup and recovery mechanism (WI-024) is unreliable, failing to protect players from data loss in the event of file corruption.","2","4","8","Medium","WI-024, WI-021","Edge cases in file I/O (e.g., permissions errors, disk full during backup) are not handled correctly. Logic for managing the rolling backups is buggy.","Implement unit tests for the backup management logic. During manual QA, explicitly test the recovery process by manually corrupting the main database file and verifying that the application can restore from the latest backup.","Provide users with instructions on how to manually restore from the backup files. If the system is highly unreliable, consider increasing the number of retained backups from 3 to 5.","A user reports loss of all statistics despite the existence of backup files. QA testing shows that the system fails to correctly identify and restore a corrupted database.","Lead Developer",2025-04-15,Identified
RISK-OPERATIONAL-001,Operational,"The Inno Setup uninstaller (WI-034) fails to cleanly remove all application files or incorrectly deletes user data against their wishes.","3","2","6","Low","WI-034","Bugs in the Pascal scripting logic within the .iss file. Incorrectly resolving system paths (e.g., %APPDATA%) on different Windows configurations.","Conduct thorough manual testing of the full install-use-uninstall-verify cycle on clean virtual machines for all target Windows versions (10 and 11). Peer review the Inno Setup script for pathing and logic errors.","Provide a support document on the game's website with manual steps for complete removal. Release a patched installer with the corrected uninstaller script.","QA testing reveals that application files or registry keys remain after uninstallation. A user reports that their save games were deleted even though they chose to keep them.","Build Engineer",2025-06-10,Identified
RISK-RESOURCE-001,Resource,"The project requires a niche skill in AI Behavior Tree design and implementation (WI-012, WI-015), and the assigned developer lacks experience, leading to poor architecture and delays.","2","3","6","Low","EPIC-002","Underestimation of the specific expertise required for a non-trivial AI system.",""Provide training resources or budget for an experienced consultant to review the AI architecture. Prioritize hiring developers with demonstrated game AI experience. Start with a simpler AI design and iterate.""","If the custom BT engine is failing, pivot to using a pre-existing, well-supported BT framework from the Unity Asset Store. This may require some refactoring of action nodes but is less risky than building a flawed engine.","The initial architecture for the Behavior Tree (WI-012) is rejected multiple times during code review due to fundamental flaws. The first AI prototypes (WI-015) are buggy and non-performant.","Team Lead",2025-02-20,Identified
RISK-TECH-008,Technical,"The use of a singleton `GameManager` (WI-003) leads to tight coupling and makes unit testing of dependent systems difficult, increasing the risk of bugs.","3","2","6","Low","WI-003, WI-004, and many others","The singleton pattern is easy to implement but can become a dependency magnet, violating SOLID principles.","Use Dependency Injection (DI) to provide the GameManager instance to classes that need it, rather than having them access a global static property. This allows for a mock GameManager to be injected during unit tests.","Accept the technical debt for the V1.0 release and plan a refactoring sprint post-launch to introduce a proper DI framework and break up the GameManager's responsibilities.","Unit tests (WI-039) become difficult to write because many classes directly reference `GameManager.Instance`, making them hard to test in isolation. The GameManager class grows to an unmanageable size.","Lead Developer",2025-02-01,Identified