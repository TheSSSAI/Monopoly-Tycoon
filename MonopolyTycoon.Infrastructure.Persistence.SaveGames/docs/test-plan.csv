test_id,feature_area,test_type,test_level,priority,automation_candidate,test_description,preconditions,test_steps,expected_result,test_data_needs,tools_required,estimated_effort,dependencies
TEST-INF-001,Infrastructure & VCS,Functional,System,Critical,High,"Verify .gitignore prevents temporary Unity/VS files from being tracked","Git repository is cloned. Unity and Visual Studio are installed.","1. Open the project in Unity, allowing it to generate the Library folder. 2. Open the solution in Visual Studio, letting it create .vs and .user files. 3. Run 'git status' in the project root.","The 'git status' command shows a clean working directory with no temporary files or folders staged for commit.",N/A,"Git, Unity, Visual Studio",0.5,TASK-S027-T01
TEST-INF-002,Infrastructure & VCS,Functional,System,Critical,Manual Only,"Verify the Visual Studio solution structure and project references are correct","The VS solution has been created as per the task.","1. Open the MonopolyTycoon.sln file in Visual Studio 2022. 2. Check the Solution Explorer. 3. Attempt to build the entire solution.","The solution opens successfully. It contains both the Unity-generated C# project and the 'MonopolyTycoon.Core' class library. The solution builds without any reference or configuration errors.",N/A,"Visual Studio 2022",0.5,TASK-S027-T02
TEST-UNIT-CORE-001,Core Game Logic,Functional,Unit,High,High,"Verify PlayerState model serializes and deserializes correctly","'PlayerState.cs' class is implemented. NUnit test project is set up.","1. In a unit test, create a PlayerState object with non-default values. 2. Serialize it to a JSON string. 3. Deserialize the string back into a new PlayerState object. 4. Assert that all properties of the new object are equal to the original.","The deserialized object is a deep-equal of the original, confirming a perfect round-trip.",Sample PlayerState data with all fields populated,"NUnit, System.Text.Json",2,TASK-S001-T01
TEST-UNIT-CORE-002,Core Game Logic,Functional,Unit,High,High,"Verify GameState model serializes and deserializes correctly, including nested PlayerState objects","'GameState.cs' and 'PlayerState.cs' are implemented. NUnit test project is set up.","1. In a unit test, create a complex GameState object with multiple PlayerState objects and other nested data. 2. Serialize it to JSON. 3. Deserialize it back into a new GameState object. 4. Perform a deep assertion comparing the original and deserialized objects.","The deserialized GameState object, including its list of PlayerState objects, is a perfect deep-equal of the original.",Sample complex GameState data,"NUnit, System.Text.Json",3,TASK-S001-T02
TEST-INF-LOG-001,Infrastructure & Logging,Functional,Integration,High,High,"Verify Serilog console logging is initialized and functional","Serilog NuGet packages are installed. A basic LoggingService is implemented.","1. In a test or application startup, call the LoggingService to initialize. 2. Call the logger to write an INFO level message. 3. Run the application.","The specified log message appears in the Unity Console or the application's standard output console.",N/A,"Unity, NUnit, Serilog",1,TASK-S028-T01
TEST-INF-LOG-002,Infrastructure & Logging,Functional,Integration,High,High,"Verify Serilog writes structured JSON logs to the correct file path","Serilog is configured with a JSON file sink.","1. Run the application to trigger a log event. 2. Navigate to the '%APPDATA%/MonopolyTycoon/logs' directory. 3. Open the latest log file.","A log file exists in the correct directory. Its content is structured JSON, not plain text. The log entry contains the correct message and properties.",N/A,"Unity, Serilog",2,TASK-S028-T02
TEST-INF-LOG-003,Infrastructure & Logging,Non-Functional,System,High,High,"Verify Serilog rolling file and retention policies are enforced","Serilog is configured with rolling file policies (7-day/50MB).","1. Programmatically generate over 50MB of logs or manipulate file creation dates to be older than 7 days. 2. Relaunch the application to trigger the cleanup policy. 3. Check the log directory.","The oldest/largest log files are automatically deleted, and the total log size or number of files respects the configured limits.",Script to generate large log files,"Unity, Serilog",4,TASK-S028-T02
TEST-INF-ERR-001,Infrastructure & Error Handling,Functional,System,Critical,High,"Verify the global exception handler catches unhandled exceptions","The global exception handler is implemented.","1. Add a test button or code path that intentionally throws an unhandled exception. 2. Run the application and trigger the exception.","The application does not crash to desktop. The custom modal error dialog is displayed instead.",N/A,"Unity, C#",3,TASK-S029-T01
TEST-INF-ERR-002,Infrastructure & Error Handling,Functional,Integration,Critical,High,"Verify the error dialog displays the correct, correlated information","The error dialog UI and integration logic are complete.","1. Trigger an unhandled exception. 2. Note the Error ID displayed in the dialog. 3. Check the error log file.","The dialog shows a non-technical message, a unique Error ID, and the absolute path to the logs. The error log contains an entry with the exact same Error ID and the full stack trace.",N/A,"Unity, Serilog",2,TASK-S029-T03
TEST-INF-TEST-001,Infrastructure & Testing,Functional,System,High,Manual Only,"Verify NUnit test project is correctly configured and can run tests","NUnit test project has been created in the VS solution.","1. Open the solution in Visual Studio. 2. Open the Test Explorer window. 3. Run the tests in the `MonopolyTycoon.Core.Tests` project.","The Test Explorer discovers all tests in the project. The tests run successfully and their results (pass/fail) are displayed.",A sample 'Assert.Pass()' test case,"Visual Studio, NUnit",1,TASK-S030-T01
TEST-INF-TEST-002,Infrastructure & Testing,Functional,System,High,Manual Only,"Verify Unity Test Framework is correctly configured and can run tests","Unity Test Framework package is installed and configured.","1. Open the Unity project. 2. Open the Test Runner window. 3. Create a simple test in the correct assembly. 4. Run the test from the Test Runner.","The Test Runner window opens and discovers the test. The test runs in either Edit Mode or Play Mode and its result is displayed.",A sample Unity test case,"Unity, Unity Test Framework",1,TASK-S031-T01
TEST-DATA-DB-001,Data Persistence,Functional,Integration,High,High,"Verify SQLite database connection can be established","SQLite library is integrated. Connection manager is implemented.","1. Run a test that instantiates the `DatabaseConnectionManager`. 2. Call a method to open a connection.","The connection to the SQLite database file in `%APPDATA%/MonopolyTycoon/` is opened successfully without throwing an exception. If the file doesn't exist, it is created.",N/A,"NUnit, Microsoft.Data.Sqlite",1,TASK-S024-T01
TEST-DATA-DB-002,Data Persistence,Functional,Integration,High,High,"Verify database schema is correctly initialized on first launch","`DatabaseInitializationService` is implemented.","1. Delete any existing database file in `%APPDATA%/MonopolyTycoon/`. 2. Run the application to trigger the initialization service. 3. Open the newly created database file with a SQLite browser.","The database file is created. It contains all the required tables (PlayerProfiles, PlayerStatistics, HighScores) with the correct column names and data types.",N/A,"Unity, SQLite Browser",3,TASK-S024-T02
TEST-UI-ERR-001,UI/UX,Functional,System,High,Manual Only,"Verify the error dialog UI displays all required elements","The error dialog prefab is created.","1. Trigger the error dialog to appear. 2. Visually inspect the dialog.","The dialog is modal, displays fields for the message, Error ID, and log path, and has a functional 'Close' button that terminates the application. The text is selectable/copyable.",N/A,"Unity",1,TASK-S029-T02
TEST-UI-SCENE-001,UI/UX,Functional,System,High,Manual Only,"Verify the main game scene and isometric camera are set up correctly","The MainGame scene has been created.","1. Open the MainGame scene in the Unity editor. 2. Enter Play mode. 3. Observe the Game view.","The scene loads without errors. The camera is positioned at a fixed isometric angle, providing a clear and comprehensive view of the entire game board. Basic lighting is present.",N/A,"Unity",1,TASK-S017-T01
TEST-UI-ASSETS-001,UI/UX,Visual,System,High,Manual Only,"Verify all 3D board assets are correctly imported and assembled","3D assets for the board have been imported.","1. Open the MainGame scene. 2. Visually inspect the game board from all angles.","The game board is fully assembled and visually matches the design specifications. Textures are applied correctly, and there are no missing models, z-fighting, or other visual artifacts.",Final 3D models and textures,"Unity",3,TASK-S017-T02
TEST-UI-HUD-001,UI/UX,Functional,System,High,Manual Only,"Verify the HUD layout is responsive across supported aspect ratios","The GameHUD.prefab has been implemented with responsive design principles.","1. Open a scene with the GameHUD. 2. In the Unity editor, switch the Game view's aspect ratio between 16:9, 16:10, and 21:9. 3. Observe the layout of the HUD and its child elements.","The HUD elements (player info panels, etc.) remain correctly anchored to the screen edges. Elements do not overlap, get distorted, or become clipped. The layout remains functional and aesthetically pleasing on all three aspect ratios.",N/A,"Unity",4,TASK-S018-T01
TEST-UI-SETUP-001,UI/UX,Functional,System,High,Manual Only,"Verify Game Setup screen UI layout","The Game Setup screen prefab is created.","1. Open the Game Setup scene/prefab. 2. Visually inspect the layout.","The UI contains all the required elements: player name input, token selection grid, opponent count selector, and a dynamic area for AI settings. The layout is clean and matches the design mockups.",UI mockups,"Unity",1,TASK-S014-T01
TEST-FUNC-PROF-001,Player Profile,Functional,System,High,Medium,"Verify profile name validation for minimum length","Profile name input UI is implemented.","1. Navigate to the Game Setup screen. 2. Enter 'ab' (2 characters) into the name field. 3. Attempt to start the game.","An error message 'Name must be at least 3 characters long' is displayed. The 'Start Game' button is disabled.",N/A,"Unity",1,TASK-S009-T01
TEST-FUNC-PROF-002,Player Profile,Functional,System,High,Medium,"Verify profile name validation for maximum length","Profile name input UI is implemented.","1. Navigate to the Game Setup screen. 2. Attempt to type or paste a 17-character string into the name field.","The input field does not accept the 17th character. The value is capped at 16 characters. The 'Start Game' button is enabled.",17-character test string,"Unity",1,TASK-S009-T01
TEST-FUNC-PROF-003,Player Profile,Functional,System,High,Medium,"Verify profile name validation for invalid characters","Profile name input UI is implemented.","1. Navigate to the Game Setup screen. 2. Enter 'Player!@#' into the name field. 3. Attempt to start the game.","An error message 'Name can only contain letters and numbers' is displayed. The 'Start Game' button is disabled.",N/A,"Unity",1,TASK-S009-T01
TEST-INT-PROF-001,Player Profile,Functional,Integration,High,High,"Verify a new profile is created in the database on game start","`PlayerProfileRepository` is implemented. Game setup flow is integrated.","1. Delete the existing SQLite database file. 2. Launch the game and navigate to the setup screen. 3. Enter a new, valid player name. 4. Start the game. 5. Inspect the newly created database.","A new database file is created. The 'PlayerProfiles' table contains a new record with the correct display name and a unique profile ID.",N/A,"Unity, SQLite Browser",2,TASK-S009-T02
TEST-INT-PROF-002,Player Profile,Functional,Integration,High,High,"Verify an existing profile is retrieved from the database","`PlayerProfileRepository` is implemented. A profile already exists in the database.","1. Ensure a profile with name 'TestPlayer' exists in the database. 2. Launch the game and start a new game with the name 'TestPlayer'. 3. Use debug tools to inspect the profile ID used for the session.","The `GetOrCreateProfileAsync` method returns the existing profile for 'TestPlayer'. No new record is created in the database. The session uses the pre-existing profile ID.",Pre-populated SQLite database,"Unity, NUnit",2,TASK-S009-T02
TEST-FUNC-SETUP-001,Game Setup,Functional,System,High,Medium,"Verify player token selection and in-game representation","Token selection UI is implemented. Game initialization is integrated.","1. On the Game Setup screen, select a specific token (e.g., 'Battleship'). 2. Start the game. 3. Observe the game board and the HUD.","The player's 3D token on the board is the 'Battleship'. The player's icon in the HUD is the 'Battleship'.",3D models and 2D icons for tokens,"Unity",2,TASK-S014-T02
TEST-FUNC-SETUP-002,Game Setup,Functional,System,High,Medium,"Verify AI opponents are assigned unique, unselected tokens","Token selection and AI configuration UI is implemented.","1. Select a token for the human player (e.g., 'Car'). 2. Configure a game with 3 AI opponents. 3. Start the game. 4. Observe the tokens for all 4 players.","All four players have unique tokens. None of the AI players have the 'Car' token.",N/A,"Unity",2,TASK-S014-T02
TEST-FUNC-SETUP-003,Game Setup,Functional,System,High,Medium,"Verify AI difficulty selection is passed to the game state","AI difficulty selection UI is implemented.","1. Configure a 3-player game with AI 1 set to 'Easy' and AI 2 set to 'Hard'. 2. Start the game. 3. Check the application logs or use a debug inspector.","The game initialization log shows that two AI players were created with 'Easy' and 'Hard' difficulties respectively. The live `PlayerState` objects for the AIs contain the correct `ai_difficulty` enum value.",N/A,"Unity, Serilog",2,TASK-S014-T03
TEST-UNIT-RULE-001,Rule Engine,Functional,Unit,Critical,High,"Verify rent calculation for undeveloped monopoly","Rent calculation logic is implemented in RuleEngine.","1. Create a mock GameState where a player owns a full, undeveloped, unmortgaged monopoly. 2. Call the RuleEngine's rent calculation method for one of the properties.","The calculated rent is exactly double the base rent listed on the property card.",Mock GameState object,"NUnit",1,TASK-S002-T02
TEST-UNIT-RULE-002,Rule Engine,Functional,Unit,Critical,High,"Verify rent calculation for property with 3 houses","Rent calculation logic is implemented in RuleEngine.","1. Create a mock GameState where a player owns a property with 3 houses. 2. Call the RuleEngine's rent calculation method.","The calculated rent exactly matches the official rent value for a property with 3 houses.",Mock GameState object,"NUnit",1,TASK-S002-T02
TEST-UNIT-RULE-003,Rule Engine,Functional,Unit,Critical,High,"Verify rent calculation for owning 3 railroads","Rent calculation logic is implemented in RuleEngine.","1. Create a mock GameState where a player owns 3 railroads. 2. Call the RuleEngine's rent calculation method for one of the railroads.","The calculated rent is exactly $100.",Mock GameState object,"NUnit",1,TASK-S002-T02
TEST-UNIT-RULE-004,Rule Engine,Functional,Unit,Critical,High,"Verify rent calculation for owning both utilities","Rent calculation logic is implemented in RuleEngine.","1. Create a mock GameState where a player owns both utilities. 2. Pass a dice roll of 9 to the RuleEngine's rent calculation method.","The calculated rent is exactly $90 (9 * 10).",Mock GameState object,"NUnit",1,TASK-S002-T02
TEST-UNIT-RULE-005,Rule Engine,Functional,Unit,Critical,High,"Verify no rent is calculated for a mortgaged property","Rent calculation logic is implemented in RuleEngine.","1. Create a mock GameState where a player owns a property that is mortgaged. 2. Call the RuleEngine's rent calculation method.","The calculated rent is exactly $0.",Mock GameState object,"NUnit",1,TASK-S002-T02
TEST-UNIT-TURN-001,Game Flow,Functional,Unit,Critical,High,"Verify TurnManager transitions to extra turn on doubles","TurnManager state machine is implemented.","1. Set the TurnManager's state to PostRoll. 2. Provide a roll result that is a double. 3. Tell the state machine to advance.","The TurnManager's new state is PreRollManagement, and the current player index has not changed. The consecutive doubles count for the player is 1.",Mock PlayerState object,"NUnit",2,TASK-S003-T02
TEST-UNIT-TURN-002,Game Flow,Functional,Unit,Critical,High,"Verify TurnManager passes turn on a non-double roll","TurnManager state machine is implemented.","1. Set the TurnManager's state to PostRoll for Player 1 in a 2-player game. 2. Provide a roll result that is not a double. 3. Tell the state machine to advance.","The TurnManager's new state is PreTurn, and the current player index is now Player 2.",Mock GameState object,"NUnit",2,TASK-S003-T02
TEST-UNIT-TURN-003,Game Flow,Functional,Unit,Critical,High,"Verify TurnManager sends player to jail on third consecutive double","TurnManager state machine is implemented.","1. Set up a PlayerState with consecutive doubles count of 2. 2. Set the TurnManager's state to PostRoll. 3. Provide a roll result that is a double. 4. Tell the state machine to advance.","The game logic for sending the player to jail is triggered, and the turn passes to the next player.",Mock PlayerState object,"NUnit",2,TASK-S003-T02
TEST-FUNC-DICE-001,Game Logic,Functional,Unit,Critical,High,"Verify DiceService roll is within the correct range","DiceService is implemented.","1. In a test, call the DiceService's roll method 1000 times. 2. For each of the two dice results, store the value.","All 2000 stored values are integers between 1 and 6, inclusive.",N/A,"NUnit",1,TASK-S007-T01
TEST-PERF-ANIM-001,UI/UX & Performance,Non-Functional,Performance,High,Manual Only,"Verify token movement animation is smooth and meets FPS targets","Token movement animation is implemented.","1. On recommended hardware, play a game at 1920x1080. 2. Trigger multiple token movements. 3. Monitor performance with the Unity Profiler.","The animation is visually smooth. The frame rate does not drop below 45 FPS during the animation.",Recommended spec hardware,"Unity, Unity Profiler",4,TASK-S019-T01
TEST-INT-HUD-001,UI/UX,Functional,Integration,High,Medium,"Verify HUD updates correctly after a financial transaction","HUDController is integrated with the game event system.","1. Start a game. 2. Perform an action that changes a player's cash (e.g., pass GO, pay tax). 3. Observe the HUD.","The cash value displayed in the correct player's HUD panel updates immediately to reflect the new balance from the GameState.",N/A,"Unity",2,TASK-S018-T03
TEST-INT-HUD-002,UI/UX,Functional,Integration,High,Medium,"Verify HUD turn indicator updates correctly","HUDController is integrated with the game event system.","1. Start a 2-player game. 2. Complete the human player's turn. 3. Observe the HUD.","The visual highlight on the human player's panel is removed, and the highlight appears on the AI player's panel.",N/A,"Unity",1,TASK-S018-T03
TEST-UNIT-RULE-006,Rule Engine,Functional,Unit,Critical,High,"Verify 'even building' rule prevents uneven development","Building rule logic is implemented in RuleEngine.","1. Create a mock GameState where a player owns a 3-property monopoly. Property A has 1 house, B and C have 0. 2. Call the RuleEngine to validate building a second house on Property A.","The validation check returns false.",Mock GameState object,"NUnit",2,TASK-S002-T03
TEST-UNIT-RULE-007,Rule Engine,Functional,Unit,Critical,High,"Verify 'even building' rule allows even development","Building rule logic is implemented in RuleEngine.","1. Create a mock GameState where a player owns a 3-property monopoly. Property A has 1 house, B and C have 0. 2. Call the RuleEngine to validate building a house on Property B.","The validation check returns true.",Mock GameState object,"NUnit",1,TASK-S002-T03
TEST-UNIT-RULE-008,Rule Engine,Functional,Unit,High,High,"Verify building is blocked on a mortgaged property","Building rule logic is implemented in RuleEngine.","1. Create a mock GameState where a player owns a full monopoly, but one property is mortgaged. 2. Call the RuleEngine to validate building a house on any of the unmortgaged properties in that set.","The validation check returns false.",Mock GameState object,"NUnit",1,TASK-S002-T03
TEST-UNIT-RULE-009,Rule Engine,Functional,Unit,High,High,"Verify unmortgage cost calculation","Mortgaging rule logic is implemented in RuleEngine.","1. Create a property with a mortgage value of $100. 2. Call the RuleEngine to calculate the unmortgage cost.","The calculated cost is exactly $110 ($100 principal + 10% interest).",Mock Property data,"NUnit",1,TASK-S002-T04
TEST-FUNC-CARD-001,Game Logic,Functional,System,High,Medium,"Verify a 'Move to Space' card works correctly","Card effect executor is implemented.","1. Using a debug tool, force the top card of the Chance deck to be 'Advance to Boardwalk'. 2. Have a player land on a Chance space.","The card UI is shown. After dismissing, the player's token moves directly to the Boardwalk space and the turn ends (unless doubles were rolled to get there).",Debug tool to manipulate deck,"Unity",2,TASK-S005-T03
TEST-FUNC-CARD-002,Game Logic,Functional,System,High,Medium,"Verify a 'Collect from Bank' card works correctly","Card effect executor is implemented.","1. Force the top card to be 'Bank pays you dividend of $50'. 2. Note the player's current cash. 3. Have the player land on a Chance space.","The card UI is shown. After dismissing, the player's cash in the HUD and GameState increases by exactly $50.",Debug tool to manipulate deck,"Unity",1,TASK-S005-T03
TEST-FUNC-CARD-003,Game Logic,Functional,System,High,Medium,"Verify the 'Get Out of Jail Free' card is added to player inventory","Card effect executor is implemented.","1. Force the top card to be 'Get Out of Jail Free'. 2. Have a player land on a Chance space. 3. Check the player's state.","The card is added to the player's inventory (e.g., `get_out_of_jail_cards` count is incremented). The card is NOT returned to the bottom of the deck.",Debug tool to manipulate deck,"Unity",2,TASK-S005-T03
TEST-FUNC-SPACE-001,Game Logic,Functional,System,High,Medium,"Verify landing on 'Go to Jail' space works correctly","Board space controller is implemented.","1. Have a player's move end on the 'Go to Jail' space.","The player's token moves directly to the 'In Jail' section of the board. The player's status is updated to 'InJail'. The player does not collect $200 for passing Go. Their turn immediately ends.",Debug tool to force dice roll,"Unity",2,TASK-S006-T02
TEST-FUNC-SPACE-002,Game Logic,Functional,System,High,Medium,"Verify Income Tax choice and calculation","Board space controller and Net Worth calculation are implemented.","1. Set up a player with known assets (e.g., $500 cash, $1500 in property value, total net worth $2000). 2. Have the player land on 'Income Tax'.","A modal dialog appears presenting two choices: 'Pay $200' and 'Pay 10% ($200)'. Both options are functional.",Debug tool to force dice roll,"Unity",3,TASK-S006-T03
TEST-INT-AI-001,AI System,Functional,Integration,High,Medium,"Verify AI loads difficulty parameters from JSON","AI configuration loader service and basic BT are implemented.","1. Modify `Hard.json` to have an extremely high `propertyAcquisitionPriority`. 2. Start a game with a 'Hard' AI. 3. Let the AI land on an unowned, affordable property. 4. Check the DEBUG logs.","The DEBUG log for the AI's decision shows that it read the parameter from the JSON file. The AI should always choose to buy the property.",Modified AI JSON config,"Unity, Serilog",4,TASK-S012-T02
TEST-INT-AI-002,AI System,Functional,System,High,Medium,"Verify 'Hard' AI prioritizes completing monopolies","AI BT nodes for property acquisition and trading are implemented.","1. Set up a game state where a 'Hard' AI owns 2 of 3 properties in a monopoly, and the 3rd is unowned or owned by another AI. 2. Observe the AI's behavior on its turn.","The 'Hard' AI will aggressively try to acquire the third property, either by buying it, winning it at auction, or proposing a trade for it.",Pre-configured save file,"Unity",8,TASK-S013-T01
TEST-PERF-LOAD-001,Performance,Non-Functional,Performance,Critical,Manual Only,"Verify game load time meets requirements","Save/Load functionality is complete.","1. On recommended hardware with an SSD, ensure a complex save file exists. 2. From the main menu, time the duration from clicking 'Load' to the game board being fully visible and interactive.","The total time elapsed is less than 10 seconds.",Complex save file (`complex_ownership_test.json`), Recommended spec hardware,"Unity, Stopwatch",2,TASK-S022-T03
TEST-FUNC-SAVE-001,Data Persistence,Functional,System,Critical,Medium,"Verify saving is disabled after rolling the dice","Save game flow is implemented.","1. Start a player's turn. The 'Save Game' button is enabled in the pause menu. 2. Click the 'Roll Dice' button. 3. After the dice roll, open the pause menu again.","The 'Save Game' button is now disabled and non-interactive.",N/A,"Unity",1,TASK-S021-T03
TEST-INT-SAVE-001,Data Persistence,Functional,Integration,Critical,High,"Verify save file checksum validation detects corruption","Save/Load repositories are implemented.","1. Save a game to create a valid save file. 2. Manually open the JSON file and change a single character without updating the checksum. 3. Launch the game and navigate to the Load Game screen.","The corresponding save slot is visually marked as 'Corrupted' and the 'Load' button for it is disabled.",N/A,"Unity",2,TASK-S022-T01
TEST-INT-SAVE-002,Data Persistence,Functional,Integration,Critical,High,"Verify save file version check detects incompatibility","Save/Load repositories are implemented.","1. Save a game to create a valid save file. 2. Manually open the JSON file and change the 'version' property to an older, unsupported version number. 3. Launch the game and navigate to the Load Game screen.","The corresponding save slot is visually marked as 'Incompatible Version' and the 'Load' button is disabled.",N/A,"Unity",2,TASK-S022-T01
TEST-INT-TEST-001,Testing,Functional,Integration,Critical,High,"Verify the end-to-end Save/Load integration test passes","`SaveGameRepository`, `LoadGameRepository`, and the integration test itself are implemented.","1. Run the `TestSaveLoadCycle` test from the Unity Test Runner.","The test creates a complex GameState in memory, saves it, loads it, and the deep assertion passes, confirming the loaded state is identical to the original.",N/A,"Unity Test Framework",4,TASK-S031-T02
TEST-INT-TEST-002,Testing,Functional,Integration,Critical,High,"Verify the bankruptcy integration test passes","`BankruptcyService` and the integration test are implemented.","1. Ensure the `near_bankruptcy_test.json` save file is available. 2. Run the `TestBankruptcyProcess` test from the Unity Test Runner.","The test loads the save file, triggers the bankruptcy event, and asserts that all assets were correctly transferred from the debtor to the creditor without any data loss.",`near_bankruptcy_test.json`,"Unity Test Framework",6,TASK-S031-T04
TEST-FUNC-STATS-001,Player Profile,Functional,System,High,Medium,"Verify statistics are updated correctly after a win","Statistics aggregation and persistence are implemented.","1. Check the statistics screen and note the 'Total Games Played' and 'Total Wins'. 2. Play a short game and win. 3. Return to the main menu and check the statistics screen again.","'Total Games Played' and 'Total Wins' have both been incremented by 1. Other stats like average duration have been recalculated.",N/A,"Unity, SQLite Browser",3,TASK-S010-T03
TEST-FUNC-SETTINGS-001,UI/UX,Functional,System,High,Medium,"Verify data management buttons work correctly","Data management logic in the settings menu is implemented.","1. Ensure save files and a statistics database exist. 2. Go to Settings -> 'Delete All Saved Games' and confirm. 3. Go to Settings -> 'Reset Statistics' and confirm.","All files in the save directory are deleted. All data in the statistics and high score tables are cleared. The respective UI screens reflect these changes (empty lists).",Existing save files and stats DB,"Unity, SQLite Browser",3,TASK-S015-T04
TEST-E2E-FULL-001,Full Game Loop,Functional,System,Critical,Manual Only,"Verify a full 2-player game can be played to completion","All core game logic, UI, and AI are implemented.","1. Start a new game with 1 'Medium' AI opponent. 2. Play the game until one player goes bankrupt. 3. Observe all game mechanics.","The game proceeds smoothly without crashes or critical bugs. All rules are enforced correctly. The win/loss condition is triggered, and the correct summary screen is shown.",N/A,"Unity",16,TASK-S016-T03
TEST-DEP-INSTALL-001,Deployment,Functional,System,Critical,Manual Only,"Verify the installer creates a functional application","The Inno Setup script is complete.","1. On a clean Windows 11 machine, run the final installer executable with default options. 2. After installation, launch the game from the desktop shortcut. 3. Play for 2 minutes.","The installation completes successfully. The desktop shortcut works. The game launches and runs without errors.",Clean Windows 11 VM,"Inno Setup installer",2,TASK-S033-T02
TEST-DEP-UNINSTALL-001,Deployment,Functional,System,Critical,Manual Only,"Verify the uninstaller cleanly removes the application but offers to keep user data","The Inno Setup script is complete.","1. Install the game. 2. Create a player profile and a save game. 3. Uninstall the game via 'Apps & features'. 4. When prompted, choose 'No' (do not delete user data). 5. Check file system.","The application is completely removed from Program Files. The user data directory at '%APPDATA%/MonopolyTycoon' and its contents remain intact.",Clean Windows 10 VM,"Inno Setup installer",2,TASK-S033-T02