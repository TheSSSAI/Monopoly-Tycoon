risk_id,risk_category,risk_description,probability,impact,risk_score,priority_level,affected_tasks,root_cause,mitigation_strategy,contingency_plan,monitoring_trigger,owner,due_date,status
RISK-001,Quality,"The Rule Engine incorrectly implements a nuanced or complex official Monopoly rule (e.g., building shortage auction, jail rules), undermining game authenticity and fairness, violating REQ-1-003.",4,5,20,High,"WI-112, WI-521","Ambiguity in interpreting the official Hasbro rulebook; logical error in implementing the complex, state-dependent rules.",Create a 'Rule Bible' document translating every official rule into a specific, testable software requirement. Conduct peer reviews of the Rule Engine code specifically against this document. Implement unit tests for every rule, especially edge cases. Create predefined save files (WI-523) to test specific rule scenarios repeatedly.,"Allocate priority developer time for a hotfix. Use the detailed logging system (WI-512) to trace the incorrect behavior and validate the fix against the 'Rule Bible'.",QA testing identifies a discrepancy between game behavior and the official rulebook. Beta tester feedback reports unexpected game behavior.,Tech Lead,2025-03-15,Open
RISK-002,Technical,"The atomic asset transfer logic for bankruptcy (WI-125) fails mid-transaction, resulting in a corrupted GameState (e.g., assets are lost or duplicated). This can make save files permanently unusable.",3,5,15,High,"WI-125, WI-411, WI-412","Lack of a proper transactional mechanism for complex state changes involving multiple players and the bank. An unexpected exception could leave the GameState in an inconsistent state.",Implement all bankruptcy-related state changes within a try-catch block that performs a deep copy of the GameState before the operation. If any step fails, restore the game state from the copy. Write specific integration tests (WI-522) that simulate failures during the asset transfer process.,Provide a tool for players to submit corrupted save files. Manually analyze and attempt to repair the JSON data or instruct the user to revert to an older save. Prioritize a patch to fix the root cause of the transactional failure.,An error is logged during the bankruptcy process. A player reports a crash or a corrupted save file after another player went bankrupt.,Tech Lead,2025-04-01,Open
RISK-003,Timeline,"Balancing the three AI difficulty levels (WI-223) takes significantly longer than estimated, as making the 'Hard' AI challenging but fair requires extensive iteration and playtesting.",4,3,12,Medium,"WI-223","The strategic complexity of Monopoly is high, and AI decision-making (especially for trades and property management) is difficult to model effectively. The difference between 'Medium' and 'Hard' may not be significant enough initially.",Use data-driven AI parameters from an external JSON file (WI-222) to allow for rapid tuning without recompiling. Focus initial development on creating a competent 'Medium' AI, then layer on more aggressive/strategic behaviors for 'Hard' and sub-optimal behaviors for 'Easy'.,If balancing proves too time-consuming, release with less distinct difficulty levels (e.g., 'Normal' and 'Expert') and refine the third level in a post-launch patch. Use player feedback to guide tuning priorities.,Playtesting feedback indicates the 'Hard' AI is too easy to beat or makes illogical decisions. Internal QA cannot consistently differentiate between AI difficulty levels.,AI Lead,2025-06-01,Open
RISK-004,Technical,"The save/load data migration mechanism (WI-413) contains a bug that corrupts or destroys a user's older save files during the upgrade process, leading to permanent loss of player progress.",2,5,10,Medium,"WI-413, WI-412","The logic for transforming data between schema versions is complex and prone to off-by-one or data type errors. Failure to handle all edge cases in old data can lead to migration failure.",The migration process must be atomic: 1. Create a backup of the original file. 2. Attempt the migration on a copy. 3. If successful, replace the original file. 4. If it fails, restore the backup and mark the file as 'incompatible' (WI-412). The process must be covered by extensive unit and integration tests using real-world old save files.,If a bug is discovered in a released version, disable the automatic migration feature in the next patch and provide instructions for users to not update if they wish to keep their old saves. Develop a standalone data migration tool that users can run optionally.,A user reports that their save file disappeared or became corrupted after updating the game. An error is logged by the DataMigrationService.,Data Architect,2025-05-15,Open
RISK-005,Quality,"The responsive UI for different aspect ratios (16:9, 16:10, 21:9) has bugs, leading to overlapping elements, unclickable buttons, or distorted text on less common resolutions, violating REQ-1-071.",4,3,12,Medium,"WI-322, WI-311, WI-312","Unity's UI anchoring and scaling system is complex. A single improperly configured panel can break the layout for an entire screen on a specific aspect ratio. Testing on all target ratios is often overlooked.",Establish a strict UI development standard using a combination of Anchors, Canvas Scalers, and Layout Groups. Every new UI screen must be reviewed and tested against all three target aspect ratios in the Unity editor before the task is considered complete.,If major issues are found late in development, prioritize fixing the most common 16:9 resolution first, and use letterboxing/pillarboxing as a temporary fallback for other ratios to ensure functionality over perfect aesthetics. Schedule fixes for other ratios in a subsequent patch.,QA testing on an ultrawide (21:9) or 16:10 monitor reveals UI elements are off-screen or overlapping. Player feedback includes screenshots of broken UI layouts.,UI Lead,2025-03-01,Open
RISK-006,Technical,"Decoupling the core game logic (WI-112) from the Unity presentation layer (WI-323) leads to complex integration challenges, particularly with state synchronization and event handling, causing visual bugs (e.g., token on wrong space).",3,4,12,Medium,"WI-112, WI-323","The communication layer between the pure C# logic and Unity's MonoBehaviour world can be a source of bugs, race conditions, and performance bottlenecks if not architected cleanly.",Implement a robust, uni-directional data flow using a messaging or event queue system. The core logic should publish events (e.g., `PlayerMoved`, `RentPaid`), and the Unity view layer should only subscribe and react to these events, never modifying the core state directly. Define the event contracts early.,If the event system becomes too complex, revert to a simpler direct-call-with-callbacks model for critical paths, accepting the tighter coupling as a trade-off for stability. Increase the number of integration tests that verify visual state matches logical state after an action.,During gameplay testing, the UI (e.g., cash display) does not match the logical state recorded in the logs. Visual animations are out of sync with turn progression.,Tech Lead,2025-02-15,Open
RISK-007,Performance,"The game fails to maintain a consistent 60 FPS on recommended hardware, particularly in the late game with many visual effects and assets on screen, violating REQ-1-014.",3,4,12,Medium,"WI-321, WI-323, WI-324","High-quality 3D models, textures, and visual effects (REQ-1-005) are performance-intensive. Poor optimization of assets or inefficient C# scripts can lead to frame drops and stuttering.",Establish a strict performance budget for assets (poly count, texture size). Conduct regular performance profiling sessions using the Unity Profiler throughout the development cycle, not just at the end. Optimize critical code paths identified in profiling.,If performance targets are not met, implement graphics quality settings (Low, Medium, High) that allow users to disable or reduce performance-intensive features like advanced visual effects or anti-aliasing. Reduce the complexity of 3D models for the 'Low' setting.,The average FPS during a typical late-game scenario (multiple developed properties) drops below 60 on a machine matching the recommended specs. The Unity Profiler shows consistent CPU or GPU spikes.,Performance Engineer,2025-06-15,Open
RISK-008,External,"The official Hasbro Monopoly rules (2024 baseline) required by REQ-1-003 are ambiguous, not publicly available in sufficient detail, or are subject to change, leading to rework of the Rule Engine (WI-112).",2,4,8,Medium,"WI-112","Reliance on an external, specific, and potentially proprietary set of rules that may not be perfectly documented for software implementation.",Purchase the official 2024 board game and use its printed rulebook as the primary source of truth. Document any interpretations made for ambiguous rules in the project's 'Rule Bible' and get stakeholder sign-off early. Isolate rule-specific values (e.g., tax amounts, salaries) in configuration files.,If a rule is found to be incorrect after implementation, create a bug report and prioritize it based on its impact on gameplay. The decoupled Rule Engine should make it easier to fix without affecting other systems.,A discrepancy is found between the implemented logic and a newly discovered official ruling or clarification from Hasbro. A stakeholder identifies a rule that does not match their understanding of the 2024 baseline.,Project Manager,2025-02-01,Open
RISK-009,Operational,"The uninstaller script (WI-531) has a bug that either fails to remove all game files or, worse, deletes the user's personal data (`%APPDATA%/MonopolyTycoon/`) when they chose to keep it, violating REQ-1-100.",2,5,10,Medium,"WI-531","Scripting errors in the Inno Setup installer are easy to make, and the destructive nature of an uninstaller makes any bug critical. Insufficient testing on different system configurations can miss edge cases.",Conduct rigorous, scripted manual testing of the uninstaller on clean virtual machines for all target OS versions (Windows 10, 11). The test script must cover all user choices (keep/delete data) and states (with/without existing data). The default option for the data removal prompt must be 'No' (keep).,If a bug is discovered in a released installer, immediately pull the installer from distribution channels. Release a patched installer as a high-priority hotfix and provide support instructions for affected users.,QA testing finds that user data is deleted when it should be kept. A user reports that after reinstalling, their old save games are gone despite choosing not to delete them.,Release Manager,2025-07-01,Open
RISK-010,Technical,"The dynamic theming system (WI-324) fails to properly unload assets when switching themes, leading to a memory leak that can degrade performance over time or crash the application after multiple theme changes.",3,3,9,Medium,"WI-324, WI-312","Dynamic asset loading and unloading in Unity requires careful memory management. Failure to release all references to old assets (materials, textures, audio clips) before loading new ones is a common cause of memory leaks.",Use the Unity Profiler's Memory module specifically to take snapshots before and after theme switches to identify any unreleased assets. Implement the theming system using Unity's Addressable Asset System, which is designed for more robust memory management.,If a leak proves difficult to fix, disable theme switching during an active game session and only allow it from the main menu, which would require a full scene reload and naturally clear the memory. This reduces user flexibility but improves stability.,The application's memory usage in the Task Manager consistently increases after each theme switch and does not return to the baseline. The Unity Memory Profiler shows orphaned assets after a theme change.,Performance Engineer,2025-05-01,Open
RISK-011,Quality,"The coverage requirement of 70% for unit tests (WI-521) is met, but the tests are low-quality (e.g., not testing edge cases), leading to a false sense of security and bugs in the core logic.",3,3,9,Medium,"WI-521, WI-112","The team focuses on the quantitative metric (70%) rather than the qualitative goal of ensuring correctness. Pressure to meet the metric can lead to trivial tests that don't validate complex behavior.",Mandate that all new code for the core logic library be submitted with corresponding unit tests in the same pull request. Code reviews must assess the quality and thoroughness of the tests, not just the existence of them. Use mutation testing to assess test quality if time permits.,If critical bugs are found in areas with high test coverage, conduct a "testing post-mortem" to identify gaps in the testing strategy. Dedicate a "bug-fix-and-test-hardening" sprint to improve the quality of existing tests.,Critical bugs are found by QA or players in modules that have >70% unit test coverage. A developer points out that a complex logical path is not covered by any existing test despite high overall coverage.,QA Lead,2025-04-15,Open
RISK-012,Operational,"The logging system (WI-512) inadvertently logs Personally Identifiable Information (PII) other than the profile name, violating REQ-1-022 and creating a privacy risk.",2,4,8,Medium,"WI-512, WI-513","A developer adds a new log message containing sensitive data from an exception or object dump without considering the PII sanitization requirement.",Implement a wrapper around the Serilog logger that automatically scrubs or filters data before logging. All pull requests must be scanned for new logging statements, which must be explicitly reviewed for potential PII leaks. Add a pre-commit hook that scans for common PII patterns in new log messages.,If a PII leak is discovered in a released version, immediately release a patch that removes the offending log message. Advise users to delete their existing log files.,A manual review of the log files reveals sensitive information, such as a user's machine name, username, or IP address (if any network code were ever added).,Security Lead,2025-03-20,Open
RISK-013,Resource,"The project has a key person dependency on a single developer with deep expertise in a critical, complex area like the Rule Engine or AI Behavior Tree system. If this person becomes unavailable, the project timeline could be severely impacted.",2,4,8,Medium,"WI-112, WI-223","Specialized knowledge is not effectively shared across the team. Insufficient documentation or pair programming practices.",Enforce a policy of pair programming for all high-complexity tasks (Risk Score > 12). Require that all core systems (Rule Engine, AI, Save/Load) have comprehensive technical documentation (WI-532). Conduct regular knowledge-sharing sessions where lead developers explain their system architecture to the rest of the team.,If a key person is lost, immediately halt new feature development in that area and allocate time for another developer to ramp up using the existing documentation and code. Adjust the project timeline and scope with stakeholders.,A developer with unique knowledge of a core system goes on unplanned leave, and no other team member is confident enough to modify or debug that system.,Project Manager,2025-02-10,Open