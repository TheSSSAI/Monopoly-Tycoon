Title,Description,Type,Status,Priority,Assignee,Reporter,Due Date,Estimate,Labels,Sprint,Epic,Project,Attachments,Comments,Parent ID,Dependencies,Created At,Updated At,Skills Required
"Initialize Git Repository","Create a new Git repository on the version control platform. Configure a standard Unity/.NET .gitignore file to exclude unnecessary files (Library, Temp, build artifacts).","Task","Backlog","Critical","devops@project.com","pm@project.com","",2,"setup,git","Sprint 1","Project Foundation & Core Systems","Monopoly Tycoon","","This is the first task for the entire project.","","","2024-01-01 09:00","2024-01-01 09:00","Git"
"Create Solution and Project Structure","Create a Visual Studio 2022 solution. Inside it, create the Unity project folder structure and the .NET 8 class library projects: DomainLogic, AI, Infrastructure, and Testing. Reference the core libraries from the Unity project.","Task","Backlog","Critical","lead_dev@project.com","pm@project.com","",4.5,"architecture,setup","Sprint 1","Project Foundation & Core Systems","Monopoly Tycoon","","","TASK-FOUND-001","","2024-01-01 09:00","2024-01-01 09:00","Unity,Visual Studio,.NET"
"Enforce Coding Standards","Configure code analysis tools (e.g., .editorconfig, Roslyn analyzers) in the Visual Studio solution to enforce the Microsoft C# Coding Conventions as per REQ-1-024.","Task","Backlog","High","lead_dev@project.com","pm@project.com","",0.5,"quality,setup","Sprint 1","Project Foundation & Core Systems","Monopoly Tycoon","","","TASK-FOUND-002","","2024-01-01 09:00","2024-01-01 09:00","Visual Studio"
"Implement Logging Service with Serilog","Create an `ILogger` interface and a `LoggingService` class in the Infrastructure project. Add Serilog NuGet packages. Configure the logger to output structured JSON to the console for initial debugging.","Task","Backlog","Critical","backend_dev@project.com","pm@project.com","",3,"logging,infrastructure","Sprint 1","Project Foundation & Core Systems","Monopoly Tycoon","","","TASK-FOUND-002","","2024-01-01 09:00","2024-01-01 09:00","C#,Serilog"
"Configure Rolling File Sink and Policies","Configure the Serilog sink to write to a rolling file in the `'%APPDATA%/MonopolyTycoon/logs'` directory. Implement the retention policy: retain files for a maximum of 7 days or a total size of 50 MB, whichever is reached first (REQ-1-021).","Task","Backlog","Critical","backend_dev@project.com","pm@project.com","",4.2,"logging,infrastructure","Sprint 1","Project Foundation & Core Systems","Monopoly Tycoon","","","TASK-LOG-001","","2024-01-01 09:00","2024-01-01 09:00","C#,Serilog"
"Implement PII Sanitization Filter","Create a Serilog enricher or filter to ensure no Personally Identifiable Information (PII) is written to logs, with the sole exception of the user-provided profile name (REQ-1-022). This is a preventative measure.","Task","Backlog","High","backend_dev@project.com","pm@project.com","",0.8,"logging,security","Sprint 1","Project Foundation & Core Systems","Monopoly Tycoon","","","TASK-LOG-001","","2024-01-01 09:00","2024-01-01 09:00","C#,Serilog"
"Implement Global Exception Handler Hook","Implement the mechanism to catch all unhandled exceptions at the application level. This involves subscribing to events like `AppDomain.CurrentDomain.UnhandledException` and `Application.logMessageReceived` in Unity for thread-safe error catching.","Task","Backlog","Critical","lead_dev@project.com","pm@project.com","",4,"error-handling,stability","Sprint 1","Project Foundation & Core Systems","Monopoly Tycoon","","","TASK-FOUND-002","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity"
"Create Modal Error Dialog UI","In Unity, create a new scene or a persistent canvas for system-level dialogs. Design and implement a UI prefab for the modal error dialog. It must include text fields for the message, error ID, and log path, and a 'Close' button.","Task","Backlog","Critical","ui_dev@project.com","pm@project.com","",4.2,"ui,error-handling","Sprint 1","Project Foundation & Core Systems","Monopoly Tycoon","","","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Integrate Handler with Logging and UI","Wire the global exception handler to perform its full sequence: generate a unique error ID, call the LoggingService to write the full exception details with the ID, then call a UI service to display the modal error dialog with the same ID and log path.","Task","Backlog","Critical","lead_dev@project.com","pm@project.com","",5.5,"error-handling,stability,integration","Sprint 1","Project Foundation & Core Systems","Monopoly Tycoon","","","TASK-ERR-001,TASK-ERR-002,TASK-LOG-001","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity"
"Create Test Harness for Exception Handling","Implement a simple debug UI or console command that allows testers to intentionally throw different types of unhandled exceptions to validate the global error handler.","Task","Backlog","Medium","qa_engineer@project.com","pm@project.com","",0.8,"testing,debug","Sprint 1","Project Foundation & Core Systems","Monopoly Tycoon","","","TASK-ERR-003","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity"
"Define and Implement PlayerState Class","In the DomainLogic project, create the `PlayerState.cs` file. Add all required properties from REQ-1-031, such as `player_id`, `cash`, `current_position`, `status` enum (e.g., Active, InJail, Bankrupt), `ai_difficulty` enum, etc., using appropriate C# data types.","Task","Backlog","Critical","backend_dev@project.com","pm@project.com","",3,"domain-model,data-model","Sprint 1","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-FOUND-002","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Define Property Data Structures","Create classes or structs for different property types (Deed, Railroad, Utility) containing fields for name, price, rent levels, mortgage value, house cost, and color group. These should be engine-agnostic.","Task","Backlog","Critical","backend_dev@project.com","pm@project.com","",3,"domain-model,data-model","Sprint 1","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-FOUND-002","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Create Board Data Asset","Create a data asset (e.g., a JSON file or ScriptableObject) that contains the data for all 40 board spaces, using the structures defined in TASK-DOM-002. Populate it with the correct data for a standard US Monopoly board.","Task","Backlog","Critical","backend_dev@project.com","pm@project.com","",3,"data-model,configuration","Sprint 1","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-DOM-002","","2024-01-01 09:00","2024-01-01 09:00","JSON,Data Entry"
"Design and Implement GameState Class","In the DomainLogic project, create `GameState.cs`. This class will act as the aggregate root for the game. It must contain a list of `PlayerState` objects, the state of all properties on the board (ownership, houses), the bank's state (houses/hotels remaining), the state of the card decks, and current game metadata (turn number, active player ID).","Task","Backlog","Critical","lead_dev@project.com","pm@project.com","",5.5,"domain-model,data-model,architecture","Sprint 1","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-DOM-001,TASK-DOM-002","","2024-01-01 09:00","2024-01-01 09:00","C#,Data Modeling"
"Unit Test GameState Serialization","Create unit tests that construct a mock `GameState` object with sample data, serialize it to a JSON string using `System.Text.Json`, deserialize it back into a new object, and assert that the deserialized object is identical to the original.","Task","Backlog","High","backend_dev@project.com","pm@project.com","",3.2,"testing,serialization","Sprint 1","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-DOM-004","","2024-01-01 09:00","2024-01-01 09:00","C#,NUnit,System.Text.Json"
"Develop Basic Inno Setup Script","Create the initial `MonopolyTycoon.iss` script. Define application metadata, create the wizard pages for license, directory selection (US-002), and additional tasks (desktop shortcut - US-003). Define the `[Files]` section to package the Unity build output.","Task","Backlog","High","devops@project.com","pm@project.com","",5,"build,installer","Sprint 1","Build & Distribution","Monopoly Tycoon","","Requires a compiled game build to be available for packaging.","","","2024-01-01 09:00","2024-01-01 09:00","Inno Setup"
"Implement Scene Management Service","Create a singleton service in Unity to manage loading and unloading scenes (e.g., MainMenu, GameBoard, GameSetup). This will handle transitions between the major parts of the application.","Task","Backlog","Critical","ui_dev@project.com","pm@project.com","",4,"ui,architecture","Sprint 2","Main Menu & Game Setup Flow","Monopoly Tycoon","","","","2024-01-01 09:00","2024-01-01 09:00","Unity,C#"
"Implement Main Menu UI and Controller","Create the `MainMenu.scene`. Design and implement the UI layout with buttons for 'New Game', 'Load Game', 'Settings', 'Tutorial', 'Rulebook', 'Privacy', and 'Quit'. Hook up the buttons to the Scene Management Service.","Task","Backlog","Critical","ui_dev@project.com","pm@project.com","",6,"ui,main-menu","Sprint 2","Main Menu & Game Setup Flow","Monopoly Tycoon","","","TASK-UI-001","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Implement Profile Name Input and Validation","Create the text input field for the player's profile name. Implement real-time validation logic to enforce the 3-16 character alphanumeric rule (REQ-1-032). Display clear error messages for invalid input.","Task","Backlog","Critical","ui_dev@project.com","pm@project.com","",3,"ui,game-setup,validation","Sprint 2","Main Menu & Game Setup Flow","Monopoly Tycoon","","","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Implement Token Selection UI","Create a UI component (e.g., a grid or carousel) to display the 8+ selectable player tokens. Implement the selection logic so that clicking a token highlights it and stores the choice.","Task","Backlog","Critical","ui_dev@project.com","pm@project.com","",4,"ui,game-setup","Sprint 2","Main Menu & Game Setup Flow","Monopoly Tycoon","","","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Implement AI Opponent Configuration UI","Create UI controls to select the number of AI opponents (1-3). Based on this selection, dynamically display a configuration panel for each AI, containing a dropdown/button group to set its difficulty ('Easy', 'Medium', 'Hard').","Task","Backlog","Critical","ui_dev@project.com","pm@project.com","",4.2,"ui,game-setup","Sprint 2","Main Menu & Game Setup Flow","Monopoly Tycoon","","","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Integrate Setup Screen and Game Initialization","Implement the 'Start Game' button logic. This will gather all the configured settings (player name, token, AI count, AI difficulties), create a `GameConfiguration` object, and pass it to a `GameCreationService`. This service will then initialize the `GameState` and load the GameBoard scene.","Task","Backlog","Critical","lead_dev@project.com","pm@project.com","",4.2,"integration,game-setup,game-flow","Sprint 2","Main Menu & Game Setup Flow","Monopoly Tycoon","","","TASK-SETUP-001,TASK-SETUP-002,TASK-SETUP-003,TASK-DOM-004","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity"
"Set up Main Gameplay Scene","Create the `GameBoard.scene`. Configure the isometric camera (REQ-1-005). Set up global lighting (e.g., directional lights, ambient light) and post-processing effects to establish the visual style.","Task","Backlog","Critical","3d_artist@project.com","pm@project.com","",3,"3d,scene-setup","Sprint 3","Core Gameplay Loop & Presentation","Monopoly Tycoon","","","","2024-01-01 09:00","2024-01-01 09:00","Unity 3D"
"Import and Place Board Assets","Import the final 3D models for the game board, houses, and hotels. Place them in the scene. Create and apply materials and textures to match the high-quality visual target. This includes setting up visual markers for property ownership and mortgage status.","Task","Backlog","Critical","3d_artist@project.com","pm@project.com","",5,"3d,art-integration","Sprint 3","Core Gameplay Loop & Presentation","Monopoly Tycoon","","","TASK-3D-001","","2024-01-01 09:00","2024-01-01 09:00","Unity 3D"
"Design and Implement Turn FSM","Design a Finite State Machine (FSM) for the player turn with states for PreRoll, AwaitingRollInput, Movement, Action, PostRoll (handling doubles), and EndTurn. Implement the core `TurnManager` class to drive this FSM.","Task","Backlog","Critical","lead_dev@project.com","pm@project.com","",7.3,"state-machine,game-flow,architecture","Sprint 3","Core Gameplay Loop & Presentation","Monopoly Tycoon","","","TASK-DOM-004","","2024-01-01 09:00","2024-01-01 09:00","C#,Software Architecture"
"Implement Dice Service","Create a `DiceService` that provides a method to roll two dice. The roll must use a cryptographically secure random number generator to produce two integers from 1 to 6. The service should return a result object containing the value of each die and a boolean indicating if it was a double.","Task","Backlog","Critical","backend_dev@project.com","pm@project.com","",3,"rules-engine,game-logic","Sprint 3","Domain Model & Rule Engine","Monopoly Tycoon","","","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Board Space Pathing System","Create a data structure or component on the game board that defines the world coordinates for the center of each of the 40 spaces. Create a service that can generate a path (a sequence of coordinates) for a token to follow from a start space to an end space.","Task","Backlog","Critical","unity_dev@project.com","pm@project.com","",3,"game-logic,movement","Sprint 3","Core Gameplay Loop & Presentation","Monopoly Tycoon","","","TASK-3D-002","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity 3D"
"Implement Token Animation Controller","Create a `TokenController` script. This script will take a path from the `BoardPathingService` and use a tweening library or coroutines to animate the token's transform along the path. The animation speed must be controlled by a parameter derived from the game settings.","Task","Backlog","Critical","unity_dev@project.com","pm@project.com","",4.2,"animation,movement","Sprint 3","Core Gameplay Loop & Presentation","Monopoly Tycoon","","","TASK-MOVE-001","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity 3D"
"Implement Camera Follow Logic","Create a `CameraController` script that smoothly follows the currently moving token. The camera should maintain its isometric angle but pan to keep the active token in the center of the view during its movement phase.","Task","Backlog","High","unity_dev@project.com","pm@project.com","",2.8,"camera,3d","Sprint 3","Core Gameplay Loop & Presentation","Monopoly Tycoon","","","TASK-MOVE-002","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity 3D"
"Implement Player Movement and GO Salary Logic","In the Rule Engine, create a method that takes a `GameState` and a dice roll total, and returns an updated `GameState`. This method will calculate the new board position for the active player, handling the wrap-around at space 39. It will also check if the player passed or landed on GO and update their cash accordingly.","Task","Backlog","Critical","backend_dev@project.com","pm@project.com","",4.2,"rules-engine,game-logic","Sprint 3","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-DOM-004","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Doubles and 3-Doubles-to-Jail Rule","Extend the turn management logic to handle the doubles rule. After a roll, check if it was a double. If so, increment a `consecutive_doubles` counter in the active `PlayerState`. If the count reaches 3, set the player's status to `InJail` and end their turn. If less than 3, flag for an extra turn. If not a double, reset the counter to 0.","Task","Backlog","Critical","backend_dev@project.com","pm@project.com","",6.3,"rules-engine,game-logic,state-machine","Sprint 3","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-RULE-001,TASK-RULE-002","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Create Player Panel UI Prefab","In Unity, create a UI prefab for a single player's information panel. It should include text elements for name and cash, and an image element for the token icon. The layout must be built with anchors to be responsive.","Task","Backlog","Critical","ui_dev@project.com","pm@project.com","",3,"ui,hud","Sprint 3","Core Gameplay Loop & Presentation","Monopoly Tycoon","","","","2024-01-01 09:00","2024-01-01 09:00","Unity UI"
"Implement Game HUD Controller","Create a `GameHUDController` that dynamically instantiates the required number of Player Panels at the start of a game. This controller will be responsible for populating the panels with initial data.","Task","Backlog","Critical","ui_dev@project.com","pm@project.com","",4.2,"ui,hud","Sprint 3","Core Gameplay Loop & Presentation","Monopoly Tycoon","","","TASK-HUD-001","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Implement Event-Driven HUD Updates","Refactor the HUD controllers to subscribe to game events (e.g., `OnTurnChanged`, `OnPlayerCashChanged`, `OnPlayerBankrupt`). The HUD should update its display only in response to these events, decoupling it from the game logic.","Task","Backlog","Critical","lead_dev@project.com","pm@project.com","",6.3,"ui,hud,architecture,event-driven","Sprint 3","Core Gameplay Loop & Presentation","Monopoly Tycoon","","","TASK-HUD-002,TASK-TURN-001","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity"
"Design and Implement Reusable Modal Prefab","Create a Unity UI prefab for a generic modal dialog. It should include a background scrim to dim the main view, a main panel, a title text element, a content area, and a horizontal layout group for buttons. Create a `ModalDialogController` script to manage it.","Task","Backlog","Critical","ui_dev@project.com","pm@project.com","",4.2,"ui,architecture","Sprint 4","Player Actions & UI","Monopoly Tycoon","","","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Integrate Modal System with Game Flow","Create a `UIManager` service that manages the instantiation and display of modals. The `TurnManager` will call this service to show a modal, which will pause the `TurnManager`'s state machine. The modal's button callback will then resume the `TurnManager`.","Task","Backlog","Critical","lead_dev@project.com","pm@project.com","",4.3,"ui,integration,game-flow","Sprint 4","Player Actions & UI","Monopoly Tycoon","","","TASK-UI-006,TASK-TURN-001","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity"
"Implement 'Buy Property' Transaction","Create the logic that allows a player to buy an unowned property. This involves checking if the player has sufficient cash, deducting the cost, and adding the property to their list of owned properties.","Task","Backlog","Critical","backend_dev@project.com","pm@project.com","",3.2,"rules-engine,game-logic","Sprint 4","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-DOM-004","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Property Auction Logic","Implement the state machine for an auction. The logic must handle the clockwise bidding order, starting with the player who declined the purchase. It must track active bidders, the current high bid, and determine the winner when only one bidder remains. Bids are for cash only.","Task","Backlog","High","backend_dev@project.com","pm@project.com","",7.2,"rules-engine,game-logic,state-machine","Sprint 4","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-DOM-004","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Rent Calculation Logic","Create a service or method to calculate the correct rent for any given property. This logic must account for property type (deed, railroad, utility), ownership of a full monopoly, number of houses/hotels, and mortgage status. For utilities, it must also take the last dice roll as input.","Task","Backlog","Critical","backend_dev@project.com","pm@project.com","",6,"rules-engine,game-logic","Sprint 5","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-DOM-004","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Rent Payment Transaction","Create the logic to automatically transfer the calculated rent amount from the landing player to the property owner. If the paying player has insufficient cash, this must trigger the bankruptcy flow.","Task","Backlog","Critical","backend_dev@project.com","pm@project.com","",3.2,"rules-engine,game-logic","Sprint 5","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-RULE-008,TASK-RULE-016","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Asset Liquidation and Solvency Check","Create a method that calculates a player's total liquidatable assets (cash + sale value of all buildings + mortgage value of all properties). This will be used to determine if a player can cover a debt. Implement the logic to automatically sell all buildings and mortgage all properties.","Task","Backlog","Critical","backend_dev@project.com","pm@project.com","",6.2,"rules-engine,game-logic,bankruptcy","Sprint 5","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-RULE-011","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Asset Transfer for Player-to-Player Bankruptcy","Implement the logic for when a player goes bankrupt to another player. All of the bankrupt player's assets (cash, properties, cards) must be transferred to the creditor player. Mortgaged properties remain mortgaged, and the new owner must pay interest to unmortgage them.","Task","Backlog","Critical","backend_dev@project.com","pm@project.com","",4.3,"rules-engine,game-logic,bankruptcy","Sprint 5","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-RULE-016","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement 'Pay Fine' and 'Use Card' Jail Actions","Create methods in the Rule Engine to handle the 'Pay Fine' and 'Use Card' actions. 'Pay Fine' should deduct $50, change player status to 'Active', and reset jail turn counters. 'Use Card' should decrement the card count, return the card to the correct deck, change status to 'Active', and reset counters.","Task","Backlog","Critical","backend_dev@project.com","pm@project.com","",4.2,"rules-engine,game-logic","Sprint 6","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-DOM-004","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement 'Roll for Doubles' Jail Logic","Implement the logic for attempting to roll for doubles. If successful, change status to 'Active' and move the player, but do not grant an extra turn. If unsuccessful, decrement the `jail_turns_remaining` counter and end the turn. This logic path is for the first two attempts.","Task","Backlog","Critical","backend_dev@project.com","pm@project.com","",3,"rules-engine,game-logic","Sprint 6","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-RULE-001","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement 3rd Turn Jail Logic and Forced Payment","Implement the specific logic for the third and final roll attempt in jail. If the roll is not doubles, the system must force a $50 payment. After payment, the player moves the sum of that third roll. If they cannot pay, the bankruptcy flow must be triggered.","Task","Backlog","High","backend_dev@project.com","pm@project.com","",4.5,"rules-engine,game-logic,integration","Sprint 6","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-RULE-005,TASK-RULE-016","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Mortgage/Unmortgage Logic","Create methods in the Rule Engine to mortgage and unmortgage a property. Mortgaging adds half the property's value to player cash and flags the property. Unmortgaging deducts the mortgage value plus 10% interest and unflags the property.","Task","Backlog","Critical","backend_dev@project.com","pm@project.com","",4.2,"rules-engine,game-logic","Sprint 6","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-DOM-004","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement 'Even Building' Validation Logic","Create a validation method that checks if a build/sell action is legal according to the even-build rule. For building, it must check that the target property does not have more houses than any other in its color group. For selling, it must check that the target has the most houses in its group.","Task","Backlog","Critical","backend_dev@project.com","pm@project.com","",6.2,"rules-engine,game-logic,validation","Sprint 6","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-DOM-004","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement 'Build House' Transaction","Create the logic for purchasing a house. It must first validate that the player owns a monopoly, the property is not mortgaged, the even-build rule is met, the player has sufficient cash, and the bank has houses available. If valid, it updates player cash, bank supply, and property state.","Task","Backlog","Critical","backend_dev@project.com","pm@project.com","",5,"rules-engine,game-logic","Sprint 6","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-RULE-012","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement 'Build Hotel' Transaction","Create the logic for upgrading 4 houses to a hotel. It must validate that all properties in the monopoly have 4 houses, the player has cash, and the bank has hotels. A successful transaction deducts cash, decrements the bank's hotel supply, increments its house supply by 4, and updates the property state.","Task","Backlog","High","backend_dev@project.com","pm@project.com","",5,"rules-engine,game-logic","Sprint 6","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-RULE-013","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Building Shortage Auction Logic","Implement the logic for auctioning the last available buildings if multiple players wish to buy them. This involves identifying eligible buyers, then triggering the auction service (from TASK-RULE-010) sequentially for each available building.","Task","Backlog","Medium","backend_dev@project.com","pm@project.com","",3.2,"rules-engine,game-logic,integration","Sprint 6","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-RULE-010,TASK-RULE-013","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Design and Implement Property Management UI Layout","Create the main UI prefab for the Property Management screen. It should include a scrollable area to display property cards and a persistent view of the player's cash. Create a `PropertyCard.prefab` for displaying a single property's details.","Task","Backlog","Critical","ui_dev@project.com","pm@project.com","",6,"ui,feature","Sprint 6","Player Actions & UI","Monopoly Tycoon","","","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Implement Property Management Controller and Data Binding","Write the controller script that populates the UI with the current player's properties from the `GameState`. It must group properties by color. The controller will handle button clicks for build/sell/mortgage and call the appropriate Rule Engine methods.","Task","Backlog","Critical","ui_dev@project.com","pm@project.com","",7.2,"ui,feature,integration","Sprint 6","Player Actions & UI","Monopoly Tycoon","","","TASK-PROP-001,WI-010","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity UI"
"Implement Dynamic UI Control State Logic","Implement the logic within the Property Management Controller that dynamically enables or disables the action buttons (Build, Sell, Mortgage, Unmortgage) based on the game rules. This includes checking for monopolies, the even-build rule, player cash, bank supply, etc. and providing informative tooltips for disabled buttons.","Task","Backlog","High","ui_dev@project.com","pm@project.com","",6.2,"ui,feature,validation","Sprint 6","Player Actions & UI","Monopoly Tycoon","","","TASK-PROP-002","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity UI"
"Design and Implement Two-Panel Trade UI Layout","Create the main `TradeScreen.prefab`. It should have two primary panels, each containing a scrollable list for properties and cards, and a validated input field for cash. Also include areas for player info and action buttons.","Task","Backlog","Critical","ui_dev@project.com","pm@project.com","",7,"ui,feature","Sprint 7","Player Actions & UI","Monopoly Tycoon","","","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Implement Trade Controller and Data Binding","Write the `TradeController.cs` script. It will manage the state of the trade UI. It must populate the asset lists for both the human player and the selected AI partner. It will manage a temporary `TradeOffer` object that is updated as the player adds/removes items.","Task","Backlog","Critical","ui_dev@project.com","pm@project.com","",8.3,"ui,feature,state-management","Sprint 7","Player Actions & UI","Monopoly Tycoon","","","TASK-TRADE-001","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity UI"
"Implement Trade Offer Validation and Submission","Add real-time validation logic to the `TradeController`. Developed properties should be unselectable. Cash inputs must be validated against the player's balance. The 'Propose Trade' button should be disabled unless the offer is valid. Submitting the trade should pass the `TradeOffer` object to the AI for evaluation.","Task","Backlog","High","ui_dev@project.com","pm@project.com","",6.2,"ui,feature,validation,integration","Sprint 7","Player Actions & UI","Monopoly Tycoon","","","TASK-TRADE-002,TASK-AI-005","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity UI"
"Implement Incoming Offer Display Logic","Add functionality to the `TradeController` to accept an incoming `TradeOffer` object and pre-populate the UI to display it to the player. This mode should show the 'Accept', 'Decline', and 'Counter-Offer' buttons.","Task","Backlog","High","ui_dev@project.com","pm@project.com","",3.2,"ui,feature","Sprint 7","Player Actions & UI","Monopoly Tycoon","","","TASK-TRADE-002","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity UI"
"Implement AI Trade Evaluation Logic","Create a core AI service that evaluates a trade offer. This will likely use a utility scoring system that assigns a value to properties based on their potential to form monopolies for the AI or block opponents. The evaluation must be influenced by parameters from the AI config file.","Task","Backlog","Critical","ai_dev@project.com","pm@project.com","",12,"ai,game-logic,high-complexity","Sprint 7","Artificial Intelligence (AI) System","Monopoly Tycoon","","","TASK-AI-004","","2024-01-01 09:00","2024-01-01 09:00","C#,AI,Game Design"
"Implement Asset Return for Bank Bankruptcy","Implement the logic for when a player goes bankrupt to the Bank. All properties are returned to the bank (becoming unowned and unmortgaged). The system must then immediately trigger an auction for each of these properties, one by one.","Task","Backlog","Critical","backend_dev@project.com","pm@project.com","",4.2,"rules-engine,game-logic,bankruptcy,integration","Sprint 8","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-RULE-010,TASK-RULE-016","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Win/Loss Condition Detection","In the Turn Manager or a dedicated Game Flow controller, add a check after every bankruptcy event to count the number of non-bankrupt players. If the count is 1, trigger a `GameEnded` event.","Task","Backlog","Critical","lead_dev@project.com","pm@project.com","",3,"game-logic,state-machine","Sprint 8","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-RULE-017,TASK-RULE-018","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Implement Post-Loss AI Simulation Mode","Create a high-speed simulation mode for the game loop. When triggered (after human bankruptcy), this mode should execute AI turns back-to-back with no animations or delays, until a single AI winner is determined.","Task","Backlog","High","backend_dev@project.com","pm@project.com","",6.3,"game-logic,ai,performance","Sprint 8","Domain Model & Rule Engine","Monopoly Tycoon","","","WI-016,EPIC-006","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Create Game Over/Victory/Summary UI Screens","Design and implement the UI prefabs for the three end-game screens: a simple 'Game Over' screen (US-047), a celebratory 'Victory' screen (US-046), and the detailed 'Game Summary' screen (US-048).","Task","Backlog","Critical","ui_dev@project.com","pm@project.com","",8,"ui,game-flow","Sprint 8","Player Actions & UI","Monopoly Tycoon","","This task is a placeholder for the UI work of US-046, US-047, US-048","","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Integrate Game End Logic with UI Screens","Create a Game Flow Controller that listens for the `GameEnded` event. If the winner is human, it commands the UI to show the Victory Screen. If the human was already bankrupt, it triggers the AI simulation, and on its completion, commands the UI to show the Game Summary screen.","Task","Backlog","Critical","lead_dev@project.com","pm@project.com","",0.7,"integration,state-machine","Sprint 8","Domain Model & Rule Engine","Monopoly Tycoon","","","TASK-RULE-019,TASK-RULE-020,TASK-UI-010,TASK-UI-011","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity"
"Implement Core Behavior Tree Nodes","Implement the fundamental components of a behavior tree: an abstract `Node` class, composite nodes like `Sequence` and `Selector`, and decorator nodes like `Inverter`. These will be the building blocks of the AI's logic.","Task","Backlog","Critical","ai_dev@project.com","pm@project.com","",8.3,"ai,architecture","Sprint 9","Artificial Intelligence (AI) System","Monopoly Tycoon","","","","2024-01-01 09:00","2024-01-01 09:00","C#,Software Architecture,AI"
"Implement AI Agent and Tree Runner","Create an `AIAgent` class that holds a reference to an AI's `PlayerState` and its root behavior tree node. Implement a `RunTurn()` method that ticks the behavior tree until it returns a final state (success or failure), signifying the end of the AI's turn.","Task","Backlog","Critical","ai_dev@project.com","pm@project.com","",8.2,"ai,integration,game-flow","Sprint 9","Artificial Intelligence (AI) System","Monopoly Tycoon","","","TASK-AI-001,TASK-TURN-001","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity"
"Define and Create AI Configuration JSON","Define the schema for `AIConfig.json`. It should contain sections for each difficulty level ('Easy', 'Medium', 'Hard'), with parameters like `propertyPurchaseThreshold`, `monopolyPursuitAggression`, `tradeAcceptanceModifier`, etc. Create the initial file with placeholder values.","Task","Backlog","Critical","ai_dev@project.com","pm@project.com","",3,"ai,configuration,data-driven","Sprint 9","Artificial Intelligence (AI) System","Monopoly Tycoon","","","","2024-01-01 09:00","2024-01-01 09:00","JSON,Game Design"
"Implement JSON Configuration Loader Service","Create a service that reads and deserializes the `AIConfig.json` file into a strongly-typed C# object at application startup. This service will provide access to the configuration parameters for a given difficulty level.","Task","Backlog","Critical","backend_dev@project.com","pm@project.com","",4.5,"ai,infrastructure,data-driven","Sprint 9","Artificial Intelligence (AI) System","Monopoly Tycoon","","","TASK-AI-003","","2024-01-01 09:00","2024-01-01 09:00","C#,System.Text.Json"
"Implement AI Behavior Tree: Pre-Roll Actions","Construct the part of the behavior tree that runs during the AI's Pre-Roll phase. This includes nodes for deciding whether to unmortgage properties, propose trades to other players, or build houses/hotels.","Task","Backlog","High","ai_dev@project.com","pm@project.com","",12,"ai,game-logic,high-complexity","Sprint 9","Artificial Intelligence (AI) System","Monopoly Tycoon","","","TASK-AI-001,TASK-AI-005","","2024-01-01 09:00","2024-01-01 09:00","C#,Behavior Trees"
"Implement AI Behavior Tree: Post-Roll Actions","Construct the part of the behavior tree that runs after the AI moves. This includes nodes for deciding whether to buy an unowned property or how to bid in an auction. The AI must also handle responding to choices like Income Tax.","Task","Backlog","High","ai_dev@project.com","pm@project.com","",12,"ai,game-logic,high-complexity","Sprint 9","Artificial Intelligence (AI) System","Monopoly Tycoon","","","TASK-AI-001,TASK-AI-004","","2024-01-01 09:00","2024-01-01 09:00","C#,Behavior Trees"
"Implement AI Behavior Tree: Jail and Debt Management","Construct the part of the behavior tree for when the AI is in jail or needs to raise money to pay a debt. This includes deciding whether to pay, use a card, or roll. For debt, it includes logic for which properties to mortgage or which houses to sell first.","Task","Backlog","High","ai_dev@project.com","pm@project.com","",12,"ai,game-logic,high-complexity","Sprint 9","Artificial Intelligence (AI) System","Monopoly Tycoon","","","TASK-AI-001","","2024-01-01 09:00","2024-01-01 09:00","C#,Behavior Trees"
"Implement Notification Manager Service","Create a singleton `NotificationManager` service that provides a public method `ShowNotification(string message)`. This service will manage a queue of notifications and instantiate the toast prefabs in a specific area of the screen (e.g., top-center).","Task","Backlog","Medium","ui_dev@project.com","pm@project.com","",1.5,"ui,architecture","Sprint 9","Player Actions & UI","Monopoly Tycoon","","","TASK-UI-008","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity"
"Create Notification Toast Prefab and Controller","In Unity, create a UI prefab for a toast notification. Write a controller script that manages its lifecycle: fade in, wait for a duration, fade out, and destroy.","Task","Backlog","Medium","ui_dev@project.com","pm@project.com","",3,"ui","Sprint 9","Player Actions & UI","Monopoly Tycoon","","","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Implement GameState Serialization and File Writing","Create a `SaveGameRepository`. Implement a `SaveAsync` method that takes a `GameState` object and a slot number. This method will serialize the object to JSON, calculate a checksum (e.g., SHA256) of the JSON content, prepend version info and the checksum, and write the result to a file in `'%APPDATA%/MonopolyTycoon/saves'`. This must handle file I/O exceptions.","Task","Backlog","Critical","backend_dev@project.com","pm@project.com","",6.2,"persistence,serialization","Sprint 10","Game State Persistence","Monopoly Tycoon","","","TASK-DOM-005","","2024-01-01 09:00","2024-01-01 09:00","C#,System.Text.Json"
"Implement Save Game UI Screen","Create the UI for the 'Save Game' screen, accessible from the pause menu. It should display at least 5 slots. For each existing save file, it must read metadata (timestamp, turn number) to display in the slot. The 'Save Game' button in the pause menu must be disabled outside of the Pre-Roll phase.","Task","Backlog","Critical","ui_dev@project.com","pm@project.com","",6.2,"ui,persistence","Sprint 10","Game State Persistence","Monopoly Tycoon","","","TASK-UI-005","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Implement Overwrite Confirmation Dialog","When the player clicks on an already used save slot, use the modal dialog system to show a confirmation prompt. If confirmed, proceed with the save; otherwise, cancel the operation.","Task","Backlog","High","ui_dev@project.com","pm@project.com","",0.7,"ui,persistence","Sprint 10","Game State Persistence","Monopoly Tycoon","","","TASK-UI-006,TASK-SAVE-002","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity UI"
"Implement GameState Deserialization and Validation","In `SaveGameRepository`, implement a `LoadAsync` method. This method will read a file, validate its checksum and version compatibility. If valid, it will deserialize the JSON into a `GameState` object. It must handle all file I/O and deserialization exceptions.","Task","Backlog","Critical","backend_dev@project.com","pm@project.com","",6.3,"persistence,serialization","Sprint 10","Game State Persistence","Monopoly Tycoon","","","TASK-SAVE-001","","2024-01-01 09:00","2024-01-01 09:00","C#,System.Text.Json"
"Implement Load Game UI Screen","Create the 'Load Game' screen. On load, it should scan the saves directory, use the repository to validate each file, and display the slots with their status ('Valid', 'Corrupted', 'Incompatible', 'Empty'). The 'Load' button is only enabled for valid selected slots.","Task","Backlog","Critical","ui_dev@project.com","pm@project.com","",6.2,"ui,persistence","Sprint 10","Game State Persistence","Monopoly Tycoon","","","TASK-LOAD-001,TASK-UI-002","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Implement Game State Restoration","After a `GameState` object is successfully loaded, create the logic to restore the live game. This involves destroying the current game objects and re-initializing the game board scene using the data from the loaded `GameState` object.","Task","Backlog","High","lead_dev@project.com","pm@project.com","",2.5,"integration,game-flow","Sprint 10","Game State Persistence","Monopoly Tycoon","","","TASK-LOAD-001","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity"
"Setup SQLite Database and Schema","Integrate a .NET SQLite library. Define the database schema in SQL for tables: `PlayerProfile`, `PlayerStatistic`, `GameResult`, `GameParticipant`, `HighScore`. Write a service to check for the database file in `'%APPDATA%/MonopolyTycoon/'` on startup and create it from the schema if it doesn't exist.","Task","Backlog","High","backend_dev@project.com","pm@project.com","",6,"persistence,database","Sprint 10","Game State Persistence","Monopoly Tycoon","","","","2024-01-01 09:00","2024-01-01 09:00","SQLite,SQL,C#"
"Implement Statistics Repository","Create a `StatisticsRepository` class that handles all CRUD operations for the SQLite database. It should have methods to create a profile, get stats for a profile, and a transactional method to update all stats after a game ends.","Task","Backlog","High","backend_dev@project.com","pm@project.com","",8.3,"persistence,database,repository-pattern","Sprint 10","Game State Persistence","Monopoly Tycoon","","","TASK-STAT-001","","2024-01-01 09:00","2024-01-01 09:00","C#,SQLite"
"Integrate Statistics Update with Game End Flow","At the end of a game (after the win/loss condition is met), call the `StatisticsRepository` to save the game's results and update the player's historical stats.","Task","Backlog","High","lead_dev@project.com","pm@project.com","",3,"integration,persistence","Sprint 10","Game State Persistence","Monopoly Tycoon","","","TASK-STAT-002,TASK-RULE-019","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity"
"Implement Statistics and High Score UI Screens","Create the UI screens for displaying the Player Statistics (US-013) and the Top 10 High Scores (US-064). These screens will read data from the `StatisticsRepository` and display it in a formatted, read-only view.","Task","Backlog","Medium","ui_dev@project.com","pm@project.com","",7,"ui,feature","Sprint 10","Game State Persistence","Monopoly Tycoon","","","TASK-STAT-002","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Implement In-Game Pause Menu (US-054)","Create the UI for the in-game pause menu. This menu overlays the game board and provides options to 'Resume', 'Save', 'Load', 'Settings', and 'Return to Main Menu'. Activating this menu must pause the core game simulation.","Task","Backlog","Critical","ui_dev@project.com","pm@project.com","",2.8,"ui,game-flow","Sprint 11","Main Menu & Game Setup Flow","Monopoly Tycoon","","","WI-016","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Implement Game Speed/Volume Settings UI","Create the UI controls in the Settings menu for Game Speed and the three volume sliders (Master, Music, SFX).","Task","Backlog","High","ui_dev@project.com","pm@project.com","",5,"ui,settings","Sprint 11","Main Menu & Game Setup Flow","Monopoly Tycoon","","This task combines the UI work for US-055 and US-056","TASK-UI-005","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Integrate Audio/Animation Speed Controls","Integrate the settings UI with the backend systems. The volume sliders must control the AudioMixer in real-time. The game speed setting must control the timing of animations and AI delays.","Task","Backlog","High","lead_dev@project.com","pm@project.com","",6,"integration,audio,animation","Sprint 11","Core Gameplay Loop & Presentation","Monopoly Tycoon","","This task combines the integration work for US-055 and US-056","TASK-MOVE-002","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity"
"Implement Data Management Settings UI","Add the 'Reset Statistics' and 'Delete Saved Games' buttons to the settings menu. Implement the confirmation dialogs and wire them up to the backend repository methods.","Task","Backlog","Medium","ui_dev@project.com","pm@project.com","",4,"ui,settings,persistence","Sprint 11","Main Menu & Game Setup Flow","Monopoly Tycoon","","This task combines UI work for US-057 and US-058","TASK-STAT-002,TASK-SAVE-001","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Implement Tutorial System","Develop the tutorial scripting engine and UI overlays to guide a new player through the basic game actions as per US-059.","Task","Backlog","High","unity_dev@project.com","pm@project.com","",12,"feature,tutorial,ui","Sprint 11","Main Menu & Game Setup Flow","Monopoly Tycoon","","","US-015,US-030,US-044","","2024-01-01 09:00","2024-01-01 09:00","Unity,C#"
"Implement Rulebook UI (US-060)","Create a modal UI for the rulebook. It needs a scrollable text area and a search input field. Implement logic to load rule text from an external JSON file and filter the display based on the search term.","Task","Backlog","Medium","ui_dev@project.com","pm@project.com","",5.2,"ui,feature","Sprint 11","Main Menu & Game Setup Flow","Monopoly Tycoon","","","TASK-UI-002","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Implement Theme Asset Management System","Design a system for managing theme assets. This likely involves using ScriptableObjects in Unity to define a 'Theme' which holds references to prefabs, materials, audio clips, and UI color palettes. Create a `ThemeManager` service to apply a selected theme.","Task","Backlog","Medium","lead_dev@project.com","pm@project.com","",8.3,"architecture,ui,audio","Sprint 11","Main Menu & Game Setup Flow","Monopoly Tycoon","","","","2024-01-01 09:00","2024-01-01 09:00","Unity,C#,Software Architecture"
"Implement Theme Selection UI in Settings","Add a section to the Settings menu that allows the player to select from the available themes. The UI should display the theme names and perhaps a preview image.","Task","Backlog","Medium","ui_dev@project.com","pm@project.com","",4,"ui,settings","Sprint 11","Main Menu & Game Setup Flow","Monopoly Tycoon","","","TASK-THEME-001","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Refactor UI Components to be Theme-Aware","Modify existing UI prefabs and controllers (Main Menu, HUD, Modals, etc.) to get their colors, sprites, and fonts from the `ThemeManager` instead of having them hard-coded. This makes them re-skinnable.","Task","Backlog","Medium","ui_dev@project.com","pm@project.com","",8.3,"ui,refactoring","Sprint 11","Main Menu & Game Setup Flow","Monopoly Tycoon","","","TASK-THEME-001","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Refactor 3D Board and Audio to be Theme-Aware","Modify the game board loader and audio manager to request assets (board model, token models, music tracks, SFX) from the `ThemeManager`. Integrate the two required themes ('Classic' and one other).","Task","Backlog","Medium","unity_dev@project.com","pm@project.com","",4,"3d,audio,integration","Sprint 11","Main Menu & Game Setup Flow","Monopoly Tycoon","","","TASK-THEME-001","","2024-01-01 09:00","2024-01-01 09:00","Unity 3D,C#"
"Write Unit Tests for Rule Engine","Create comprehensive NUnit tests for all methods within the Rule Engine. This includes tests for movement, jail logic, rent calculation, building rules (especially even-build), and mortgage calculations.","Task","Backlog","Critical","qa_engineer@project.com","pm@project.com","",16,"testing,unit-test,quality","Sprint 12","Testing & Quality Assurance","Monopoly Tycoon","","","EPIC-002","","2024-01-01 09:00","2024-01-01 09:00","C#,NUnit"
"Write Unit Tests for AI Decision Stubs","Create NUnit tests for the core AI logic components, such as the trade evaluator and property purchase heuristics. Mock the GameState to test the AI's decisions under controlled conditions.","Task","Backlog","High","qa_engineer@project.com","pm@project.com","",8,"testing,unit-test,ai","Sprint 12","Testing & Quality Assurance","Monopoly Tycoon","","","EPIC-006","","2024-01-01 09:00","2024-01-01 09:00","C#,NUnit"
"Implement Save/Load Integration Test","Using the Unity Test Framework, create a test that: 1. Sets up a complex GameState. 2. Calls the SaveGameRepository to save it to a temporary file. 3. Calls the repository to load it back. 4. Performs a deep comparison to assert that the loaded state is identical to the original.","Task","Backlog","Critical","qa_engineer@project.com","pm@project.com","",6,"testing,integration-test","Sprint 12","Testing & Quality Assurance","Monopoly Tycoon","","","WI-026,WI-027","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity Test Framework"
"Implement Trade Workflow Integration Test","Create an integration test that sets up a game with two players, gives them specific assets, has one propose a trade, has the other accept, and then asserts that the assets have been correctly transferred in the final GameState.","Task","Backlog","Critical","qa_engineer@project.com","pm@project.com","",6,"testing,integration-test","Sprint 12","Testing & Quality Assurance","Monopoly Tycoon","","","WI-021,WI-025","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity Test Framework"
"Implement Bankruptcy Workflow Integration Test","Create an integration test that sets up a player to be on the verge of bankruptcy. Trigger an event that indebts them (e.g., a large rent payment), and assert that the bankruptcy logic correctly transfers their assets to the creditor.","Task","Backlog","Critical","qa_engineer@project.com","pm@project.com","",6,"testing,integration-test","Sprint 12","Testing & Quality Assurance","Monopoly Tycoon","","","WI-011","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity Test Framework"
"Create Test Data Generation Tool/Method","Create a debug tool or a repeatable method to manually construct a specific GameState and save it. This is necessary to create the curated save files without having to play the game for hours to achieve the desired state.","Task","Backlog","High","dev_tools@project.com","pm@project.com","",4.2,"testing,tooling,debug","Sprint 12","Testing & Quality Assurance","Monopoly Tycoon","","","WI-026","","2024-01-01 09:00","2024-01-01 09:00","C#"
"Generate and Validate Edge Case Save Files","Using the generation tool, create the specific save files required by REQ-1-027: one for a player near bankruptcy, one for a board state with a housing shortage, and one with complex, intermingled property ownership.","Task","Backlog","High","qa_engineer@project.com","pm@project.com","",4,"testing,test-data","Sprint 12","Testing & Quality Assurance","Monopoly Tycoon","","","TASK-TEST-006","","2024-01-01 09:00","2024-01-01 09:00","QA"
"AI Behavior Tree Tuning and Playtesting","Conduct playtesting sessions with the fully implemented AI at all three difficulty levels. Adjust the parameters in the `AIConfig.json` file to tune the AI's behavior to meet the strategic profiles defined in REQ-1-019.","Task","Backlog","High","game_designer@project.com","pm@project.com","",8,"ai,tuning,playtesting","Sprint 12","Artificial Intelligence (AI) System","Monopoly Tycoon","","","TASK-AI-006,TASK-AI-007,TASK-AI-008","","2024-01-01 09:00","2024-01-01 09:00","QA,Game Design"
"Implement Update Check Service","Create a service that, on startup, makes an asynchronous HTTPS request to a predefined URL. This service will fetch a simple JSON file containing the latest version string and a download URL.","Task","Backlog","Medium","backend_dev@project.com","pm@project.com","",4,"feature,networking","Sprint 12","Project Foundation & Core Systems","Monopoly Tycoon","","","","2024-01-01 09:00","2024-01-01 09:00","C#,.NET HttpClient"
"Create Main Menu Update Notification UI","Design and implement a non-intrusive UI element (e.g., a banner or a button with a badge) on the Main Menu scene. This element will be hidden by default.","Task","Backlog","Medium","ui_dev@project.com","pm@project.com","",3,"ui,feature","Sprint 12","Project Foundation & Core Systems","Monopoly Tycoon","","","WI-012","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Integrate Update Check with Main Menu","In the Main Menu controller, call the Update Check Service on startup. If the service reports a new version is available, activate the UI notification element and populate it with the download URL.","Task","Backlog","Medium","ui_dev@project.com","pm@project.com","",3,"integration,feature","Sprint 12","Project Foundation & Core Systems","Monopoly Tycoon","","","TASK-UPD-001,TASK-UPD-002","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity"
"Implement Privacy Policy UI (US-068)","Create a simple modal UI with a scrollable text area to display the privacy policy. The text should be loaded from an external resource file.","Task","Backlog","Medium","ui_dev@project.com","pm@project.com","",2,"ui,compliance","Sprint 12","Main Menu & Game Setup Flow","Monopoly Tycoon","","","TASK-UI-002","","2024-01-01 09:00","2024-01-01 09:00","Unity UI,C#"
"Implement Custom Uninstaller Logic (US-007)","Add Pascal Scripting code to the Inno Setup script to handle the uninstallation process. This includes checking if the game is running, and if user data exists in `%APPDATA%`, showing a message box to ask the user if they want to delete it.","Task","Backlog","Medium","devops@project.com","pm@project.com","",6.2,"build,installer,scripting","Sprint 12","Build & Distribution","Monopoly Tycoon","","","TASK-BUILD-001","","2024-01-01 09:00","2024-01-01 09:00","Inno Setup,Pascal Script"
"Procure and Configure Code Signing Certificate","Procure a code signing certificate from a trusted Certificate Authority. Configure the build environment (local or CI/CD runner) to securely access the certificate for signing.","Task","Backlog","High","devops@project.com","pm@project.com","",4.7,"build,security,ci-cd","Sprint 12","Build & Distribution","Monopoly Tycoon","","","","2024-01-01 09:00","2024-01-01 09:00","DevOps,Security"
"Automate Build Pipeline","Create a script or CI/CD pipeline configuration (e.g., GitHub Actions workflow) that performs the following steps: 1. Build the Unity project for Windows. 2. Run the Inno Setup compiler on the script, using the Unity build output as input. 3. Sign the resulting installer executable with the code signing certificate.","Task","Backlog","High","devops@project.com","pm@project.com","",10.7,"build,ci-cd,automation","Sprint 12","Build & Distribution","Monopoly Tycoon","","","TASK-BUILD-001,TASK-BUILD-003","","2024-01-01 09:00","2024-01-01 09:00","CI/CD,Scripting,Unity,Inno Setup"
"Verify HUD on All Aspect Ratios","Manually test the completed Game HUD on 16:9, 16:10, and 21:9 aspect ratios to ensure all elements are visible, legible, and correctly positioned as per REQ-1-016 and US-004.","Task","Backlog","High","qa_engineer@project.com","pm@project.com","",3,"testing,ui,responsiveness","Sprint 4","Core Gameplay Loop & Presentation","Monopoly Tycoon","","","TASK-HUD-003","","2024-01-01 09:00","2024-01-01 09:00","QA,Unity"
"Integrate Turn Manager with Game Logic","Connect the Turn Manager's states to the actual game logic. For example, the Movement state should call the TokenController to start animation and wait for it to complete. The Action state should call the Rule Engine to process the effect of the space the player landed on.","Task","Backlog","Critical","lead_dev@project.com","pm@project.com","",8.3,"state-machine,game-flow,integration","Sprint 4","Core Gameplay Loop & Presentation","Monopoly Tycoon","","","TASK-TURN-001,TASK-MOVE-002,EPIC-002","","2024-01-01 09:00","2024-01-01 09:00","C#,Unity"