Title,Description,Type,Status,Priority,Assignee,Reporter,Due Date,Estimate,Labels,Sprint,Epic,Project,Attachments,Comments,Parent ID,Dependencies,Created At,Updated At,Skills Required
"Define and Implement PlayerState Class","Create the PlayerState.cs file with all required fields like player_id, player_name, cash, etc., using appropriate C# types. Ensure properties for lists (e.g., properties_owned) are properly initialized.","Task","Backlog","Critical","lead@project.com","pm@project.com","",3,"data-model,core-engine","Sprint 1","Core Engine & Game State","Monopoly Tycoon","","","WI-111","",2024-09-01 09:00,2024-09-01 09:00,"C#,Data Modeling"
"Define and Implement State Enums","Create separate enum files for `AiDifficulty` (Easy, Medium, Hard) and `PlayerStatus` (e.g., Active, InJail, Bankrupt) to be used within the PlayerState model.","Task","Backlog","Critical","lead@project.com","pm@project.com","",2,"data-model,core-engine","Sprint 1","Core Engine & Game State","Monopoly Tycoon","","","WI-111","TASK-01-111-01",2024-09-01 09:00,2024-09-01 09:00,"C#"
"Write Unit Tests for PlayerState Model","Create NUnit tests to verify the initialization and default values of the PlayerState object. This ensures the model behaves as expected upon creation.","Task","Backlog","Critical","qa@project.com","pm@project.com","",4,"unit-test,data-model","Sprint 1","Core Engine & Game State","Monopoly Tycoon","","Requires NUnit and Unity Test Framework setup from WI-621.","WI-111","TASK-01-111-01,TASK-06-621-01",2024-09-01 09:00,2024-09-01 09:00,"C#,NUnit"
"Review and Finalize PlayerState Schema","Conduct a peer code review of the PlayerState class and its associated enums to ensure they fully meet requirements and adhere to coding standards before being integrated into other systems.","Task","Backlog","Critical","lead@project.com","pm@project.com","",1,"code-review,quality-gate","Sprint 1","Core Engine & Game State","Monopoly Tycoon","","","WI-111","TASK-01-111-01,TASK-01-111-02,TASK-01-111-03",2024-09-01 09:00,2024-09-01 09:00,"C#,Code Review"
"Define and Implement GameState Class","Create the GameState.cs file. Add properties for the list of PlayerState objects and placeholder classes for BoardState, BankState, and DeckStates. Include metadata fields like `currentTurnNumber` and `activePlayerIndex`.","Task","Backlog","Critical","lead@project.com","pm@project.com","",4,"data-model,core-engine,architecture","Sprint 1","Core Engine & Game State","Monopoly Tycoon","","This is a core data structure that many systems will depend on.","WI-112","TASK-01-111-04",2024-09-01 09:00,2024-09-01 09:00,"C#,Data Modeling,Software Architecture"
"Write Unit Tests for GameState Initialization","Create NUnit tests for the GameState class to verify that it can be initialized correctly with a given number of players and that all its sub-state objects are created and not null.","Task","Backlog","Critical","qa@project.com","pm@project.com","",3.2,"unit-test,data-model","Sprint 1","Core Engine & Game State","Monopoly Tycoon","","","WI-112","TASK-01-112-01",2024-09-01 09:00,2024-09-01 09:00,"C#,NUnit"
"Review and Finalize GameState Schema","Conduct a peer code review of the GameState aggregate root to ensure its design is robust, serializable, and meets all requirements before other systems begin to depend on it heavily.","Task","Backlog","Critical","lead@project.com","pm@project.com","",1,"code-review,quality-gate,architecture","Sprint 1","Core Engine & Game State","Monopoly Tycoon","","","WI-112","TASK-01-112-01,TASK-01-112-02",2024-09-01 09:00,2024-09-01 09:00,"C#,Code Review,Software Architecture"
"Implement Secure RNG Dice Roll Service","Create a `DiceService` that uses `System.Security.Cryptography.RandomNumberGenerator` to generate two fair, random numbers between 1 and 6. The service's roll method should return a simple data object with the results.","Task","Backlog","Critical","lead@project.com","pm@project.com","",6,"core-logic,rng,services","Sprint 2","Core Engine & Game State","Monopoly Tycoon","","Using cryptographic RNG is non-standard for games and requires careful implementation to ensure fairness and performance.","WI-121","",2024-09-01 09:00,2024-09-01 09:00,"C#,Cryptography"
"Integrate Doubles Logic into TurnManager","Modify the `TurnManager` to track consecutive doubles. After a move is completed, if the roll was doubles, re-enter the 'Pre-Roll Management Phase' for the same player. If it was the third double, transition to a 'GoToJail' state instead of a 'Movement' state. Reset the counter when the turn passes to the next player.","Task","Backlog","Critical","lead@project.com","pm@project.com","",5.2,"core-logic,game-flow,state-machine","Sprint 2","Core Engine & Game State","Monopoly Tycoon","","Modifying the core game state machine requires careful handling of transitions and edge cases.","WI-121","TASK-01-121-01,TASK-03-311-01",2024-09-01 09:00,2024-09-01 09:00,"C#,State Management"
"Write Unit Tests for Dice and Doubles Logic","Create NUnit tests for the `DiceService` to verify number distribution over many rolls (statistical test). Test the `TurnManager`'s doubles-tracking logic by mocking the `DiceService` to return specific sequences of doubles and non-doubles.","Task","Backlog","Critical","qa@project.com","pm@project.com","",3.2,"unit-test,core-logic","Sprint 2","Core Engine & Game State","Monopoly Tycoon","","","WI-121","TASK-01-121-01,TASK-01-121-02",2024-09-01 09:00,2024-09-01 09:00,"C#,NUnit"
"Review Dice Rolling Implementation","Peer review the entire dice rolling and doubles tracking implementation for correctness, adherence to secure RNG requirements, and clean integration with the game's state machine.","Task","Backlog","Critical","lead@project.com","pm@project.com","",1,"code-review,quality-gate","Sprint 2","Core Engine & Game State","Monopoly Tycoon","","","WI-121","TASK-01-121-03",2024-09-01 09:00,2024-09-01 09:00,"C#,Code Review"
"Develop Jail State Logic in TurnManager","Implement a specific state or sub-logic within the `TurnManager` for when the active player's status is 'InJail'. This logic must present the jail options instead of the standard 'Roll Dice' button, and track `jail_turns_remaining`.","Task","Backlog","Critical","lead@project.com","pm@project.com","",8.2,"core-logic,game-flow,state-machine","Sprint 2","Core Engine & Game State","Monopoly Tycoon","","This is a major special case in the main game loop, with multiple entry and exit points.","WI-122","TASK-03-311-01,TASK-01-111-04",2024-09-01 09:00,2024-09-01 09:00,"C#,State Management"
"Implement Jail Exit Option Logic","Create the backend methods for the three ways to exit jail: 1) Pay Fine: deducts $50 and changes status. 2) Use Card: decrements card count and changes status. 3) Roll for Doubles: uses DiceService; on success, changes status and moves; on fail, ends turn.","Task","Backlog","Critical","lead@project.com","pm@project.com","",6.3,"core-logic,game-rules","Sprint 2","Core Engine & Game State","Monopoly Tycoon","","The 'no extra turn' on doubles is a critical but easy-to-miss exception.","WI-122","TASK-01-122-01,TASK-01-121-04",2024-09-01 09:00,2024-09-01 09:00,"C#,Game Logic"
"Create Jail Options UI Modal","Design and implement the UI modal that appears when a human player is in jail. The modal must display buttons for all available options ('Pay Fine', 'Use Card', 'Roll for Doubles'). Buttons should be conditionally enabled based on the player's state (cash, card inventory).","Task","Backlog","Critical","ui@project.com","pm@project.com","",5.2,"ui,modal","Sprint 2","Core Engine & Game State","Monopoly Tycoon","","","WI-122","TASK-04-422-01,TASK-01-122-01",2024-09-01 09:00,2024-09-01 09:00,"Unity UI,C#"
"Implement Forced Payment on Third Turn","Add logic to the Jail state handler that, on the player's third turn (`jail_turns_remaining` == 1), forces them to pay the $50 fine if their roll is not doubles. If they cannot pay, trigger the bankruptcy flow.","Task","Backlog","Critical","lead@project.com","pm@project.com","",5,"core-logic,game-rules","Sprint 2","Core Engine & Game State","Monopoly Tycoon","","","WI-122","TASK-01-122-02,TASK-01-125-01",2024-09-01 09:00,2024-09-01 09:00,"C#,Game Logic"
"Write Unit and Integration Tests for Jail Mechanics","Create a comprehensive test suite for the jail system. Unit test each exit method in isolation. Write an integration test (PlayMode) that simulates a player being jailed and successfully getting out via each of the three methods, and another for the forced payment on the third turn.","Task","Backlog","Critical","qa@project.com","pm@project.com","",4.2,"unit-test,integration-test,core-logic","Sprint 2","Core Engine & Game State","Monopoly Tycoon","","","WI-122","TASK-01-122-01,TASK-01-122-02,TASK-01-122-03",2024-09-01 09:00,2024-09-01 09:00,"C#,NUnit,Unity Test Framework"
"Review Jail System Implementation","Conduct a final peer review of the entire jail mechanic, including the state machine logic, exit option implementations, UI, and tests, to ensure correctness and robustness.","Task","Backlog","Critical","lead@project.com","pm@project.com","",1,"code-review,quality-gate","Sprint 2","Core Engine & Game State","Monopoly Tycoon","","","WI-122","TASK-01-122-04,TASK-01-122-05",2024-09-01 09:00,2024-09-01 09:00,"C#,Code Review"
"Implement Bank Inventory Tracking","Create a `BankState` data model to store the count of available houses and hotels (32 and 12 respectively). Implement methods in a `BankService` or `GameStateManager` to decrement the count when a building is sold and increment it when one is returned.","Task","Backlog","Critical","lead@project.com","pm@project.com","",4,"core-logic,data-model","Sprint 3","Core Engine & Game State","Monopoly Tycoon","","","WI-123","TASK-01-112-03",2024-09-01 09:00,2024-09-01 09:00,"C#,Data Modeling"
"Develop Monopoly Ownership Check Logic","Create a function in the `RuleEngine` that, given a player and a property, can determine if that player owns all other properties in the same color group (i.e., has a monopoly).","Task","Backlog","Critical","lead@project.com","pm@project.com","",6,"core-logic,game-rules,algorithm","Sprint 3","Core Engine & Game State","Monopoly Tycoon","","","WI-123","TASK-01-111-04",2024-09-01 09:00,2024-09-01 09:00,"C#,Algorithm Design"
"Implement 'Even Building' Rule Logic","Develop the complex validation logic for the 'even building' rule (REQ-1-054) within the `RuleEngine`. This includes checking that a house can be built (no other property in the set has fewer houses) and that a house can be sold (no other property in the set has more houses).","Task","Backlog","Critical","lead@project.com","pm@project.com","",10.3,"core-logic,game-rules,algorithm,high-complexity","Sprint 3","Core Engine & Game State","Monopoly Tycoon","","This rule is one of the most complex in Monopoly, requiring iteration and comparison across a group of related objects.","WI-123","TASK-01-123-02",2024-09-01 09:00,2024-09-01 09:00,"C#,Algorithm Design"
"Integrate Building Rules into Player Actions","Create a `BuildHouse` action/method in a service layer that calls the `RuleEngine` for validation. If valid, it should process the transaction: deduct player cash, decrement bank house supply, and update the property's state.","Task","Backlog","Critical","lead@project.com","pm@project.com","",5,"services,core-logic","Sprint 3","Core Engine & Game State","Monopoly Tycoon","","","WI-123","TASK-01-123-01,TASK-01-123-03",2024-09-01 09:00,2024-09-01 09:00,"C#"
"Write Unit Tests for Building Rules","Create a comprehensive NUnit test suite for the `RuleEngine`'s monopoly and even-building logic. Test all possible scenarios: building on 2- and 3-property monopolies, attempting to build unevenly, attempting to sell unevenly, building up to a hotel.","Task","Backlog","Critical","qa@project.com","pm@project.com","",6.2,"unit-test,core-logic,game-rules","Sprint 3","Core Engine & Game State","Monopoly Tycoon","","The number of states to test for the even-building rule is high, requiring significant setup for each test case.","WI-123","TASK-01-123-02,TASK-01-123-03",2024-09-01 09:00,2024-09-01 09:00,"C#,NUnit"
"Review Building Rule System","Conduct a peer review of the entire property and building management system, focusing on the correctness of the complex rule implementations (monopoly check, even-building).","Task","Backlog","Critical","lead@project.com","pm@project.com","",1,"code-review,quality-gate","Sprint 3","Core Engine & Game State","Monopoly Tycoon","","","WI-123","TASK-01-123-04,TASK-01-123-05",2024-09-01 09:00,2024-09-01 09:00,"C#,Code Review"
"Implement Mortgage Transaction Logic","In the `PropertyActionService`, create a `MortgageProperty` method. This method should validate that the property is undeveloped, update the property's `isMortgaged` flag to true, and add the mortgage value to the player's cash.","Task","Backlog","Critical","general@project.com","pm@project.com","",4,"core-logic,services","Sprint 3","Core Engine & Game State","Monopoly Tycoon","","","WI-124","TASK-01-111-04",2024-09-01 09:00,2024-09-01 09:00,"C#"
"Implement Unmortgage Transaction Logic","In the `PropertyActionService`, create an `UnmortgageProperty` method. This method should calculate the cost (mortgage value * 1.1), validate that the player has sufficient cash, deduct the cost, and update the property's `isMortgaged` flag to false.","Task","Backlog","Critical","general@project.com","pm@project.com","",4.8,"core-logic,services","Sprint 3","Core Engine & Game State","Monopoly Tycoon","","","WI-124","TASK-01-124-01",2024-09-01 09:00,2024-09-01 09:00,"C#"
"Update Rent Calculation to Handle Mortgaged Properties","Modify the rent calculation logic (part of ActionResolver or a dedicated service) to check a property's `isMortgaged` status before calculating rent. If the flag is true, the method must return 0.","Task","Backlog","Critical","lead@project.com","pm@project.com","",2,"core-logic,game-rules","Sprint 3","Core Engine & Game State","Monopoly Tycoon","","","WI-124","TASK-03-321-01",2024-09-01 09:00,2024-09-01 09:00,"C#"
"Write Unit Tests for Mortgage System","Create NUnit tests for the `PropertyActionService` covering all mortgage and unmortgage scenarios: successful mortgage, successful unmortgage, attempt to mortgage a developed property, attempt to unmortgage with insufficient funds. Also, test the rent calculation service to ensure it returns 0 for a mocked mortgaged property.","Task","Backlog","Critical","qa@project.com","pm@project.com","",4.2,"unit-test,core-logic","Sprint 3","Core Engine & Game State","Monopoly Tycoon","","","WI-124","TASK-01-124-01,TASK-01-124-02,TASK-01-124-03",2024-09-01 09:00,2024-09-01 09:00,"C#,NUnit"
"Review Mortgage System Implementation","Peer review the mortgage and unmortgage logic, its integration with the rent system, and its unit tests.","Task","Backlog","Critical","lead@project.com","pm@project.com","",1,"code-review,quality-gate","Sprint 3","Core Engine & Game State","Monopoly Tycoon","","","WI-124","TASK-01-124-04",2024-09-01 09:00,2024-09-01 09:00,"C#,Code Review"
"Define Card Data Structure and Load from JSON","Define a C# class `CardData` to represent a single card, including properties like `text`, `actionType`, and `actionValue`. Create JSON files for the Chance and Community Chest decks. Implement a service to load and parse these JSON files into lists of `CardData` objects at game start.","Task","Backlog","Critical","general@project.com","pm@project.com","",6,"data-model,services,json","Sprint 3","Core Engine & Game State","Monopoly Tycoon","","","WI-126","",2024-09-01 09:00,2024-09-01 09:00,"C#,JSON"
"Implement Deck Management Logic","Create a `CardManager` service. This service will be responsible for initializing the decks at the start of a game (by shuffling the loaded card lists), drawing the top card, and returning used cards to the bottom of the correct deck. The current order of the decks must be stored in the `GameState`.","Task","Backlog","Critical","general@project.com","pm@project.com","",5.2,"core-logic,game-flow","Sprint 3","Core Engine & Game State","Monopoly Tycoon","","","WI-126","TASK-01-126-01,TASK-01-112-03",2024-09-01 09:00,2024-09-01 09:00,"C#,Game Logic"
"Implement Card Action Executor","Create a system to execute the action specified by a drawn `CardData` object. Use a Command Pattern or a factory to map `actionType` strings from the JSON (e.g., 'MoveTo', 'CollectFromBank', 'PayEachPlayer') to concrete action classes. Handle the special logic for the 'Get Out of Jail Free' card.","Task","Backlog","Critical","lead@project.com","pm@project.com","",8.2,"core-logic,design-pattern,architecture","Sprint 3","Core Engine & Game State","Monopoly Tycoon","","Implementing a flexible Command Pattern is more complex than a simple switch statement but is required for maintainability.","WI-126","TASK-01-126-02",2024-09-01 09:00,2024-09-01 09:00,"C#,Software Architecture,Design Patterns"
"Write Unit Tests for Card and Deck System","Create NUnit tests for the `CardManager` to verify shuffling, drawing, and returning cards. Write unit tests for each `CardAction` to ensure it correctly modifies a mock `GameState`.","Task","Backlog","Critical","qa@project.com","pm@project.com","",4,"unit-test,core-logic","Sprint 3","Core Engine & Game State","Monopoly Tycoon","","","WI-126","TASK-01-126-02,TASK-01-126-03",2024-09-01 09:00,2024-09-01 09:00,"C#,NUnit"
"Design and Implement Bankruptcy Service","Create a `BankruptcyService` responsible for the bankruptcy workflow. Implement a method `CheckForBankruptcy(player, debtAmount)` which first calculates the player's total liquidatable assets (cash + half value of buildings + mortgage value of properties).","Task","Backlog","Critical","lead@project.com","pm@project.com","",7,"core-logic,services,high-complexity","Sprint 4","Core Engine & Game State","Monopoly Tycoon","","The asset liquidation calculation must be precise and follow official rules.","WI-125","",2024-09-01 09:00,2024-09-01 09:00,"C#,Algorithm Design"
"Implement Asset Liquidation and Transfer to Player","Implement the logic for when a player goes bankrupt to another player (creditor). This involves transferring all cash, properties (including their mortgaged state), and Get Out of Jail Free cards to the creditor. The bankrupt player's status is set to `Bankrupt`.","Task","Backlog","Critical","lead@project.com","pm@project.com","",9.3,"core-logic,high-complexity,game-rules","Sprint 4","Core Engine & Game State","Monopoly Tycoon","","This process modifies the state of two players and multiple properties simultaneously and must be atomic.","WI-125","TASK-01-125-01",2024-09-01 09:00,2024-09-01 09:00,"C#,State Management"
"Implement Asset Transfer to Bank and Trigger Auction","Implement the logic for when a player goes bankrupt to the Bank. This involves returning all properties to the bank and then immediately triggering a series of auctions for each of those properties, one by one.","Task","Backlog","Critical","lead@project.com","pm@project.com","",8.2,"core-logic,high-complexity,game-rules","Sprint 4","Core Engine & Game State","Monopoly Tycoon","","Requires tight integration with the AuctionManager, triggering a complex sub-process.","WI-125","TASK-01-125-01,TASK-03-322-01",2024-09-01 09:00,2024-09-01 09:00,"C#,State Management"
"Implement Human Player Debt Resolution Flow","When a human player owes a debt they cannot immediately pay, implement the flow that forces them to the Property Management screen to sell buildings and/or mortgage properties until the debt is covered. If they cannot cover it, then trigger the bankruptcy service.","Task","Backlog","Critical","ui@project.com","pm@project.com","",8.2,"ui,game-flow","Sprint 4","Core Engine & Game State","Monopoly Tycoon","","This is a complex UI state where the game is paused for a specific purpose, requiring robust state management.","WI-125","TASK-04-423-01,TASK-01-125-01",2024-09-01 09:00,2024-09-01 09:00,"C#,Unity UI,State Management"
"Write Comprehensive Tests for Bankruptcy System","Create unit tests for the liquidation value calculation. Write integration tests for the two main bankruptcy flows: transfer to player and transfer to bank. These tests will require setting up complex game states.","Task","Backlog","Critical","qa@project.com","pm@project.com","",8.3,"unit-test,integration-test,high-complexity","Sprint 4","Core Engine & Game State","Monopoly Tycoon","","Setting up the precise pre-conditions for bankruptcy in a test environment is complex and time-consuming.","WI-125","TASK-01-125-01,TASK-01-125-02,TASK-01-125-03,TASK-06-624-01",2024-09-01 09:00,2024-09-01 09:00,"C#,NUnit,Unity Test Framework"
"Review Bankruptcy System Implementation","Conduct a final, thorough peer review of the entire bankruptcy system, as it is one of the most critical and complex parts of the rule engine.","Task","Backlog","Critical","lead@project.com","pm@project.com","",1.1,"code-review,quality-gate","Sprint 4","Core Engine & Game State","Monopoly Tycoon","","","WI-125","TASK-01-125-04,TASK-01-125-05",2024-09-01 09:00,2024-09-01 09:00,"C#,Code Review"