risk_id,risk_category,risk_description,probability,impact,risk_score,priority_level,affected_tasks,root_cause,mitigation_strategy,contingency_plan,monitoring_trigger,owner,due_date,status
RISK-001,Technical,"The core rule engine logic (Jail, Property, Bankruptcy) is highly complex and interconnected, leading to a high probability of subtle, game-breaking bugs that are difficult to debug.",4,5,20,High,"WI-122, WI-123, WI-125",High logical complexity and numerous state interactions required by official Monopoly rules.,Implement a Test-Driven Development (TDD) approach for the most complex rule modules (Bankruptcy, Even Building). Require mandatory peer reviews for all commits to the RuleEngine. Develop a comprehensive unit test suite with at least 80% coverage for these modules.,Allocate a dedicated ""stabilization sprint"" before release solely for fixing bugs in the core engine. If a specific rule (e.g., building shortage auctions) proves too complex, scope it down to a simpler, non-auction version for initial release.,Unit test failure rate for the RuleEngine exceeds 15% in a CI build. More than 5 bugs related to core rules are found in a single QA cycle.,Lead Developer,2025-03-15,Identified
RISK-002,Timeline,"The AI Behavior Tree (BT) architecture and decision node implementation are marked as 'High' complexity. The time required to develop and, more importantly, balance the AI for three distinct difficulty levels is likely underestimated.",4,4,16,High,"WI-221, WI-223",Difficulty in balancing AI behavior and the iterative nature of AI tuning.,Develop the AI decision nodes against a well-defined interface. Create a debug visualization tool for the BT to observe AI decision-making in real-time. Focus on getting the 'Medium' difficulty right first, then detune for 'Easy' and enhance for 'Hard' using the external JSON config.,Reduce the scope of the 'Hard' AI for the initial release, making its strategy less aggressive or complex. Rely heavily on the external JSON configuration to allow for post-release balancing patches without a full code rebuild.,The 'Medium' AI is still not providing a competent challenge by the feature-complete milestone. The time spent on AI tuning exceeds the initial estimate by 25%.,AI Developer,2025-05-30,Identified
RISK-003,Technical,"The save/load system, which serializes the entire `GameState` object, could be prone to corruption, data loss, or errors due to complex object graphs (circular references) or future state changes.",4,5,20,High,"WI-511, WI-512, WI-513",High complexity of serializing a large, interconnected object graph. Inevitable changes to the GameState model during development.,Design the `GameState` and `PlayerState` models as Data Transfer Objects (DTOs) with serialization in mind from the start. Implement robust versioning in the save file header. Create a dedicated integration test suite (as part of WI-623) that performs a save/load cycle and a deep comparison of the game state objects.,If full-state serialization is unstable, switch to a more granular save system that saves individual state components. For migration failures, the system will mark the save as 'incompatible' rather than attempting a risky, unrecoverable migration.,The save/load integration test suite fails consistently. A change to the `GameState` model breaks deserialization of older test saves.,Lead Developer,2025-04-15,Identified
RISK-004,Quality,"The requirement for a ""polished 3D graphical environment"" and high-quality assets (REQ-1-005) is subjective and can lead to performance issues on minimum-spec hardware if assets are not rigorously optimized.",3,4,12,Medium,"WI-411, WI-412",Unoptimized 3D models, textures, and VFX.,Establish strict performance budgets for the main game scene (poly count, draw calls, memory). All 3D assets must go through a technical art review for optimization before being merged. Conduct regular performance profiling on a machine that matches the minimum hardware specifications.,Create a 'Low Quality' graphics setting that disables non-essential VFX, reduces texture resolution, and uses lower-poly models for tokens and buildings.,The frame rate drops below 45 FPS on the recommended hardware during typical gameplay (e.g., multiple token animations and VFX on screen).,Lead Artist / Technical Artist,2025-06-30,Identified
RISK-005,Resource,"The project has a significant external dependency on the art and audio teams to deliver two complete, distinct sets of assets for the theming system (WI-442). A delay in asset delivery will directly block the completion of a 'High' complexity feature.",4,3,12,Medium,WI-442,External dependency on asset production pipeline not under the direct control of the development team.,Establish a clear delivery schedule with the art/audio teams with specific deadlines for each theme package. The development team will use placeholder assets to build and test the theming system in parallel.,Launch with only one complete theme ('Classic') and release the second theme as a free post-launch update. This reduces the pre-launch dependency risk.,The first complete set of themed assets is not delivered by the agreed-upon deadline, impacting the UI/VX team's integration schedule.,Project Manager,2025-07-15,Identified
RISK-006,Technical,"The architecture for responsive UI across three different aspect ratios (16:9, 16:10, 21:9) is a 'High' complexity, cross-cutting concern (WI-425). If not architected correctly from the beginning, it will require extensive and costly rework of every single UI screen.",5,3,15,High,"WI-421, WI-422, WI-423, WI-424, WI-431",Failing to use a scalable UI framework (anchors, layout groups) from the start.,Mandate the use of Unity's Canvas Scaler and anchor/pivot system for all UI elements from the very first UI task. Create a UI style guide and prefab library for common elements that are pre-configured for responsiveness. All UI-related pull requests must include screenshots demonstrating functionality on all three target aspect ratios.,Prioritize perfect functionality on the most common aspect ratio (16:9). Accept minor cosmetic issues (e.g., suboptimal spacing) on other ratios for the initial release, to be fixed in a patch.,During QA for a UI feature, significant layout bugs (overlapping elements, buttons off-screen) are discovered on a non-16:9 aspect ratio.,UI/UX Lead,2025-03-01,Identified
RISK-007,Timeline,"Achieving the required 70% unit test coverage for complex core logic (WI-622) is time-consuming and can be easily underestimated, potentially delaying subsequent integration testing and release.",3,4,12,Medium,"WI-622, WI-623",Overly optimistic estimation for writing high-quality tests for complex logic.,Integrate a code coverage tool into the CI/CD pipeline early to provide continuous feedback. Prioritize test coverage on the most critical and complex modules first (e.g., RuleEngine, BankruptcyManager) instead of trying to cover everything evenly.,Accept a lower coverage target (e.g., 60%) for the initial release, with the technical debt officially logged for a post-release update. Focus manual QA efforts on the modules with lower coverage.,The code coverage metric has not reached 50% by the time the project is considered 'feature complete', indicating a significant testing backlog.,QA Lead,2025-07-01,Identified
RISK-008,Quality,"The AI's trading logic (part of WI-223) could be perceived as unfair or easily exploitable, especially on 'Hard' difficulty, leading to a poor player experience.",4,3,12,Medium,WI-223,Difficulty of balancing asymmetrical AI trading behavior.,Log all AI trade evaluations and decisions at the DEBUG level (as per REQ-1-019) to allow for post-game analysis. The external AI config JSON should include parameters for trade acceptance thresholds, allowing for tuning without recompiling. Use a pool of internal and external testers to gather feedback specifically on trade balance.,If the AI is too easy to exploit, release a patch that adjusts the trading parameters in the AIConfig.json file. A more complex fix might involve adding new nodes to the BT to better evaluate asset value.,QA feedback consistently reports that the 'Hard' AI accepts obviously bad trades or the 'Easy' AI never trades at all.,AI Developer,2025-06-15,Identified
RISK-009,Technical,"The implementation of a data migration system for save files (WI-513) is 'High' complexity and may introduce more bugs than it solves if the `GameState` model changes frequently, creating a significant maintenance burden.",3,4,12,Medium,WI-513,High technical complexity and potential for frequent changes to the data model.,Strictly limit breaking changes to the `GameState` model after the save/load feature is merged. For minor additions, design the deserializer to handle missing fields gracefully with default values. Only implement migration logic for major, unavoidable breaking changes.,Disable the migration feature entirely for the V1 release. The system will simply mark old saves as 'incompatible'. Document this limitation in the release notes. Re-evaluate the need for migration based on user feedback post-launch.,More than two breaking changes are made to the `GameState` model during development, requiring the migration logic to be rewritten multiple times.,Lead Developer,2025-05-01,Identified
RISK-010,Operational,"The system for backing up and recovering the SQLite statistics database (WI-522) could fail due to file system permission issues or an incomplete atomic operation, leading to the loss of all of a player's historical stats.",3,4,12,Medium,WI-522,Complexity of ensuring atomic file operations and handling OS-level permission errors.,Implement the backup/restore logic within a robust try-catch block that logs all errors. The restore process must follow a 'copy-then-replace' pattern to avoid destroying the backup if the replacement fails. The UI must gracefully handle a failed recovery by offering to create a new, empty stats file.,If automatic recovery fails, the application will prompt the user with a dialog explaining the situation and asking if they want to reset their stats or quit the application. The corrupted files will be preserved for potential manual recovery.,Error logs show repeated `System.IO.IOException` or `SqliteException` during the database initialization phase on multiple test machines.,Infrastructure Developer,2025-04-30,Identified
RISK-011,Resource,"The project contains a large number of 'High' complexity tasks across different domains (Core Logic, AI, UI, Persistence). There is a risk of a key person dependency, where the developer responsible for a critical area becomes a bottleneck or their departure stalls the project.",3,5,15,High,"WI-122, WI-123, WI-125, WI-221, WI-223, WI-311, WI-322, WI-411, WI-412, WI-421, WI-422, WI-423, WI-425, WI-442, WI-511, WI-512, WI-513, WI-622, WI-623",Concentration of specialized knowledge in individual team members.,Enforce a policy of pair programming for the most complex tasks (e.g., BankruptcyManager, AI Behavior Tree). Mandate that all technical architecture decisions and system designs are documented (as per REQ-1-096) and reviewed by the whole team.,If a key developer is lost, hire a contractor with specialized skills (e.g., Unity AI) to backfill. The Project Manager will need to immediately re-plan the schedule, likely pushing back the release date.,A critical path epic (e.g., Core Engine) is falling behind schedule, and only one developer has the context to work on it.,Project Manager,2025-02-28,Identified
RISK-012,Technical,"The Visual Theme System (WI-442) requires dynamically loading and unloading a large number of assets at runtime. This could lead to memory leaks or performance degradation if assets from the previous theme are not properly garbage collected.",3,3,9,Medium,WI-442,Complexity of memory management for dynamic assets in Unity.,Use Unity's Profiler to analyze memory usage and garbage collection during theme switches. Implement the theme system using Addressables or Asset Bundles, which provide explicit control over loading and unloading assets. Conduct stress tests by rapidly switching themes multiple times.,If memory leaks persist, disable theme switching during an active game session. The theme can only be selected from the main menu, requiring a scene reload which is a more reliable way to clear memory.,The Unity Profiler shows a steady increase in heap memory allocation after each theme switch that is not subsequently reclaimed by the garbage collector.,UI/UX Developer,2025-07-31,Identified
RISK-013,Quality,"The requirement for a cryptographically secure RNG for dice rolls (WI-121) might be implemented incorrectly or have a performance overhead, impacting the game's feel and fairness.",2,4,8,Medium,WI-121,Specific technical requirement that differs from standard, more performant RNGs.,Isolate the RNG implementation behind an interface. During development, use Unity's standard `Random` class for performance. Create a specific test suite to validate the statistical distribution of the secure RNG. Conduct performance profiling on the secure RNG calls.,If the secure RNG proves to have a noticeable performance impact, provide an in-game option to switch to a 'Fast (Non-Secure)' RNG, explaining the trade-off to the user. Default to the secure option.,Statistical analysis of 1 million simulated rolls shows a non-uniform distribution, indicating a flawed implementation. The dice roll service call appears as a hotspot in performance profiles.,Lead Developer,2025-03-31,Identified
RISK-014,Timeline,"The project has many tightly coupled systems (Turn Manager, Rule Engine, UI Modals, AI). The integration phase for these systems could reveal unforeseen complexities and bugs, causing significant delays.",4,3,12,Medium,"WI-311, WI-123, WI-422, WI-223",High degree of system interdependency in a complex state machine.,Define clear API contracts between services early in development. Implement integration tests (as per WI-623) for key workflows as soon as the dependent systems are in a testable state, rather than waiting until the end of the project. Use an event-driven architecture to decouple systems where possible.,Allocate a larger-than-usual buffer in the project schedule specifically for integration testing and fixing. Descope non-essential features if integration proves more difficult than anticipated.,Integration tests for key workflows (e.g., the full auction process) are consistently failing, indicating a fundamental incompatibility between system interfaces.,Project Manager,2025-06-01,Identified
RISK-015,External,"The project relies on the intellectual property of Hasbro's Monopoly (REQ-1-003, REQ-1-099). A change in the licensing agreement or a failure to adhere to branding guidelines could halt the project or prevent its release.",1,5,5,Low,EPIC-01,Legal and compliance dependency on an external entity.,Maintain a clear and accessible document detailing all branding and IP guidelines from Hasbro. All visual assets and rule implementations must be reviewed against this document by the project lead before being merged. Maintain open communication with the Hasbro licensing contact.,If a guideline is violated, immediately prioritize the work to fix it. If the entire license is revoked, the project must be terminated. There is no technical contingency.,Notification from Hasbro, Inc. that a specific game asset or rule implementation violates the licensing agreement.,Project Manager,2025-08-15,Identified