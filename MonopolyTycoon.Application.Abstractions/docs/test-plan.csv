test_id,feature_area,test_type,test_level,priority,automation_candidate,test_description,preconditions,test_steps,expected_result,test_data_needs,tools_required,estimated_effort,dependencies
TC-CORE-111-001,Player & AI Systems,Functional,Unit,Critical,High,"Verify PlayerState class initializes with correct default values.","NUnit test environment is set up.","1. Instantiate a new `PlayerState` object using the default constructor.
2. Assert that `cash` is 0.
3. Assert that `is_human` is false.
4. Assert that `properties_owned` is an empty, non-null list.
5. Assert `status` is `Active`.","All properties of the newly created `PlayerState` object match their expected default values.",N/A,NUnit,0.5,TASK-01-111-01
TC-CORE-112-001,Core Engine & Game State,Functional,Unit,Critical,High,"Verify GameState class initializes correctly for a 4-player game.","NUnit test environment is set up. `PlayerState` class is defined.","1. Instantiate a new `GameState` object, passing a configuration for 1 human and 3 AI players.
2. Assert that the `playerStates` list contains exactly 4 `PlayerState` objects.
3. Assert that `BoardState`, `BankState`, and `DeckStates` are not null.
4. Assert that `currentTurnNumber` is 1 and `activePlayerIndex` is 0.","The `GameState` object is initialized correctly, with a list of 4 players and all sub-state objects properly instantiated.",Mock `PlayerState` objects.,NUnit,1,TASK-01-112-01
TC-CORE-121-001,Core Engine & Game State,Functional,Unit,Critical,High,"Verify the DiceService generates two numbers, each within the range [1, 6].","NUnit test environment is set up.","1. Instantiate the `DiceService`.
2. Call the `Roll()` method.
3. Assert that the first die result is >= 1 and <= 6.
4. Assert that the second die result is >= 1 and <= 6.","The `Roll()` method returns a result object where both dice values are within the valid 1-6 range.",N/A,NUnit,0.5,TASK-01-121-01
TC-CORE-121-002,Core Engine & Game State,Non-Functional,Unit,High,High,"Verify the statistical distribution of the secure RNG DiceService over a large number of rolls.","NUnit test environment is set up.","1. Instantiate the `DiceService`.
2. Call the `Roll()` method 1,000,000 times, storing the frequency of each number (1-6) for each die.
3. Calculate the expected frequency for each number (approx. 166,667).
4. Assert that the actual frequency for each number is within a reasonable tolerance (e.g., +/- 5%) of the expected frequency.","The distribution of dice roll results is uniform, confirming the RNG is fair and not biased.",N/A,NUnit,2,TASK-01-121-01
TC-CORE-121-003,Game Flow & Turn Management,Functional,Integration,Critical,High,"Verify that rolling a single double correctly grants the player an extra turn.","A game is in progress. It is the active player's turn.","1. Mock the `DiceService` to return a double (e.g., 4, 4).
2. Execute the player's turn.
3. After the token moves and the landing action is complete, check the active player index in the `GameState`.","The active player index remains the same, and the consecutive doubles counter for that player is set to 1. The game awaits another roll from the same player.",Mock `DiceService`.,NUnit, Unity Test Framework,1.5,TASK-01-121-02
TC-CORE-121-004,Game Flow & Turn Management,Functional,Integration,Critical,High,"Verify that rolling three consecutive doubles sends the player to jail.","A game is in progress. The active player has already rolled doubles twice in their current turn sequence.","1. Mock the `DiceService` to return a third double.
2. Execute the player's turn.
3. Observe the resulting player state.","The player's token is NOT moved according to the dice sum. The player's `status` is set to `InJail`, their `position` is set to the Jail space index, and the turn passes to the next player.",Mock `DiceService`.,NUnit, Unity Test Framework,1.5,TASK-01-121-02
TC-CORE-122-001,Core Engine & Game State,Functional,Integration,Critical,High,"Verify the three methods for getting out of jail (Pay, Card, Roll) correctly update the player's state.","A game state is loaded where the active player is in jail.","1. **Pay Fine**: Call the 'Pay Fine' method. Assert cash is reduced by $50 and status is `Active`.
2. **Use Card**: Call the 'Use Card' method. Assert card count is reduced by 1, status is `Active`, and card is returned to deck.
3. **Roll Doubles**: Mock a doubles roll. Call the 'Roll' method. Assert status is `Active`, token moves, and NO extra turn is granted.","Each exit method correctly modifies the `PlayerState` (status, cash/card count) and allows the turn to proceed or end as per the rules.",Pre-configured `GameState` with a jailed player who has cash and a GOOJFC.,NUnit, Unity Test Framework,3,TASK-01-122-02
TC-CORE-122-002,Game Flow & Turn Management,Functional,Integration,Critical,High,"Verify the forced payment rule on the third turn in jail.","A game state is loaded where the active player is in jail with `jail_turns_remaining` = 1.","1. Mock a non-doubles roll from the `DiceService`.
2. Execute the jail turn logic.
3. Assert that the player's cash is reduced by $50.
4. Assert the player's status is `Active`.
5. Assert the player's token moves the distance of the non-doubles roll.","The player is forced to pay the fine and then moves, correctly following the third-turn jail rule.",Pre-configured `GameState` for 3rd turn in jail.,NUnit, Unity Test Framework,2,TASK-01-122-04
TC-SYS-122-003,User Interface (UI) & Visual Experience (VX),Functional,System,High,Medium,"Verify the Jail Options UI modal functions correctly.","A game is running, and the human player's token is in the 'In Jail' state.","1. Start the human player's turn.
2. Observe that the 'Jail Options' modal appears.
3. Verify that the 'Pay Fine' button is disabled if cash < $50.
4. Verify that the 'Use Card' button is disabled if the card count is 0.
5. Click the 'Roll for Doubles' button.","The Jail Options modal appears correctly, and its buttons are conditionally enabled based on the player's state. Clicking an option triggers the correct backend logic.",Save file with a jailed player having various cash/card states.,Unity Test Framework,2.5,TASK-01-122-03
TC-CORE-123-001,Core Engine & Game State,Functional,Unit,Critical,High,"Verify the 'Even Building' rule logic prevents uneven purchasing and selling of houses.","A `GameState` is mocked where a player owns a 3-property monopoly (e.g., Light Blue).","1. **Build Test**: Set house counts to (1, 0, 0). Attempt to build on the first property. Assert the `RuleEngine` returns false.
2. **Build Test 2**: Set house counts to (1, 1, 0). Attempt to build on the first property. Assert the `RuleEngine` returns false.
3. **Sell Test**: Set house counts to (2, 1, 1). Attempt to sell from the second property. Assert the `RuleEngine` returns false.","The `RuleEngine` correctly validates all 'even building' and 'even selling' scenarios, returning true for valid actions and false for invalid ones.",Mock `GameState` with various property/house configurations.,NUnit,4,TASK-01-123-03
TC-SYS-123-002,User Interface (UI) & Visual Experience (VX),Usability,System,High,Manual Only,"Verify the Property Management UI provides clear feedback for the Even Building rule.","A game is running where the player owns a monopoly with unevenly developed properties.","1. Open the Property Management UI.
2. Select the property with the most houses.
3. Observe that the 'Build House' button is disabled.
4. Hover over the disabled button.
5. Observe the tooltip message.","The UI correctly disables the build button for properties that would violate the even-building rule and provides a clear tooltip explaining why.",Save file with an unevenly developed monopoly.,Manual Testing,1.5,TASK-04-423-01
TC-CORE-125-001,Core Engine & Game State,Functional,Integration,Critical,High,"Verify the bankruptcy process when a player is bankrupted by another player.","A `GameState` is configured where Player B owes a debt to Player A that they cannot pay, even after liquidating all assets.","1. Trigger the bankruptcy of Player B to Player A.
2. Inspect the `PlayerState` of Player A after the transaction.
3. Inspect the `PlayerState` of Player B after the transaction.","All of Player B's assets (cash, properties, cards) are transferred to Player A. Mortgaged properties remain mortgaged. Player B's status is set to `Bankrupt`.",Pre-configured `GameState` on the verge of bankruptcy.,Unity Test Framework,3,TASK-01-125-02
TC-CORE-125-002,Core Engine & Game State,Functional,Integration,Critical,High,"Verify the bankruptcy process when a player is bankrupted by the Bank.","A `GameState` is configured where a player owes a debt to the Bank that they cannot pay.","1. Trigger the player's bankruptcy to the Bank.
2. Observe the subsequent game events.","All of the bankrupt player's properties are returned to the Bank. The `AuctionManager` is then triggered to auction off each of those properties sequentially to the remaining players.",Pre-configured `GameState` for bankruptcy to the bank.,Unity Test Framework,3,TASK-01-125-03
TC-SYS-125-003,User Interface (UI) & Visual Experience (VX),Functional,System,Critical,Medium,"Verify the debt resolution flow for a human player with insufficient cash.","A human player lands on a space and owes a debt (e.g., rent) they cannot immediately pay from their cash balance.","1. Trigger the debt condition.
2. Observe the UI transition.
3. Attempt to sell buildings/mortgage properties to cover the debt.
4. Confirm the debt payment and resume the turn.","The game pauses and forces the player into the Property Management UI. The player can only perform actions that generate cash. Once the debt is covered, the payment is made automatically, and the game resumes.",Save file with a player having low cash and high-value assets.,Unity Test Framework,2.5,TASK-01-125-04
TC-DATA-512-001,Data Persistence & Management,Functional,System,Critical,High,"Perform an End-to-End Save/Load cycle and verify data integrity.","A game is in a complex state (e.g., mid-game, properties developed, one player in jail).","1. Take a snapshot or manually record all key `GameState` variables (all player cash, properties, house counts, bank inventory, card deck order, current turn).
2. Save the game to a slot.
3. Return to the main menu and load the game from that slot.
4. Compare the restored `GameState` with the original snapshot.","The restored `GameState` is identical in every aspect to the state at the moment of saving.",A complex mid-game save file.,Manual Testing, Unity Test Framework,4,WI-511
TC-DATA-512-002,Data Persistence & Management,Functional,System,Critical,Medium,"Verify the system gracefully handles a corrupted save file.","A valid save file exists in the save directory.","1. Manually edit the save file's content to invalidate its checksum.
2. Launch the game and navigate to the 'Load Game' screen.
3. Observe the UI for the slot corresponding to the edited file.","The save slot is visually marked as 'Corrupted' or 'Unusable'. The 'Load' button for this slot is disabled, preventing the user from attempting to load it. The application remains stable.",A valid save file.,Manual Testing,1.5,WI-512
TC-DATA-513-001,Data Persistence & Management,Functional,Integration,High,Medium,"Verify the data migration system successfully upgrades an older (but compatible) save file.","An older version of a valid save file is placed in the save directory.","1. Launch the new version of the game.
2. Navigate to the 'Load Game' screen.
3. Select the slot with the old version and click 'Load'.","The system detects the old version, runs the migration logic in the background, successfully loads the game with the migrated data, and overwrites the old save file with the new format.",A save file from a previous, compatible version of the game.,Unity Test Framework,3,WI-513
TC-DATA-522-001,Data Persistence & Management,Functional,System,High,Medium,"Verify the automatic recovery of a corrupted statistics database from a backup.","A valid SQLite statistics database and at least one valid backup file exist.","1. Corrupt or delete the primary `statistics.db` file.
2. Launch the application.
3. The application should start without a user-facing error.
4. Check the `Player Statistics` screen.
5. Check the `%APPDATA%` directory.","The system detects the corruption, restores the database from the most recent backup, and loads the statistics correctly. The application is fully functional.",A valid statistics DB file and its backup files.,Manual Testing,2,WI-522
TC-UI-425-001,User Interface (UI) & Visual Experience (VX),Non-Functional,System,High,Manual Only,"Verify UI layout integrity on a 21:9 ultrawide aspect ratio.","The game is running.","1. Set the game's resolution to 2560x1080 or a similar 21:9 ratio.
2. Navigate to every screen in the game (Main Menu, Setup, Game Board/HUD, All Modals, Pause Menu, Summary Screen).
3. Check for any visual bugs.","All UI elements are correctly anchored, scaled, and fully visible. There are no overlapping elements, and all text is legible. The game is fully playable.",N/A,Manual Testing,4,WI-425
TC-PERF-411-001,Performance Testing,Non-Functional,Performance,High,Medium,"Verify the game maintains the required frame rate on recommended hardware.","The game is running on a machine that meets the recommended hardware specifications.","1. Start a 4-player game with all AI set to 'Hard'.
2. Play the game until the board is heavily populated with houses and hotels.
3. During a turn with multiple animations (token movement, dice roll, UI updates), monitor the frame rate.","The average frame rate remains at or above 60 FPS, and it does not drop below 45 FPS at any point during the test.",A late-game save file with a highly developed board.,Unity Profiler, FRAPS,4,WI-411
TC-PERF-512-002,Performance Testing,Non-Functional,Performance,High,Medium,"Verify that game loading time meets the specified requirement.","The game is running on a machine that meets the recommended hardware specs, including an SSD.","1. From the main menu, select a complex, late-game save file to load.
2. Start a timer the moment the 'Load' button is clicked.
3. Stop the timer the moment the game board is fully rendered and interactive.
4. Repeat 5 times and average the result.","The time elapsed from initiating the 'Load Game' action to the game being playable does not exceed 10 seconds.",A late-game save file.,Stopwatch, Unity Profiler,1.5,WI-512
TC-AI-223-001,Player & AI Systems,Functional,System,High,High,"Verify that 'Hard' AI opponents actively attempt to create housing shortages.","A game is in progress where a 'Hard' AI has a monopoly and there is a low supply of houses remaining in the bank.","1. Observe the 'Hard' AI's behavior during its 'Pre-Roll Management Phase'.
2. The AI should prioritize buying up the remaining houses, even if it's not the most optimal placement, to deny them to other players.
3. Check the debug logs for AI decision-making.","The 'Hard' AI demonstrates the strategic behavior of creating a housing shortage by purchasing the last available houses from the bank.",A save file where a housing shortage is imminent.,Unity Test Framework, Game Logs,3,WI-223
TC-AI-223-002,Player & AI Systems,Usability,UAT,High,Manual Only,"Evaluate the perceived fairness and challenge of the 'Medium' AI.","A human tester plays a full game against three 'Medium' AI opponents.","1. Play a complete game from start to finish.
2. Pay attention to the AI's trading decisions, property acquisition priorities, and building strategies.
3. After the game, fill out a qualitative feedback form.","The 'Medium' AI plays competently. It prioritizes monopolies, makes reasonable trade offers, and does not make obviously foolish mistakes. It provides a fair and engaging challenge for an average player.",N/A,Manual Testing (Playtesting),8,WI-223
TC-INST-631-001,Technical Foundation & DevOps,Functional,System,Critical,Manual Only,"Verify the full installation and uninstallation process on a clean Windows 11 machine.","A clean Windows 11 virtual machine is available. The final installer `.exe` is ready.","1. Run the installer, using a custom directory and creating a desktop shortcut.
2. Verify all files are installed correctly.
3. Verify the shortcut works and launches the game.
4. Verify the game appears in 'Apps & features'.
5. Run the uninstaller, choosing to remove all user data.
6. Verify all application files, shortcuts, and user data directories are completely removed.","The installer and uninstaller function perfectly on the target OS, providing a clean and professional user experience.",Final installer package.,Virtual Machine (Windows 11),2,WI-631