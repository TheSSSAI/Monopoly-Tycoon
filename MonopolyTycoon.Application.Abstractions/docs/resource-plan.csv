task_id,task_name,primary_skill,secondary_skill,complexity_level,estimated_hours,required_experience,team_size,dependencies,critical_path,resource_notes,alternative_approach
TASK-FOUND-001,Initialize Git Repository,DevOps,Configuration Management,Low,2,Mid,1,"",Yes,"Standard task for a DevOps or Lead developer.","Use a pre-made Unity .gitignore template from GitHub to speed up configuration."
TASK-FOUND-002,"Create Solution and Project Structure",Backend Development,Frontend Development,Medium,4.5,Lead,1,TASK-FOUND-001,Yes,"Requires Lead developer to establish the foundational architecture.","Start with a pre-existing Unity/.NET project template if available to reduce setup time."
TASK-FOUND-003,Enforce Coding Standards,Backend Development,DevOps,Low,0.5,Lead,1,TASK-FOUND-002,Yes,"Quick task for the Lead developer to ensure project-wide consistency.","Defer detailed rule configuration and start with default Roslyn analyzers."
TASK-LOG-001,Implement Logging Service with Serilog,Backend Development,DevOps,Medium,3,Mid,1,TASK-FOUND-002,Yes,"Requires a backend developer comfortable with setting up infrastructure libraries.","Start with basic console logging and add Serilog configuration later to unblock other tasks."
TASK-LOG-002,Configure Rolling File Sink and Policies,Backend Development,DevOps,Medium,4.2,Mid,1,TASK-LOG-001,Yes,"Requires knowledge of Serilog sinks and file system I/O.","Implement a simple file sink first, adding the complex retention policy in a later refinement sprint."
TASK-LOG-003,Implement PII Sanitization Filter,Backend Development,Quality Assurance,Low,0.8,Senior,1,TASK-LOG-001,No,"Requires senior-level attention to detail to ensure security/privacy compliance.","Rely on strict code reviews to manually prevent PII logging as a temporary measure, but this is high risk."
TASK-ERR-001,Implement Global Exception Handler Hook,Backend Development,Frontend Development,Medium,4,Senior,1,TASK-FOUND-002,Yes,"Requires a senior developer with experience in both Unity's and .NET's application lifecycles.","Implement Unity's `Application.logMessageReceived` first for basic error catching, then add the AppDomain handler for more comprehensive coverage."
TASK-ERR-002,"Create Modal Error Dialog UI",Frontend Development,Design,Medium,4.2,Mid,1,"",Yes,"Standard UI task for a frontend/Unity developer.","Use a basic, unstyled system dialog as a placeholder to unblock integration work."
TASK-ERR-003,"Integrate Handler with Logging and UI",Backend Development,Frontend Development,High,5.5,Lead,1,"TASK-ERR-001,TASK-ERR-002,TASK-LOG-001",Yes,"Critical integration task for the Lead Developer to ensure system stability.","Have the handler only log to the console initially. Full UI integration can follow once the core logic is proven."
TASK-ERR-004,Create Test Harness for Exception Handling,Quality Assurance,Backend Development,Low,0.8,Mid,1,TASK-ERR-003,No,"Good task for a QA engineer or developer to build a reusable testing tool.","Rely on manual code changes to trigger exceptions for initial testing, but this is inefficient."
TASK-DOM-001,"Define and Implement PlayerState Class",Backend Development,Data Engineering,Medium,3,Mid,1,TASK-FOUND-002,Yes,"Core data modeling task. Requires careful attention to data types and serialization needs.","Start with a minimal class containing only essential fields (ID, cash, position) and add other properties as features require them."
TASK-DOM-002,Define Property Data Structures,Backend Development,Data Engineering,Medium,3,Mid,1,TASK-FOUND-002,Yes,"Fundamental data modeling task. The structure must be flexible enough for all property types.","Use a single, flat class with nullable fields for all property types initially, and refactor into a proper class hierarchy later."
TASK-DOM-003,Create Board Data Asset,Backend Development,Data Engineering,Medium,3,Junior,1,TASK-DOM-002,Yes,"Data entry-heavy task suitable for a junior developer, but requires high accuracy.","Manually populate only the first 10 spaces to unblock initial movement testing, completing the rest in a subsequent task."
TASK-DOM-004,"Design and Implement GameState Class",Backend Development,Data Engineering,High,5.5,Lead,1,"TASK-DOM-001,TASK-DOM-002",Yes,"This is the architectural core of the game's data. Must be handled by a Lead developer.","Break the GameState into smaller, more manageable sub-state objects (e.g., BoardState, BankState) and aggregate them, rather than one massive class."
TASK-DOM-005,Unit Test GameState Serialization,Quality Assurance,Backend Development,Medium,3.2,Mid,1,TASK-DOM-004,Yes,"Critical quality check to prevent save/load corruption.","Test serialization of individual sub-state objects first, then test the full aggregate GameState."
TASK-BUILD-001,Develop Basic Inno Setup Script,DevOps,Quality Assurance,Medium,5,Mid,1,"",No,"Requires a developer with installer scripting experience. Depends on having a build artifact.","Use a simple batch script to zip the build output as a temporary distribution method for internal testing."
TASK-UI-001,Implement Scene Management Service,Frontend Development,Backend Development,Medium,4,Mid,1,"",Yes,"Foundational UI architecture task. A robust implementation is crucial for a smooth user experience.","Use Unity's built-in `SceneManager.LoadScene` directly in UI controllers initially, and refactor to a centralized service later."
TASK-UI-002,Implement Main Menu UI and Controller,Frontend Development,Design,High,6,Mid,1,TASK-UI-001,Yes,"Requires a frontend developer with a good eye for UI layout and user flow.","Create a simple scene with functional but unstyled buttons to unblock navigation logic. Apply visual polish later."
TASK-SETUP-001,"Implement Profile Name Input and Validation",Frontend Development,Quality Assurance,Medium,3,Mid,1,"",Yes,"Standard UI form implementation with real-time validation logic.","Implement validation only on the 'Start Game' button click initially, adding real-time validation as a polish step."
TASK-SETUP-002,Implement Token Selection UI,Frontend Development,Design,Medium,4,Mid,1,"",Yes,"Requires collaboration with a designer/artist for token assets.","Use simple colored circles or squares as placeholder tokens to unblock development until final assets are ready."
TASK-SETUP-003,Implement AI Opponent Configuration UI,Frontend Development,Design,Medium,4.2,Mid,1,"",Yes,"Requires dynamic UI logic to show/hide configuration panels based on user selection.","Start with a fixed number of opponents (e.g., 2) to simplify the initial UI, adding the dynamic selection later."
TASK-SETUP-004,"Integrate Setup Screen and Game Initialization",Backend Development,Frontend Development,Medium,4.2,Lead,1,"TASK-SETUP-001,TASK-SETUP-002,TASK-SETUP-003,TASK-DOM-004",Yes,"Key integration point connecting the user's configuration to the core game engine.","Hardcode a default game configuration to allow for testing the game board scene independently of the setup flow."
TASK-3D-001,Set up Main Gameplay Scene,Design,Frontend Development,Medium,3,Mid,1,"",Yes,"Requires a 3D artist or technical artist to establish the primary visual environment.","Use a simple plane and basic lighting to allow for gameplay logic development before the final scene is polished."
TASK-3D-002,Import and Place Board Assets,Design,Frontend Development,Medium,5,Mid,1,TASK-3D-001,Yes,"Requires final 3D assets to be available. Task for a 3D artist or level designer.","Use simple geometric shapes (cubes, cylinders) as placeholder assets for the board and buildings to unblock gameplay development."
TASK-TURN-001,Design and Implement Turn FSM,Backend Development,Product Management,High,7.3,Lead,1,TASK-DOM-004,Yes,"Architecturally critical task. The FSM must be robust and extensible.","Implement a simpler, linear turn manager first (roll -> move -> action -> end) and refactor it into a full FSM as more complex turn phases are needed."
TASK-RULE-001,Implement Dice Service,Backend Development,Quality Assurance,Medium,3,Mid,1,"",Yes,"The use of a cryptographically secure RNG is a key requirement.","Use Unity's standard `Random.Range` for initial development and replace it with the secure generator before QA."
TASK-MOVE-001,"Implement Board Space Pathing System",Frontend Development,Backend Development,Medium,3,Mid,1,TASK-3D-002,Yes,"Requires mapping logical board indices to 3D world coordinates.","Hardcode the path for a short sequence of spaces (e.g., first 5) to test the animation controller, then implement the full pathing system."
TASK-MOVE-002,Implement Token Animation Controller,Frontend Development,Design,Medium,4.2,Mid,1,TASK-MOVE-001,Yes,"Core visual feedback task. Animation smoothness is key to game feel.","Use simple, linear interpolation for movement initially. Refine with easing curves or more advanced tweening as a polish step."
TASK-MOVE-003,Implement Camera Follow Logic,Frontend Development,Design,Medium,2.8,Mid,1,TASK-MOVE-002,No,"Camera work is crucial for presentation. A poorly implemented camera can be jarring.","Have a fixed, wide-shot camera initially. Implement the dynamic follow camera as a separate polish task."
TASK-RULE-002,Implement Player Movement and GO Salary Logic,Backend Development,Quality Assurance,Medium,4.2,Mid,1,TASK-DOM-004,Yes,"Core rule logic. Must be 100% accurate to the official rules.","Implement movement logic first. Add the GO salary logic as a separate commit/task to isolate testing."
TASK-RULE-003,"Implement Doubles and 3-Doubles-to-Jail Rule",Backend Development,Quality Assurance,High,6.3,Senior,1,"TASK-RULE-001,TASK-RULE-002",Yes,"Complex rule with state that persists across multiple rolls. High potential for bugs.","Implement the 'extra turn on doubles' logic first. Add the '3 doubles to jail' rule as a separate, subsequent feature."
TASK-HUD-001,Create Player Panel UI Prefab,Frontend Development,Design,Medium,3,Mid,1,"",Yes,"This is a core, reusable UI component. The layout must be flexible.","Create a functional but unstyled prefab first. Apply final art and styling once the layout is proven in-game."
TASK-HUD-002,Implement Game HUD Controller,Frontend Development,Backend Development,Medium,4.2,Mid,1,TASK-HUD-001,Yes,"Responsible for dynamically creating the HUD based on game setup.","Hardcode the HUD for a 4-player game initially. Add the logic to dynamically create 2-4 panels later."
TASK-HUD-003,Implement Event-Driven HUD Updates,Backend Development,Frontend Development,High,6.3,Lead,1,"TASK-HUD-002,TASK-TURN-001",Yes,"Architecturally important task to decouple the UI from game logic.","Start with a direct polling/update approach from the game manager. Refactor to an event-driven model once the core game loop is stable."
TASK-UI-006,Design and Implement Reusable Modal Prefab,Frontend Development,Design,Medium,4.2,Mid,1,"",Yes,"A foundational UI component for many features. Must be generic and extensible.","Build the first required modal (e.g., 'Buy Property') as a specific prefab, then refactor it into a generic system."
TASK-UI-007,Integrate Modal System with Game Flow,Backend Development,Frontend Development,Medium,4.3,Lead,1,"TASK-UI-006,TASK-TURN-001",Yes,"Requires careful management of the game's paused state while a modal is active.","Use Unity's `Time.timeScale = 0` for a simple pause mechanism initially. Implement a more robust, state-based pause system if needed."
TASK-RULE-009,"Implement 'Buy Property' Transaction",Backend Development,Quality Assurance,Medium,3.2,Mid,1,TASK-DOM-004,Yes,"Straightforward transaction logic, but must be atomic.","Log the transaction to the console first. Connect to the UI and visual feedback systems after the core logic is unit-tested."
TASK-RULE-010,Implement Property Auction Logic,Backend Development,Quality Assurance,High,7.2,Senior,1,TASK-DOM-004,Yes,"Complex sub-system with its own turn-based flow. Requires careful state management.","Implement the auction logic with console input/output for bidding first to prove the logic, then build the UI on top."
TASK-RULE-008,Implement Rent Calculation Logic,Backend Development,Quality Assurance,High,6,Senior,1,TASK-DOM-004,Yes,"Very complex logic with many branches (monopoly, houses, railroads, utilities). Must be 100% accurate.","Implement and unit test rent calculation for each property type separately (deeds, then railroads, then utilities) before combining them."
TASK-RULE-009-B,Implement Rent Payment Transaction,Backend Development,Quality Assurance,Medium,3.2,Mid,1,"TASK-RULE-008,TASK-RULE-016",Yes,"Connects the rent calculation to the player's wallet and the bankruptcy system.","Assume the player can always pay initially. Add the link to the bankruptcy flow after the happy path is working."
TASK-RULE-016,Implement Asset Liquidation and Solvency Check,Backend Development,Quality Assurance,High,6.2,Senior,1,TASK-RULE-011,Yes,"Core bankruptcy logic. Must correctly calculate total potential funds from all assets.","Implement the solvency check first. The automated asset liquidation can be a separate, more complex task."
TASK-RULE-017,Implement Asset Transfer for Player-to-Player Bankruptcy,Backend Development,Quality Assurance,Medium,4.3,Senior,1,TASK-RULE-016,Yes,"Handles the transfer of a complex portfolio of assets. Must be an atomic transaction.","First, implement the transfer of cash only. Then add property transfer logic, and finally handle cards and other special assets."
TASK-RULE-004,"Implement 'Pay Fine' and 'Use Card' Jail Actions",Backend Development,Quality Assurance,Medium,4.2,Mid,1,TASK-DOM-004,Yes,"Core jail rule implementation. Involves updating player state and deck state.","Implement the 'Pay Fine' logic first as it's a simple transaction. The 'Use Card' logic is more complex as it involves the deck."
TASK-RULE-005,"Implement 'Roll for Doubles' Jail Logic",Backend Development,Quality Assurance,Medium,3,Mid,1,TASK-RULE-001,Yes,"Implements a key rule exception: getting out on doubles does not grant an extra turn.","Focus on correctly handling the state change from 'InJail' to 'Active' and ensuring the turn ends properly."
TASK-RULE-006,Implement 3rd Turn Jail Logic and Forced Payment,Backend Development,Quality Assurance,Medium,4.5,Senior,1,"TASK-RULE-005,TASK-RULE-016",Yes,"Complex interaction of jail rules, payment, and the bankruptcy system.","Implement the forced payment for a player with sufficient funds first. Then, add the integration with the bankruptcy flow for the insufficient funds case."
TASK-RULE-011,Implement Mortgage/Unmortgage Logic,Backend Development,Quality Assurance,Medium,4.2,Mid,1,TASK-DOM-004,Yes,"Core economic action. The 10% interest on unmortgaging is a key detail.","Implement the mortgage logic first. Unmortgaging is a separate but related action that can be done as a fast follow."
TASK-RULE-012,Implement 'Even Building' Validation Logic,Backend Development,Quality Assurance,High,6.2,Senior,1,TASK-DOM-004,Yes,"Complex validation logic that must check the state of an entire property group.","Implement the validation for building first. The validation for selling is the inverse and can reuse parts of the logic."
TASK-RULE-013,"Implement 'Build House' Transaction",Backend Development,Quality Assurance,Medium,5,Mid,1,TASK-RULE-012,Yes,"A multi-step transaction involving multiple parts of the GameState (player, bank, board).","Implement the transaction assuming all validation passes. Integrate the validation logic from TASK-RULE-012 just before committing the state change."
TASK-RULE-014,"Implement 'Build Hotel' Transaction",Backend Development,Quality Assurance,Medium,5,Senior,1,TASK-RULE-013,Yes,"Similar to building a house, but with the added complexity of returning houses to the bank.","Build on the 'Build House' logic. The key difference is the inventory swap (1 hotel out, 4 houses in)."
TASK-RULE-015,Implement Building Shortage Auction Logic,Backend Development,Quality Assurance,Medium,3.2,Senior,1,"TASK-RULE-010,TASK-RULE-013",No,"Edge-case rule that combines two complex systems: building and auctions.","First, simply block building when there is a shortage. Add the auction logic as a stretch goal or later feature if time is a constraint."
TASK-PROP-001,"Design and Implement Property Management UI Layout",Frontend Development,Design,High,6,Mid,1,"",Yes,"Complex UI screen with a lot of information. Needs careful layout design.","Start with a simple vertical list of properties. Refine into a more polished, grouped layout once functionality is proven."
TASK-PROP-002,Implement Property Management Controller and Data Binding,Frontend Development,Backend Development,High,7.2,Mid,1,"TASK-PROP-001,WI-010",Yes,"The controller needs to efficiently read from the GameState and handle all user actions.","Connect the UI to mock data first to rapidly develop the layout and interactions. Connect to the live GameState for integration."
TASK-PROP-003,Implement Dynamic UI Control State Logic,Frontend Development,Backend Development,High,6.2,Mid,1,TASK-PROP-002,Yes,"The logic for enabling/disabling buttons is complex and depends on many game rules.","Implement one rule at a time for button states (e.g., first cash, then monopoly, then even-build) and test each one incrementally."
TASK-TRADE-001,"Design and Implement Two-Panel Trade UI Layout",Frontend Development,Design,High,7,Mid,1,"",Yes,"A very complex UI screen. Information architecture is key to usability.","Build the UI with static placeholder data to finalize the layout before attempting to bind it to the dynamic game state."
TASK-TRADE-002,Implement Trade Controller and Data Binding,Frontend Development,Backend Development,Critical,8.3,Senior,1,TASK-TRADE-001,Yes,"Manages the complex state of a pending trade offer. High potential for bugs.","Separate the 'inventory view' logic from the 'offer panel' logic. The offer panel should manage a temporary TradeOffer object."
TASK-TRADE-003,Implement Trade Offer Validation and Submission,Frontend Development,Backend Development,High,6.2,Mid,1,"TASK-TRADE-002,TASK-AI-005",Yes,"Real-time validation is key to a good user experience.","Use simple UI feedback for validation first (e.g., console logs). Add polished visual feedback (e.g., red outlines) later."
TASK-TRADE-004,Implement Incoming Offer Display Logic,Frontend Development,Backend Development,Medium,3.2,Mid,1,TASK-TRADE-002,No,"Requires the trade UI to be flexible enough to operate in a 'read-only' proposal mode.","Reuse the main trade UI but disable editing controls and show the Accept/Decline buttons. This is better than building a separate UI."
TASK-AI-005,Implement AI Trade Evaluation Logic,Backend Development,Product Management,Critical,12,Lead,1,TASK-AI-004,Yes,"The heart of the AI's strategic intelligence. Very complex to balance.","Start with a very simple evaluation (e.g., total monetary value of assets). Iteratively add more sophisticated heuristics (e.g., monopoly potential)."
TASK-RULE-018,Implement Asset Return for Bank Bankruptcy,Backend Development,Quality Assurance,Medium,4.2,Senior,1,"TASK-RULE-010,TASK-RULE-016",Yes,"Handles the process of returning assets to the bank and triggering subsequent auctions.","Implement the asset return logic first. The triggering of sequential auctions can be a separate step."
TASK-RULE-019,Implement Win/Loss Condition Detection,Backend Development,Quality Assurance,Medium,3,Mid,1,"TASK-RULE-017,TASK-RULE-018",Yes,"Simple logic but a critical integration point in the game flow.","The check should be performed in a centralized place, e.g., after any action that can change a player's status."
TASK-RULE-020,Implement Post-Loss AI Simulation Mode,Backend Development,Data Engineering,High,6.3,Senior,1,"WI-016,EPIC-006",No,"Requires running the core game loop without UI updates or delays, which can be complex to implement cleanly.","Decouple the core game logic from Unity's `MonoBehaviour` update loop from the start to make this 'headless' simulation mode easier to implement."
TASK-UI-011,"Create Game Over/Victory/Summary UI Screens",Frontend Development,Design,Critical,8,Mid,1,"",Yes,"These screens are the final payoff for the player. They need to be polished and informative.","Develop a single, generic end-screen template and populate it with different text/visuals for win, loss, and summary to save time."
TASK-RULE-021,"Integrate Game End Logic with UI Screens",Backend Development,Frontend Development,Low,0.7,Lead,1,"TASK-RULE-019,TASK-RULE-020,TASK-UI-010,TASK-UI-011",Yes,"A simple wiring task, but it connects several major systems together.","Use a simple event system. The game logic fires a `GameEnded` event, and a UI manager listens for it to show the correct screen."
TASK-AI-001,Implement Core Behavior Tree Nodes,Backend Development,Product Management,Critical,8.3,Lead,1,"",Yes,"Architectural foundation for the entire AI system. Must be solid and performant.","Use a well-documented, open-source C# behavior tree library instead of writing one from scratch to save significant time and effort."
TASK-AI-002,Implement AI Agent and Tree Runner,Backend Development,Frontend Development,Critical,8.2,Senior,1,"TASK-AI-001,TASK-TURN-001",Yes,"Connects the abstract behavior tree to the concrete game world.","Develop the runner to execute a single, simple tree first (e.g., a tree that just rolls the dice and ends the turn). Then, expand its capabilities."
TASK-AI-003,"Define and Create AI Configuration JSON",Backend Development,Product Management,Medium,3,Mid,1,"",Yes,"The definition of this schema is critical for AI tuning. Requires game design input.","Start with a very small number of parameters (2-3) and expand the configuration file as the AI's behaviors become more complex."
TASK-AI-004,Implement JSON Configuration Loader Service,Backend Development,DevOps,Medium,4.5,Mid,1,TASK-AI-003,Yes,"Standard data loading/deserialization task. Must handle file-not-found and parsing errors gracefully.","The service should cache the loaded configuration in memory to avoid repeated file I/O during gameplay."
TASK-AI-006,Implement AI Behavior Tree: Pre-Roll Actions,Backend Development,Product Management,Critical,12,Senior,1,"TASK-AI-001,TASK-AI-005",Yes,"One of the most complex parts of the AI logic, involving strategic decisions.","Implement each decision as a separate subtree (e.g., 'Should I build?', 'Should I propose a trade?'). Use a `Selector` node to decide which action to take."
TASK-AI-007,Implement AI Behavior Tree: Post-Roll Actions,Backend Development,Product Management,Critical,12,Senior,1,"TASK-AI-001,TASK-AI-004",Yes,"Handles the AI's reaction to its move, such as buying property or bidding in auctions.","The 'Buy Property' decision can be a simple node checking the AI's config threshold. The auction bidding logic will be a more complex subtree."
TASK-AI-008,Implement AI Behavior Tree: Jail and Debt Management,Backend Development,Product Management,Critical,12,Senior,1,TASK-AI-001,Yes,"Crucial for AI survival. The logic for what assets to liquidate first defines the AI's financial 'personality'.","The decision to get out of jail early vs. wait can be a key parameter in the config file, differentiating 'aggressive' from 'conservative' AIs."
TASK-UI-008,Implement Notification Manager Service,Frontend Development,Backend Development,Medium,1.5,Mid,1,TASK-UI-008,No,"A simple service, but useful across the entire application for non-modal feedback.","Implement with a simple queue system to handle multiple notifications appearing in quick succession."
TASK-UI-009,Create Notification Toast Prefab and Controller,Frontend Development,Design,Medium,3,Mid,1,"",No,"The visual design should be clean and non-intrusive.","Use a tweening library (like LeanTween or DOTween) to easily script the fade-in/out animations."
TASK-SAVE-001,Implement GameState Serialization and File Writing,Backend Development,Data Engineering,High,6.2,Senior,1,TASK-DOM-005,Yes,"Core persistence logic. Checksumming and versioning are critical for robustness.","Write the core JSON serialization first. Add the checksum and versioning logic in a separate step."
TASK-SAVE-002,Implement Save Game UI Screen,Frontend Development,Backend Development,High,6.2,Mid,1,TASK-UI-005,Yes,"Requires reading file metadata from disk, which can be slow if not done asynchronously.","Load the metadata for all save slots in the background when the screen is opened to avoid UI freezes."
TASK-SAVE-003,Implement Overwrite Confirmation Dialog,Frontend Development,Design,Low,0.7,Mid,1,"TASK-UI-006,TASK-SAVE-002",No,"Simple integration with the existing modal dialog system.","The 'confirm' button should be styled as a destructive action (e.g., red) to warn the user."
TASK-LOAD-001,Implement GameState Deserialization and Validation,Backend Development,Data Engineering,High,6.3,Senior,1,TASK-SAVE-001,Yes,"The reverse of the save process. Error handling for corrupted files is paramount.","Wrap the entire file read and deserialization process in a try-catch block to prevent crashes from malformed files."
TASK-LOAD-002,Implement Load Game UI Screen,Frontend Development,Backend Development,High,6.2,Mid,1,"TASK-LOAD-001,TASK-UI-002",Yes,"The UI must clearly communicate the state of each save slot.","The validation for all slots should be done in a single batch process when the screen loads to avoid sequential delays."
TASK-LOAD-003,Implement Game State Restoration,Backend Development,Frontend Development,Medium,2.5,Lead,1,TASK-LOAD-001,Yes,"Complex process of tearing down the current scene and rebuilding it from data.","The cleanest approach is to load a 'bootstrap' scene that reads the loaded GameState and then additively loads the main game scene, populating it with the data."
TASK-STAT-001,Setup SQLite Database and Schema,Backend Development,Data Engineering,High,6,Mid,1,"",Yes,"Requires knowledge of SQL and database design. The initial schema setup is critical.","Use a lightweight ORM like Dapper or EF Core SQLite provider to simplify database interactions and prevent SQL injection."
TASK-STAT-002,Implement Statistics Repository,Backend Development,Data Engineering,Critical,8.3,Mid,1,TASK-STAT-001,Yes,"The central point of access for all persistent player data. Must handle transactions correctly.","All write operations (e.g., updating stats after a game) MUST be wrapped in a single database transaction to ensure atomicity."
TASK-STAT-003,Integrate Statistics Update with Game End Flow,Backend Development,Frontend Development,Medium,3,Mid,1,"TASK-STAT-002,TASK-RULE-019",Yes,"Connects the gameplay result to the long-term persistence layer.","The game end logic should produce a `GameSummary` object, which is then passed to the StatisticsRepository to be saved."
TASK-STAT-004,"Implement Statistics and High Score UI Screens",Frontend Development,Backend Development,High,7,Mid,1,TASK-STAT-002,No,"Read-only screens, but require clean formatting of data from the database.","The UI should read data from the repository asynchronously to prevent blocking the main menu while the database is being queried."
TASK-UI-005,Implement In-Game Pause Menu (US-054),Frontend Development,Design,Medium,2.8,Mid,1,WI-016,Yes,"Standard UI feature. The pausing of the game simulation is the key technical part.","Use a dedicated 'pause' state in the main game FSM rather than just setting `Time.timeScale = 0`, as the latter can have unintended side effects."
TASK-SETTINGS-001,"Implement Game Speed/Volume Settings UI",Frontend Development,Design,Medium,5,Mid,1,TASK-UI-005,Yes,"Standard settings UI. Sliders for volume are a common pattern.","Use Unity's AudioMixer to control volume channels. Bind the UI sliders directly to the exposed AudioMixer parameters."
TASK-SETTINGS-002,"Integrate Audio/Animation Speed Controls",Backend Development,Frontend Development,High,6,Mid,1,TASK-MOVE-002,Yes,"Requires a centralized place where animation/delay durations are defined, so they can be modified by the speed setting.","Avoid using `Time.timeScale`. Instead, all animations and delays should query a `GameSpeedService` for a speed multiplier."
TASK-SETTINGS-003,Implement Data Management Settings UI,Frontend Development,Backend Development,Medium,4,Mid,1,"TASK-STAT-002,TASK-SAVE-001",No,"The destructive nature of these actions requires clear confirmation dialogs.","The backend methods for deleting data should be simple calls to the respective repositories."
TASK-TUTORIAL-001,Implement Tutorial System,Frontend Development,Product Management,Critical,12,Senior,1,"US-015,US-030,US-044",No,"Complex system that needs to override core game logic and guide the user through a specific script.","Design a data-driven tutorial system where the steps are defined in a JSON file. This allows for easier changes to the tutorial flow without code changes."
TASK-RULEBOOK-001,Implement Rulebook UI (US-060),Frontend Development,Data Engineering,Medium,5.2,Mid,1,TASK-UI-002,No,"Key features are loading text from an external file and implementing a simple text search.","For the search, a simple string `Contains()` check on a lowercased version of the rules and search term is sufficient."
TASK-THEME-001,Implement Theme Asset Management System,Backend Development,Design,Critical,8.3,Lead,1,"",No,"Architecturally important for visual customization. Requires a clean way to swap large sets of assets.","Use Unity's Addressables system to manage theme assets. This allows loading themes on demand and can support future downloadable themes."
TASK-THEME-002,Implement Theme Selection UI in Settings,Frontend Development,Design,Medium,4,Mid,1,TASK-THEME-001,No,"Simple UI to trigger the theme change.","When a theme is selected, show a loading spinner and apply the theme asynchronously to avoid freezing the game."
TASK-THEME-003,Refactor UI Components to be Theme-Aware,Frontend Development,Design,Critical,8.3,Mid,1,TASK-THEME-001,No,"A significant refactoring task. All UI components must source their visuals from the ThemeManager.","Create `ThemedImage` and `ThemedText` components that automatically update when the theme changes, reducing boilerplate code in controllers."
TASK-THEME-004,"Refactor 3D Board and Audio to be Theme-Aware",Frontend Development,Design,Medium,4,Mid,1,TASK-THEME-001,No,"Similar to the UI refactoring, but for in-world assets and sounds.","The `ThemeManager` should hold references to different prefabs for the board and tokens, which are swapped out when the theme changes."
TASK-TEST-001,Write Unit Tests for Rule Engine,Quality Assurance,Backend Development,Critical,16,Senior,1,EPIC-002,Yes,"Time-consuming but critical for ensuring game integrity. Must cover all rules and edge cases.","Focus tests on the most complex interactions, like bankruptcy calculations and the even-building rule."
TASK-TEST-002,Write Unit Tests for AI Decision Stubs,Quality Assurance,Backend Development,High,8,Mid,1,EPIC-006,No,"Tests should verify that, given a specific game state, the AI makes the expected decision.","Use a mocking framework to provide mock GameState objects to the AI for testing its logic in isolation."
TASK-TEST-003,Implement Save/Load Integration Test,Quality Assurance,Backend Development,Critical,6,Mid,1,"WI-026,WI-027",Yes,"The ultimate validation of the persistence system. The test must be comprehensive.","The deep comparison of GameState objects must handle collections and nested objects. A custom equality comparer might be necessary."
TASK-TEST-004,Implement Trade Workflow Integration Test,Quality Assurance,Backend Development,Critical,6,Mid,1,"WI-021,WI-025",Yes,"Tests the full, atomic transaction of a trade from proposal to completion.","The test should set up the initial state, trigger the trade, and then assert the final state of both players' inventories."
TASK-TEST-005,Implement Bankruptcy Workflow Integration Test,Quality Assurance,Backend Development,Critical,6,Mid,1,WI-011,Yes,"Tests one of the most complex state changes in the game. Must be robust.","Test both bankruptcy to the bank and bankruptcy to another player, as the asset transfer logic is different."
TASK-TEST-006,"Create Test Data Generation Tool/Method",Quality Assurance,Backend Development,High,4.2,Mid,1,WI-026,No,"A huge time-saver for QA. Allows for targeted testing of late-game scenarios.","The tool could be a simple debug UI that allows editing a live GameState object and then saving it."
TASK-TEST-007,Generate and Validate Edge Case Save Files,Quality Assurance,Data Engineering,High,4,Junior,1,TASK-TEST-006,No,"Task for a QA engineer using the tool built in the previous task.","Each generated save file should be documented with the scenario it represents and the steps to reproduce it manually."
TASK-AI-009,"AI Behavior Tree Tuning and Playtesting",Product Management,Quality Assurance,High,8,Senior,1,"TASK-AI-006,TASK-AI-007,TASK-AI-008",No,"Crucial for the final game feel. The AI must feel fair and distinct at different levels.","Use a data-driven approach. Log the AI's decisions and outcomes during playtests to identify patterns and areas for tuning."
TASK-UPD-001,Implement Update Check Service,Backend Development,DevOps,Medium,4,Mid,1,"",No,"Requires a simple, asynchronous web request. Must handle network errors gracefully.","The service must not block the application's startup. The request should have a short timeout (e.g., 5 seconds)."
TASK-UPD-002,"Create Main Menu Update Notification UI",Frontend Development,Design,Medium,3,Mid,1,WI-012,No,"A simple UI element that is hidden by default and shown only when an update is available.","The notification should contain a clickable link that opens the download URL in the user's default browser."
TASK-UPD-003,"Integrate Update Check with Main Menu",Frontend Development,Backend Development,Medium,3,Mid,1,"TASK-UPD-001,TASK-UPD-002",No,"Simple integration task. The main menu controller calls the service and shows the UI based on the result.","The check should only run once per application session."
TASK-UI-COMP-001,Implement Privacy Policy UI (US-068),Frontend Development,Design,Medium,2,Junior,1,TASK-UI-002,No,"Simple UI task. A modal with scrollable text.","The policy text should be loaded from a local text/JSON file so it can be updated without rebuilding the game."
TASK-BUILD-002,"Implement Custom Uninstaller Logic (US-007)",DevOps,Backend Development,High,6.2,Mid,1,TASK-BUILD-001,No,"Requires scripting in Inno Setup's Pascal Script. Can be tricky to debug.","The script must be robust enough to handle cases where the AppData directory doesn't exist."
TASK-BUILD-003,Procure and Configure Code Signing Certificate,DevOps,Product Management,Medium,4.7,Senior,1,"",No,"This is a process task involving an external vendor. The lead time can be long, so it must be started early.","The certificate's private key must be stored securely, e.g., in a CI/CD secret vault."
TASK-BUILD-004,Automate Build Pipeline,DevOps,Backend Development,High,10.7,Senior,1,"TASK-BUILD-001,TASK-BUILD-003",Yes,"A critical task for efficient development and release. Requires expertise in CI/CD systems.","The pipeline should be triggered on every merge to the main branch to ensure the build is never broken."
TASK-QA-001,Verify HUD on All Aspect Ratios,Quality Assurance,Frontend Development,High,3,Mid,1,TASK-HUD-003,No,"Manual testing task. Requires access to different resolutions or a simulator.","Focus on the most extreme supported ratios (16:10 and 21:9) as they are most likely to show layout issues."
TASK-INT-001,Integrate Turn Manager with Game Logic,Backend Development,Frontend Development,Critical,8.3,Lead,1,"TASK-TURN-001,TASK-MOVE-002,EPIC-002",Yes,"This task connects the abstract FSM to the concrete game actions, making the game playable.","Use a callback or async/await pattern for the Turn Manager to wait for long-running actions like token animation to complete before transitioning state."