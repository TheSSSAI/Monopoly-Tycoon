task_id,task_name,primary_skill,secondary_skill,complexity_level,estimated_hours,required_experience,team_size,dependencies,critical_path,resource_notes,alternative_approach
WS-001,"Initialize Unity Project & Git Repository",DevOps,Frontend Development,Low,2.2,Junior,1,"",No,"Basic task for any developer familiar with Unity and Git. Establishes foundation.",Use a pre-configured project template to accelerate setup.
WS-001,"Create & Configure Core Logic .NET 8 Library",Backend Development,DevOps,Low,4.5,Mid,1,TASK-WI001-01,No,"Requires understanding of VS solution configuration and Unity's interaction with external .NET libraries.","Keep all logic within Unity's Assembly Definitions for simpler setup, at the cost of architectural purity (see RISK-TECH-004)."
WS-001,"Implement PlayerState and Related Enums",Backend Development,Data Engineering,Medium,8.3,Mid,1,TASK-WI002-01,No,"Core data modeling task. Developer needs solid C# and object-oriented design skills for serialization.",Use a simpler data structure initially and refactor later as more properties are needed.
WS-001,"DECOMPOSITION: Implement GameState Serialization (Part 1)",Backend Development,Data Engineering,Medium,8.3,Mid,1,TASK-WI003-01,Yes,"Critical path task. Focus on a robust and extensible serialization structure for the main game state. High risk of bugs if not done carefully (RISK-TECH-002).","Implement a monolithic GameState class first and decompose into smaller models in a later refactoring phase, increasing initial speed but creating technical debt."
WS-001,"DECOMPOSITION: Implement BoardState Serialization (Part 2)",Backend Development,Data Engineering,Medium,8.8,Mid,1,TASK-WI003-03,Yes,"Completes the core data model. Requires careful integration with Part 1 to ensure the entire object graph serializes correctly.","Use a simplified key-value store for property states instead of dedicated objects to speed up initial implementation."
WS-002,"Integrate Serilog and Configure JSON Sink",Backend Development,DevOps,Low,4.2,Mid,1,TASK-WI002-01,No,"Standard library integration. Requires experience with .NET dependency management (NuGet).",Use Unity's built-in Debug.Log and redirect console output to a file for a simpler but less structured logging approach.
WS-002,"Implement Rolling File Policy and Path Configuration",Backend Development,,Medium,6.3,Mid,1,TASK-WI004-01,No,"Requires knowledge of Serilog configuration and platform-specific file path handling (%APPDATA%).","Use a basic file sink with no rolling policy, accepting the risk of very large log files."
WS-002,"Implement Global Exception Handler Logic",Backend Development,Frontend Development,Medium,6.2,Senior,1,TASK-WI004-02,No,"Requires understanding of .NET AppDomain and Unity's execution lifecycle. Critical for application stability.",Rely solely on Unity's crash reporting services (if enabled) and omit the custom dialog for a less user-friendly but faster implementation.
WS-002,"Create and Integrate Error Dialog UI",Frontend Development,Design,Medium,12.2,Mid,1,TASK-WI005-01,No,"Standard UI task but must be robust enough to work even if the main game UI is what crashed.",Use a basic OS-level message box instead of a custom Unity UI to reduce implementation time and dependency on the Unity engine's UI state.
WS-002,"Implement PII Sanitization in Logging",Backend Development,,Low,3.2,Senior,1,TASK-WI004-01,No,"Security-sensitive task. Requires a developer with an understanding of data privacy and Serilog enrichers.","Enforce a strict policy of never logging any user-related data, which may slightly hinder debugging but simplifies implementation."
US-008,"Implement Main Menu UI Shell",Frontend Development,Design,Medium,12.8,Mid,1,TASK-WI001-01,No,"Requires a frontend developer with strong Unity UI (Canvas) and layout skills. Placeholder assets from design are needed.",Use basic Unity UI components with minimal styling to create a functional prototype, deferring visual polish to a later sprint.
US-008,"Implement 'New Game' Button Logic",Frontend Development,Backend Development,Low,4.3,Junior,1,TASK-WI006-01,No,Simple scene transition logic. Can be done by a junior frontend developer.,Connect button directly to scene loading without a dedicated SceneManager for a quicker but less maintainable approach.
US-009,"Implement Game Setup UI Shell",Frontend Development,Design,High,17,Mid,1,TASK-WI006-02,No,"Complex UI screen with multiple dynamic elements. Requires careful layout planning for responsiveness (REQ-1-016).","Create a static UI that only supports a fixed number of players (e.g., 2 AI) to simplify the initial implementation."
US-029,"Implement Turn Manager State Machine (Shell)",Backend Development,,High,17,Senior,1,TASK-WI003-04,Yes,"Critical path architectural task. Requires a senior developer with experience in state machine design. Any delays here will impact the entire schedule (RISK-TIME-001).","Use a simpler, less formal state management approach (e.g., boolean flags), which is faster to implement but significantly harder to maintain and debug."
US-015,"Implement Dice Rolling Logic & UI",Frontend Development,Backend Development,High,25.6,Mid,2,"TASK-WI011-01",No,"Requires a pair of developers: one for the backend `DiceService` and secure RNG, and one for the 3D animation and UI in Unity.",Use a pre-canned 2D animation instead of a 3D physics-based roll to significantly reduce frontend complexity.
US-016,"Implement Token Movement Animation",Frontend Development,,High,34.1,Mid,1,"TASK-WI012-01",No,"Complex animation task involving pathing, camera control, and timing. Requires strong Unity skills. Prone to performance issues (RISK-TECH-003).","Implement 'instant' teleport movement as the only option, skipping smooth animation to save significant development time."
US-049,"Implement Basic HUD UI",Frontend Development,Design,High,25.6,Mid,1,"TASK-WI007-03,TASK-WI011-01",No,"Core UI component. Requires robust implementation to handle dynamic data updates and multiple aspect ratios.",Start with a text-only debug display and defer the graphical HUD to a polish phase.
US-017,"Implement 'Doubles' Rule (Extra Turn)",Backend Development,,Medium,12.8,Senior,1,"TASK-WI011-01,TASK-WI012-01",No,"Requires modification of the core Turn Manager state machine. Needs a senior developer to avoid introducing bugs like infinite loops.",Initially, disable the doubles rule to simplify the game loop, and add it back in a later sprint.
US-030,"Implement Rule Engine Shell & Property Data Loading",Backend Development,Data Engineering,Medium,12.8,Senior,1,"TASK-WI011-01",Yes,"Architectural task defining the core of the game logic. Requires senior oversight to ensure a scalable design.","Hardcode property data directly in C# classes instead of loading from JSON, which is faster but makes balancing and updates more difficult."
US-030,"Implement 'Land on Unowned Property' Logic",Backend Development,Quality Assurance,Medium,8.5,Mid,1,"TASK-WI011-01,TASK-WI013-01",No,"Core gameplay loop. Requires careful integration with the Turn Manager to pause the game for player decisions.",Remove the player decision; have the game automatically auction every unowned property to simplify the game flow.
US-030,"Implement Buy/Auction Modal Dialog UI",Frontend Development,Design,Medium,12.8,Mid,1,TASK-WI013-02,No,"Standard modal UI task. Must handle dynamic content based on the property landed on.","Use basic OS-level dialogs or a simplified, non-modal UI prompt to reduce implementation time."
US-030,"Implement Property Purchase Transaction",Backend Development,,Medium,8.5,Mid,1,TASK-WI013-03,No,"Requires atomic updates to the GameState (player cash, property ownership) and logging.",Perform a simpler state update without a full transactional wrapper, accepting a small risk of data inconsistency on error.
US-032,"Implement Auction Logic (Backend)",Backend Development,,High,21.3,Senior,1,TASK-WI013-04,No,"Complex mini-game loop with its own state machine. Requires senior developer to implement robustly.",Simplify the auction to a single round of sealed bids instead of a turn-based process, reducing state management complexity.
US-032,"Implement Auction UI",Frontend Development,Design,High,17,Mid,1,TASK-WI013-05,No,"Dynamic UI that must reflect real-time updates from multiple players (human and AI).","Create a text-based log of the auction instead of a dynamic graphical UI to simplify the frontend work."
US-050,"Implement On-Board Property Ownership Indicators",Frontend Development,Design,Medium,12.8,Mid,1,TASK-WI013-04,No,"Requires 3D asset integration and dynamic instantiation/updating based on game events.",Use simple color tinting on the property spaces instead of instantiating new 3D marker objects to improve performance and simplify implementation.
US-052,"Implement Property Management UI Shell",Frontend Development,Design,High,17,Mid,1,"",No,"Complex UI screen with lists, groups, and dynamic buttons. Requires strong Unity UI skills.",Instead of a dedicated screen, add management buttons directly to the property deeds when they are clicked on the board.
US-033,"Implement 'Build House' Logic",Backend Development,,Medium,12.8,Mid,1,TASK-WI014-01,No,"Complex validation logic involving multiple parts of the GameState. Prone to bugs (RISK-TIME-002).","Simplify the rule by removing the monopoly requirement for building, fundamentally changing game strategy but reducing validation complexity."
US-034,"Implement 'Even Building' Rule Validation",Backend Development,,High,12.8,Senior,1,TASK-WI014-02,No,"Algorithmically complex validation. Requires senior developer to ensure correctness and efficiency.",Remove the 'even building' rule entirely, allowing players to stack houses on one property. This simplifies code but unbalances the game.
US-035,"Implement 'Build Hotel' Logic",Backend Development,,Medium,8.5,Mid,1,TASK-WI014-03,No,"Extends the house building logic. Must correctly manage the return of houses to the bank supply.",Treat hotels as a '5th house' purchase, simplifying the bank inventory logic (houses are not returned).
US-036,"Implement Building Shortage Notification & UI Feedback",Frontend Development,Backend Development,Low,8.5,Junior,1,TASK-WI014-02,No,"Simple feedback task. Requires coordination between backend state and frontend UI.",Don't disable buttons; only show the notification after a failed build attempt. This is easier to implement but provides a poorer user experience.
US-037,"Implement Building Auction Logic (Backend)",Backend Development,,Very High,25.6,Senior,1,TASK-WI013-05,No,"Highly complex and rare edge case (RISK-QUAL-003). Requires reusing and adapting the property auction logic.",Descope this feature. Implement a 'first-come, first-served' rule for the current player, and document it as a known deviation from official rules.
US-037,"Implement Building Auction UI",Frontend Development,Design,Medium,12.8,Mid,1,TASK-WI014-06,No,"Requires adapting a complex UI for a new context.","If the backend is descoped, this UI is not needed. Alternatively, use a simplified text-log UI."
US-033,"Implement 3D House/Hotel Models on Board",Frontend Development,Design,Medium,12.8,Mid,1,TASK-WI014-02,No,"Requires 3D asset instantiation and management on the game board.",Use 2D icons or number counters on the properties instead of 3D models to reduce scene complexity and asset requirements.
US-044,"Implement Rent Calculation Logic",Backend Development,,High,17,Senior,1,"TASK-WI011-01",Yes,"Critical path task with many branches and rules (RISK-TIME-002). Requires senior developer to ensure 100% accuracy.",Implement only the basic rent logic first, then add monopoly, house, and utility/railroad scaling rules in subsequent tasks.
US-045,"Implement Automatic Rent Transaction",Backend Development,,Medium,8.5,Mid,1,TASK-WI015-01,No,"Core transaction logic. Must correctly trigger the bankruptcy check, a critical integration point.",Instead of automatic payment, prompt the user to pay rent manually. This simplifies the flow but detracts from the user experience.
US-038,"Implement Mortgage/Unmortgage Logic (Backend)",Backend Development,,Medium,12.8,Mid,1,TASK-WI014-01,No,"Standard financial transaction logic. Must be atomic and handle all state changes correctly.",Remove the 10% interest fee for unmortgaging to simplify the calculation logic.
US-039,"Integrate Mortgage/Unmortgage into Property Management UI",Frontend Development,Backend Development,Low,8.5,Mid,1,TASK-WI015-03,No,Straightforward UI wiring. Requires dynamic button state updates based on property status and player cash.,Always leave buttons enabled and only show an error message on click, which is simpler but less user-friendly.
US-050,"Implement Visual State for Mortgaged Properties",Frontend Development,Design,Low,8.5,Junior,1,TASK-WI015-03,No,"Simple visual state change. Requires coordination with the design team for the visual treatment.",Use a simple grayscale shader or color tint instead of a custom icon/overlay for a quicker implementation.
US-026,"Implement Tax Collection Logic & UI (Income & Luxury)",Backend Development,Frontend Development,Medium,12.8,Mid,2,"TASK-WI011-01",No,"Requires a backend dev for the net worth calculation and a frontend dev for the modal UI.",Simplify Income Tax by removing the choice and always charging a flat $200. This removes the need for the modal UI and net worth calculation.
US-018,"Implement 'Go to Jail' Logic",Backend Development,,Medium,12.8,Senior,1,"TASK-WI011-01",No,"Modifies the core turn flow. Requires careful state management to handle all three trigger conditions correctly.",Implement only the 'Go to Jail' space first, and add the card and doubles triggers in later tasks.
US-022,"Implement 'Get out of Jail' Options (Pay/Card/Roll)",Backend Development,,High,17,Mid,1,TASK-WI016-01,No,"Complex logic with multiple branches and state tracking (3-turn limit).",Simplify the rule: allow only paying the fine to get out. This removes the need for card and dice roll logic in this context.
US-020,"Implement Jail Options UI",Frontend Development,Design,Low,8.5,Junior,1,TASK-WI016-02,No,"Standard modal UI. Needs to dynamically show/hide options based on player state (has card, has cash).","Use a single button that cycles through the available options instead of showing all at once, simplifying layout."
US-024,"Implement Card Deck Logic (Chance & Community Chest)",Backend Development,Data Engineering,Medium,12.8,Mid,1,TASK-WI003-04,No,"Requires data loading from JSON, shuffling logic, and state management for the decks.",Hardcode the card actions in a list instead of loading from JSON, which is faster to implement but inflexible.
US-025,"Implement Card Action Executor",Backend Development,,High,17,Senior,1,TASK-WI016-04,No,"Architecturally important task. A Command Pattern is recommended to avoid a massive, unmaintainable switch statement.",Use a large switch statement. It's faster to write initially but creates significant technical debt.
US-024,"Implement Card Draw UI",Frontend Development,Design,Low,8.5,Junior,1,TASK-WI016-05,No,"Simple modal UI to display text and wait for a click.",Display the card text in a simple text log instead of a graphical modal popup.
US-019,"Implement Other Board Spaces (GO, Free Parking, Just Visiting)",Backend Development,,Low,8.5,Mid,1,"TASK-WI011-01,TASK-WI012-01",No,"Finalizes the core board space logic. GO salary collection is the main implementation piece.",Assume GO salary is handled and focus only on ensuring Free Parking and Just Visiting are no-ops.
US-047,"Implement Bankruptcy Logic (Asset Liquidation & Transfer)",Backend Development,,Very High,25.6,Senior,1,"TASK-WI015-02",Yes,"Critical path and highly complex (RISK-TIME-002). Involves forced selling/mortgaging and asset transfer. Needs a senior developer.","When a player cannot pay, declare them bankrupt immediately without an asset liquidation phase. This simplifies the logic but deviates from official rules."
US-046,"Implement Win/Loss Condition Screens (Victory/Game Over)",Frontend Development,Design,Medium,12.8,Mid,1,"TASK-WI017-01",No,"Standard end-of-game UI. Requires triggering the AI simulation on loss.",On loss, go directly to the summary screen without showing the 'Game Over' screen or running the simulation.
US-048,"Implement Game Summary Screen",Frontend Development,Data Engineering,Medium,12.8,Mid,1,TASK-WI017-02,No,"UI for displaying final game stats. Requires a flexible layout for 2-4 players.",Display only the winner and loser's names, omitting the detailed statistical breakdown to save UI and data tracking work.
US-013,"Implement In-Game Statistics Tracking",Backend Development,Data Engineering,Medium,12.8,Mid,1,TASK-WI017-03,No,"Requires creating a service to hook into many different game events to aggregate data.",Track only a few key stats (e.g., final net worth) instead of the full list to reduce the number of event hooks needed.
US-040,"Implement Behavior Tree Framework (Core)",Backend Development,,Very High,34.1,Lead,1,"TASK-WI011-01",Yes,"High-risk, complex architectural task (RISK-TECH-001). Requires a Lead AI developer.",Mitigate risk by using a proven third-party Behavior Tree library from the Unity Asset Store instead of building a custom framework.
US-010,"Implement AI Configuration Loading",Backend Development,Data Engineering,Low,8.5,Mid,1,TASK-WI018-01,No,"Involves JSON parsing and creating a service to provide config data.",Hardcode the AI parameters directly in the AI agent's code. This is faster but prevents tuning without a recompile.
US-032,"Implement AI Behavior: Property Acquisition & Bidding",Backend Development,,High,25.6,Senior,1,TASK-WI018-01,No,"Core AI logic. Requires balancing across difficulty levels.","Create a single, simple behavior (e.g., ""always buy if affordable"") for all difficulties and iterate on complexity later."
US-033,"Implement AI Behavior: Building & Mortgaging",Backend Development,,High,21.3,Senior,1,TASK-WI020-01,No,"Strategic AI logic. Harder AI needs to consider complex game states like housing shortages.","Implement a simple building logic (e.g., ""build one house whenever possible"") and omit mortgaging behavior for the AI initially."
US-041,"Implement AI Behavior: Trade Evaluation & Proposal",Backend Development,,Very High,42.6,Lead,1,TASK-WI020-02,No,"The most complex AI task. Requires a robust property valuation algorithm. Needs a Lead AI developer.",For the initial release, allow AI to only evaluate trades (accept/decline) but not proactively propose them, reducing complexity.
US-053,"Implement Two-Panel Trade UI",Frontend Development,Design,High,25.6,Mid,1,TASK-WI014-01,No,"Complex, dynamic modal UI. Must handle validation and state for many different assets.","Create a simpler, turn-based UI: Step 1, select your items. Step 2, select their items. Step 3, review. This is less fluid but easier to manage state for."
US-040,"Integrate Human-to-AI Trading Flow",Backend Development,Frontend Development,Medium,12.8,Mid,2,"TASK-WI021-01,TASK-WI020-03",No,"Requires connecting the complex UI to the complex AI backend. Needs one backend and one frontend dev.",Instead of a direct call, use a simplified event-based system where the UI fires a 'TradeProposed' event and listens for a 'TradeResolved' event.
US-043,"Implement AI-to-AI Trade Flow & Notification",Backend Development,Frontend Development,Low,8.5,Mid,1,TASK-WI020-03,No,"Requires AI agents to be aware of each other and a simple UI notification.",Descope AI-to-AI trading for the initial release to focus on AI-to-Human interaction.
US-061,"Implement Save Game Logic",Backend Development,,High,17,Senior,1,TASK-WI003-04,Yes,"Critical path and high risk of bugs (RISK-TECH-002). Requires flawless serialization of the entire GameState.",Use a simpler binary serialization format instead of JSON. It's less human-readable but can be more robust against certain errors.
US-061,"Implement Save Game UI & Flow",Frontend Development,,Medium,12.8,Mid,1,TASK-WI023-01,No,"Standard save UI, but must handle disabling the save button at the correct times in the turn.",Implement a single 'Quick Save' slot instead of a menu with multiple slots to reduce UI complexity.
US-062,"Implement Load Game Logic (Deserialization & Validation)",Backend Development,,Very High,21.3,Senior,1,TASK-WI023-01,Yes,"Critical path task. Must robustly handle checksums, versioning, and potential data corruption.","Initially, don't implement checksum or version validation. Load files as-is, accepting the high risk of crashes from corrupted or old files."
US-063,"Implement Load Game UI & Unusable File Indication",Frontend Development,Backend Development,Medium,12.8,Mid,1,TASK-WI024-01,No,"UI must reflect the validation status from the backend.",If the backend doesn't perform validation, this UI is not needed. Alternatively, just show an error after a failed load attempt instead of pre-emptively.
US-013,"Set up SQLite Database & Data Access Layer",Backend Development,Data Engineering,High,17,Mid,1,"TASK-WI002-01",No,"Requires setting up a new data persistence technology and designing the database schema.","Use simple JSON files for storing stats instead of a SQLite database. This is easier to set up but less scalable and harder to query."
US-013,"Implement Persistent Statistics Tracking & Update",Backend Development,Data Engineering,Medium,12.8,Mid,1,"TASK-WI017-04,TASK-WI009-01",No,"Requires writing aggregated game data to the database in a transactional way.",Append stats to a simple CSV file. This is much simpler than database writes but more fragile.
US-064,"Implement Player Profile & High Score UI Screens",Frontend Development,Backend Development,Medium,12.8,Mid,1,"TASK-WI009-02",No,"Requires fetching data from the database and displaying it in a sorted, formatted list.",Read the stats from a JSON/CSV file and display them as-is, without complex sorting or formatting.
US-013,"Implement Database Backup & Recovery Logic",Backend Development,,Medium,8.5,Mid,1,TASK-WI009-01,No,"File I/O logic can be tricky with permissions and edge cases (RISK-OPER-001).","Remove the automated backup feature and instruct users to back up their data manually in a help document."
US-001,"Implement Installer Script (Inno Setup)",DevOps,,Medium,12.8,Mid,1,"",No,"Requires knowledge of a specialized tool (Inno Setup) and scripting language.","Don't create an installer. Distribute the game as a simple .zip archive, requiring manual extraction by the user."
US-006,"Implement Uninstaller Logic (Clean Removal & Data Choice)",DevOps,,Medium,8.5,Mid,1,TASK-WI026-01,No,"Requires custom scripting within Inno Setup to handle the user choice for data removal.","Provide a simple uninstaller that only removes the application files and leaves user data behind, without offering a choice."
US-059,"Implement Interactive Tutorial System",Frontend Development,Backend Development,Very High,34.1,Senior,2,"TASK-WI011-01,TASK-WI012-01,TASK-WI013-02",No,"Complex system requiring a scripting engine, UI overlays, and overriding core game logic. Needs a senior dev and a UI specialist.","Replace the interactive tutorial with a simple, non-interactive slideshow of help screens explaining the rules."
US-066,"Implement Theme System (Asset Swapping)",Backend Development,Frontend Development,High,25.6,Senior,1,"TASK-WI001-01",No,"Architectural task requiring a robust asset management system (e.g., Addressables). High effort to make all assets swappable.","Hardcode the assets for a single theme. Remove the ability to switch themes, significantly reducing architectural complexity and asset requirements."
US-060,"Implement Digital Rulebook UI & Data Loading",Frontend Development,Data Engineering,Medium,12.8,Mid,1,TASK-WI006-01,No,"Requires UI for displaying and searching text, plus JSON loading.",Provide the rulebook as a PDF file bundled with the game, to be opened externally by the user.
US-067,"Implement Update Checker",Backend Development,Frontend Development,Low,8.5,Mid,1,TASK-WI006-01,No,"Requires asynchronous networking logic and a simple UI notification.","Do not implement an in-game checker. Rely on users to manually check the game's website for updates."
US-001,"Final Integration Testing & Bug Fixing",Quality Assurance,"Backend Development, Frontend Development",Very High,80,Senior,3,"",Yes,"Large-scale, multi-disciplinary effort requiring the entire team's focus to ensure a stable product.",Conduct feature-by-feature testing but skip the final, dedicated integration phase, accepting a higher risk of bugs in the released product.