Title,Description,Type,Status,Priority,Assignee,Reporter,Due Date,Estimate,Labels,Sprint,Epic,Project,Attachments,Comments,Parent ID,Dependencies,Created At,Updated At,Skills Required
"Initialize Unity Project & Git Repository","Create a new Unity project configured for the Windows Standalone platform. Initialize a Git repository in the project's root directory and add a standard Unity .gitignore file to exclude temporary and local files. This fulfills part of REQ-1-024.","Task","Backlog","Critical","developer@project.com","pm@project.com","",2.2,"setup,git,unity","Sprint 1: Foundation & Core Architecture","Core Engine & Architecture","Monopoly Tycoon","","","WS-001","",2023-10-27 08:00,2023-10-27 08:00,"Unity,Git"
"Create & Configure Core Logic .NET 8 Library","Within the Visual Studio solution generated by Unity, create a new .NET 8 C# class library project named `MonopolyTycoon.Core`. Configure this library to be referenced by the Unity project's main assembly (`Assembly-CSharp`).","Task","Backlog","Critical","developer@project.com","pm@project.com","",4.5,"architecture,backend,setup","Sprint 1: Foundation & Core Architecture","Core Engine & Architecture","Monopoly Tycoon","","","WS-001","TASK-WI001-01",2023-10-27 08:01,2023-10-27 08:01,"C#,.NET 8,Unity,Visual Studio"
"Implement PlayerState and Related Enums","In the `MonopolyTycoon.Core` library, create the `PlayerState.cs` class. Implement all fields as specified in REQ-1-031, including `player_id`, `cash`, `is_human`, etc. Define all related enums (`AIDifficulty`, `PlayerStatus`) in a separate `GameEnums.cs` file. Ensure the classes are serializable using `System.Text.Json` attributes.","Task","Backlog","Critical","developer@project.com","pm@project.com","",8.3,"datamodel,backend,core","Sprint 1: Foundation & Core Architecture","Core Engine & Architecture","Monopoly Tycoon","","","WS-001","TASK-WI002-01",2023-10-27 08:02,2023-10-27 08:02,"C#,System.Text.Json"
"DECOMPOSITION: Implement GameState Serialization (Part 1)","Implement the `GameState.cs` class and all its direct child data models (e.g., `BankState`, `DeckState`). Focus on the structure and serialization of all components except the full `BoardState` (property ownership and development), which will be handled in Part 2. This includes serializing the list of `PlayerState` objects.","Task","Backlog","Critical","developer@project.com","pm@project.com","",8.3,"datamodel,backend,core,critical-path","Sprint 1: Foundation & Core Architecture","Core Engine & Architecture","Monopoly Tycoon","","Original estimate was 17h for the whole GameState. Decomposed into two parts.","WS-001","TASK-WI003-01",2023-10-27 08:03,2023-10-27 08:03,"C#,System.Text.Json"
"DECOMPOSITION: Implement BoardState Serialization (Part 2)","Implement the `BoardState` data model, which will track the ownership and development level (houses/hotel) for all 28 properties. This might be a dictionary or a list of `PropertyState` objects. Integrate this model into the main `GameState` object and ensure the entire object graph can now be serialized and deserialized correctly.","Task","Backlog","Critical","developer@project.com","pm@project.com","",8.8,"datamodel,backend,core,critical-path","Sprint 1: Foundation & Core Architecture","Core Engine & Architecture","Monopoly Tycoon","","","WS-001","TASK-WI003-03",2023-10-27 08:04,2023-10-27 08:04,"C#,System.Text.Json,Architecture"
"Integrate Serilog and Configure JSON Sink","Add Serilog and necessary Sink/Formatter NuGet packages to the `MonopolyTycoon.Core` project. Create a `LoggingService` class with a static `Initialize` method. Configure Serilog to write to a file sink using the `Serilog.Formatting.Json.JsonFormatter`.","Task","Backlog","Critical","developer@project.com","pm@project.com","",4.2,"logging,serilog,architecture","Sprint 1: Foundation & Core Architecture","Core Engine & Architecture","Monopoly Tycoon","","","WS-002","TASK-WI002-01",2023-10-27 08:05,2023-10-27 08:05,"C#,Serilog"
"Implement Rolling File Policy and Path Configuration","Enhance the `LoggingService` to dynamically construct the log file path in `%APPDATA%/MonopolyTycoon/logs`. Configure the Serilog file sink with a rolling file policy based on the criteria in REQ-1-021 (7-day retention or 50MB total size).","Task","Backlog","Critical","developer@project.com","pm@project.com","",6.3,"logging,serilog,configuration","Sprint 1: Foundation & Core Architecture","Core Engine & Architecture","Monopoly Tycoon","","","WS-002","TASK-WI004-01",2023-10-27 08:06,2023-10-27 08:06,"C#,Serilog,File I/O"
"Implement Global Exception Handler Logic","Create a `GlobalExceptionHandler.cs` script in Unity. In its `Awake` method, subscribe to `AppDomain.CurrentDomain.UnhandledException`. The handler method will generate a unique correlation ID (e.g., a GUID), and call the `LoggingService` to log the exception at ERROR level with the ID, as per REQ-1-023.","Task","Backlog","Critical","developer@project.com","pm@project.com","",6.2,"error-handling,architecture,unity","Sprint 1: Foundation & Core Architecture","Core Engine & Architecture","Monopoly Tycoon","","","WS-002","TASK-WI004-02",2023-10-27 08:07,2023-10-27 08:07,"C#,Unity,Serilog"
"Create and Integrate Error Dialog UI","Create a Unity prefab for the modal error dialog. The prefab should contain text elements for the error message, the unique ID, and the log file path. The `GlobalExceptionHandler` will be responsible for instantiating this prefab, populating it with the correct data, and ensuring it's displayed on top of all other UI. The dialog must include a 'Close' button that terminates the application.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",12.2,"error-handling,ui,unity","Sprint 1: Foundation & Core Architecture","Core Engine & Architecture","Monopoly Tycoon","","","WS-002","TASK-WI005-01",2023-10-27 08:08,2023-10-27 08:08,"Unity UI,C#"
"Implement PII Sanitization in Logging","Review and implement a PII sanitization strategy for log entries as per REQ-1-022. This can be achieved by using a Serilog enricher.","Task","Backlog","High","developer@project.com","pm@project.com","",3.2,"logging,security,pii","Sprint 1: Foundation & Core Architecture","Core Engine & Architecture","Monopoly Tycoon","","","WS-002","TASK-WI004-01",2023-10-27 08:09,2023-10-27 08:09,"C#,Serilog"
"Implement Main Menu UI Shell","Create the basic Unity scene and UI Canvas for the main menu. Implement placeholder buttons for 'New Game', 'Load Game', 'Settings', and 'Quit'. This task is only for the visual layout and button components; functionality will be added in other tasks.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",12.8,"ui,main-menu,unity","Sprint 1: Foundation & Core Architecture","UI/UX & Frontend","Monopoly Tycoon","","","US-008","TASK-WI001-01",2023-10-27 08:10,2023-10-27 08:10,"Unity UI"
"Implement 'New Game' Button Logic","Wire up the 'New Game' button on the main menu to transition the application to the Game Setup screen/scene.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",4.3,"ui,navigation,main-menu","Sprint 1: Foundation & Core Architecture","UI/UX & Frontend","Monopoly Tycoon","","Requires Game Setup Scene to exist, even as a placeholder.","US-008","TASK-WI006-01",2023-10-27 08:11,2023-10-27 08:11,"Unity UI,C#"
"Implement Game Setup UI Shell","Create the Unity scene and UI for the Game Setup screen. Include placeholders for player name input, token selection, AI opponent count, and difficulty settings.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",17,"ui,game-setup,unity","Sprint 1: Foundation & Core Architecture","UI/UX & Frontend","Monopoly Tycoon","","","US-009","TASK-WI006-02",2023-10-27 08:12,2023-10-27 08:12,"Unity UI"
"Implement Turn Manager State Machine (Shell)","In the core library, create the `TurnManager.cs` class. Implement a basic state machine for the turn phases (Pre-Turn, Pre-Roll, Roll, Movement, Action, Post-Roll) as described in REQ-1-038. This initial version will just handle state transitions without full logic.","Task","Backlog","Critical","sr-developer@project.com","pm@project.com","",17,"architecture,backend,core,critical-path","Sprint 2: Core Game Loop","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","This is a major architectural component.","US-029","TASK-WI003-04",2023-10-27 08:13,2023-10-27 08:13,"C#,Architecture,State Machine Design"
"Implement Dice Rolling Logic & UI","Create a `DiceService.cs` in the core library that generates two random numbers (REQ-1-042). In Unity, create the 'Roll Dice' button and a 3D dice animation. Clicking the button should call the service and trigger the animation, then notify the Turn Manager of the result.","Task","Backlog","Critical","developer@project.com","pm@project.com","",25.6,"gameplay,dice-roll,ui,animation","Sprint 2: Core Game Loop","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","","US-015","TASK-WI011-01",2023-10-27 08:14,2023-10-27 08:14,"C#,Unity,Unity UI,Animation"
"Implement Token Movement Animation","Create a `MovementService.cs` in Unity. After a dice roll, this service will animate the current player's token moving space-by-space around the board. Implement smooth camera following. The service must respect the Game Speed settings (REQ-1-078).","Task","Backlog","Critical","frontend-dev@project.com","pm@project.com","",34.1,"gameplay,animation,camera,unity","Sprint 2: Core Game Loop","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","Requires a placeholder 3D board with defined waypoints.","US-016","TASK-WI012-01",2023-10-27 08:15,2023-10-27 08:15,"Unity,C#,Animation,Vector Math"
"Implement Basic HUD UI","Create the main gameplay HUD, displaying panels for each player with their name, token icon, and cash total. Implement the visual indicator for the active player's turn. The HUD must update based on events from the Turn Manager.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",25.6,"ui,hud,gameplay","Sprint 2: Core Game Loop","UI/UX & Frontend","Monopoly Tycoon","","","US-049","TASK-WI007-03,TASK-WI011-01",2023-10-27 08:16,2023-10-27 08:16,"Unity UI,C#"
"Implement 'Doubles' Rule (Extra Turn)","Enhance the Turn Manager. After a dice roll, if the result is doubles, the manager should loop the turn back to the 'Pre-Roll Management Phase' for the same player, after the movement and action are complete. Handle the exception for getting out of jail.","Task","Backlog","High","sr-developer@project.com","pm@project.com","",12.8,"gameplay,rules-engine,backend","Sprint 2: Core Game Loop","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","","US-017","TASK-WI011-01,TASK-WI012-01",2023-10-27 08:17,2023-10-27 08:17,"C#,State Machine Design"
"Implement Rule Engine Shell & Property Data Loading","Create the `RuleEngine.cs` in the core library. This class will contain the core game logic. Implement a method to load property data from an external JSON file into a collection of `PropertyData` objects.","Task","Backlog","Critical","sr-developer@project.com","pm@project.com","",12.8,"architecture,backend,rules-engine,critical-path","Sprint 3: Property Acquisition","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","","US-030","TASK-WI011-01",2023-10-27 08:18,2023-10-27 08:18,"C#,JSON.net,Architecture"
"Implement 'Land on Unowned Property' Logic","In the Rule Engine, implement the logic for when a player lands on an unowned property. This should trigger an event that the UI can subscribe to, pausing the game and showing the Buy/Auction dialog.","Task","Backlog","Critical","developer@project.com","pm@project.com","",8.5,"gameplay,rules-engine,backend","Sprint 3: Property Acquisition","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","","US-030","TASK-WI011-01,TASK-WI013-01",2023-10-27 08:19,2023-10-27 08:19,"C#"
"Implement Buy/Auction Modal Dialog UI","Create the UI for the property purchase dialog. This modal should display the property card and present 'Buy' and 'Auction' buttons. The 'Buy' button should be disabled if the player has insufficient funds.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",12.8,"ui,gameplay,modal","Sprint 3: Property Acquisition","UI/UX & Frontend","Monopoly Tycoon","","","US-030","TASK-WI013-02",2023-10-27 08:20,2023-10-27 08:20,"Unity UI,C#"
"Implement Property Purchase Transaction","Implement the backend logic for the 'Buy' button. When triggered, it should deduct cash from the player, assign the property to them in the `GameState`, and log the transaction.","Task","Backlog","Critical","developer@project.com","pm@project.com","",8.5,"gameplay,rules-engine,backend,transaction","Sprint 3: Property Acquisition","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","","US-030","TASK-WI013-03",2023-10-27 08:21,2023-10-27 08:21,"C#"
"Implement Auction Logic (Backend)","In the Rule Engine, implement the state machine for a property auction. It should manage bidding order, track the current high bid, handle player withdrawals, and determine the winner. It needs to query AI players for their bids.","Task","Backlog","Critical","sr-developer@project.com","pm@project.com","",21.3,"gameplay,rules-engine,backend,auction","Sprint 3: Property Acquisition","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","This is a complex mini-game loop.","US-032","TASK-WI013-04",2023-10-27 08:22,2023-10-27 08:22,"C#,State Machine Design"
"Implement Auction UI","Create the modal UI for the auction process. It must display the property, current bid, high bidder, and provide 'Bid' and 'Withdraw' buttons for the human player. It must also show AI bidding activity.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",17,"ui,gameplay,modal,auction","Sprint 3: Property Acquisition","UI/UX & Frontend","Monopoly Tycoon","","","US-032","TASK-WI013-05",2023-10-27 08:23,2023-10-27 08:23,"Unity UI,C#"
"Implement On-Board Property Ownership Indicators","Create a visual marker (e.g., a colored token base) that appears on a property space on the 3D board when it is purchased. The marker should match the owner's color and update dynamically on ownership changes.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",12.8,"ui,vfx,3d,gameplay","Sprint 3: Property Acquisition","UI/UX & Frontend","Monopoly Tycoon","","","US-050","TASK-WI013-04",2023-10-27 08:24,2023-10-27 08:24,"Unity,C#"
"Implement Property Management UI Shell","Create the dedicated Property Management screen. This UI will display a list of properties owned by the player, grouped by color set. Include placeholders for action buttons (Build, Mortgage, etc.).","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",17,"ui,gameplay,asset-management","Sprint 4: Property Development","UI/UX & Frontend","Monopoly Tycoon","","","US-052","",2023-10-27 08:25,2023-10-27 08:25,"Unity UI,C#"
"Implement 'Build House' Logic","In the Rule Engine, implement the logic for building a house. This must validate all conditions: player owns a monopoly, even-building rule (REQ-1-054), sufficient cash, and bank has houses available.","Task","Backlog","Critical","developer@project.com","pm@project.com","",12.8,"gameplay,rules-engine,backend,building","Sprint 4: Property Development","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","","US-033","TASK-WI014-01",2023-10-27 08:26,2023-10-27 08:26,"C#"
"Implement 'Even Building' Rule Validation","Create the specific validation function within the Rule Engine that checks if a build or sell action would violate the even building rule. This is a core part of the building logic.","Task","Backlog","Critical","sr-developer@project.com","pm@project.com","",12.8,"gameplay,rules-engine,backend,validation","Sprint 4: Property Development","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","","US-034","TASK-WI014-02",2023-10-27 08:27,2023-10-27 08:27,"C#,Algorithm"
"Implement 'Build Hotel' Logic","Extend the building logic to handle upgrading 4 houses to a hotel. This includes returning the 4 houses to the bank's supply and taking 1 hotel. All prerequisite checks must be performed.","Task","Backlog","High","developer@project.com","pm@project.com","",8.5,"gameplay,rules-engine,backend,building","Sprint 4: Property Development","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","","US-035","TASK-WI014-03",2023-10-27 08:28,2023-10-27 08:28,"C#"
"Implement Building Shortage Notification & UI Feedback","The Property Management UI must disable build buttons when the bank is out of houses/hotels. If a build is attempted and fails due to a shortage, a non-intrusive notification should be displayed.","Task","Backlog","Should Have","frontend-dev@project.com","pm@project.com","",8.5,"ui,feedback,gameplay","Sprint 4: Property Development","UI/UX & Frontend","Monopoly Tycoon","","","US-036","TASK-WI014-02",2023-10-27 08:29,2023-10-27 08:29,"Unity UI,C#"
"Implement Building Auction Logic (Backend)","Implement the logic to trigger an auction for the remaining buildings if multiple players wish to buy when there is a shortage. This re-uses the property auction state machine but with different parameters.","Task","Backlog","Should Have","sr-developer@project.com","pm@project.com","",25.6,"gameplay,rules-engine,backend,auction,edge-case","Sprint 4: Property Development","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","RISK-QUAL-003: This is a complex and rare edge case.","US-037","TASK-WI013-05",2023-10-27 08:30,2023-10-27 08:30,"C#,State Machine Design"
"Implement Building Auction UI","Adapt the existing auction UI to handle the auction of buildings. The UI must clearly state what is being auctioned (e.g., '1 House') and for which property set.","Task","Backlog","Should Have","frontend-dev@project.com","pm@project.com","",12.8,"ui,gameplay,modal,auction","Sprint 4: Property Development","UI/UX & Frontend","Monopoly Tycoon","","","US-037","TASK-WI014-06",2023-10-27 08:31,2023-10-27 08:31,"Unity UI,C#"
"Implement 3D House/Hotel Models on Board","When a building is purchased, instantiate the corresponding 3D model at the correct position on the property space on the main game board. The models should be removed when sold or a hotel is built.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",12.8,"3d,vfx,gameplay,unity","Sprint 4: Property Development","UI/UX & Frontend","Monopoly Tycoon","","","US-033","TASK-WI014-02",2023-10-27 08:32,2023-10-27 08:32,"Unity,C#"
"Implement Rent Calculation Logic","In the Rule Engine, create a comprehensive function to calculate rent. It must handle all cases: standard rent, monopoly rent (doubled), rent with houses/hotels, rent for railroads (scaled by number owned), and rent for utilities (scaled by dice roll).","Task","Backlog","Critical","sr-developer@project.com","pm@project.com","",17,"gameplay,rules-engine,backend,critical-path","Sprint 5: Rent & Financials","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","RISK-TIME-002: This is a complex function with many branches.","US-044","TASK-WI011-01",2023-10-27 08:33,2023-10-27 08:33,"C#,Algorithm"
"Implement Automatic Rent Transaction","Integrate the rent calculation logic with the Turn Manager. When a player lands on an owned property, the rent should be calculated and automatically transferred from the renter to the owner. This must also trigger the bankruptcy check if the player cannot pay.","Task","Backlog","Critical","developer@project.com","pm@project.com","",8.5,"gameplay,rules-engine,backend,transaction","Sprint 5: Rent & Financials","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","","US-045","TASK-WI015-01",2023-10-27 08:34,2023-10-27 08:34,"C#"
"Implement Mortgage/Unmortgage Logic (Backend)","In the Rule Engine, implement the functions for mortgaging and unmortgaging properties. This includes calculating the 10% interest for unmortgaging, validating conditions (no buildings), and updating the property's state in the `GameState`.","Task","Backlog","Critical","developer@project.com","pm@project.com","",12.8,"gameplay,rules-engine,backend,financials","Sprint 5: Rent & Financials","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","","US-038","TASK-WI014-01",2023-10-27 08:35,2023-10-27 08:35,"C#"
"Integrate Mortgage/Unmortgage into Property Management UI","Wire up the 'Mortgage' and 'Unmortgage' buttons in the Property Management UI. The buttons should be enabled/disabled based on the property state and player's cash. Clicking them should call the corresponding Rule Engine functions.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",8.5,"ui,gameplay,asset-management","Sprint 5: Rent & Financials","UI/UX & Frontend","Monopoly Tycoon","","","US-039","TASK-WI015-03",2023-10-27 08:36,2023-10-27 08:36,"Unity UI,C#"
"Implement Visual State for Mortgaged Properties","Update the on-board ownership indicators and the property cards in the UI to have a distinct visual state (e.g., greyed out with an icon) when a property is mortgaged.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",8.5,"ui,vfx,feedback","Sprint 5: Rent & Financials","UI/UX & Frontend","Monopoly Tycoon","","","US-050","TASK-WI015-03",2023-10-27 08:37,2023-10-27 08:37,"Unity UI,C#"
"Implement Tax Collection Logic & UI (Income & Luxury)","Implement the logic for both tax spaces. Luxury Tax is a fixed deduction. Income Tax requires a modal dialog for the human player to choose between $200 and 10% of their net worth. Implement the net worth calculation function.","Task","Backlog","High","developer@project.com","pm@project.com","",12.8,"gameplay,rules-engine,backend,ui","Sprint 5: Rent & Financials","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","","US-026","TASK-WI011-01",2023-10-27 08:38,2023-10-27 08:38,"C#,Unity UI"
"Implement 'Go to Jail' Logic","Implement all three triggers for going to jail: landing on the 'Go to Jail' space, drawing the 'Go to Jail' card, and rolling three consecutive doubles. This logic in the Turn Manager should change the player's status to 'InJail', move their token directly to the jail space, and end their turn.","Task","Backlog","Critical","sr-developer@project.com","pm@project.com","",12.8,"gameplay,rules-engine,backend,jail","Sprint 6: Special Rules & States","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","","US-018","TASK-WI011-01",2023-10-27 08:39,2023-10-27 08:39,"C#,State Machine Design"
"Implement 'Get out of Jail' Options (Pay/Card/Roll)","At the start of a jailed player's turn, the Turn Manager should present the options to get out. Implement the backend logic for all three: paying the fine, using a 'Get Out of Jail Free' card, and attempting to roll for doubles. This includes the 3-turn limit rule.","Task","Backlog","Critical","developer@project.com","pm@project.com","",17,"gameplay,rules-engine,backend,jail","Sprint 6: Special Rules & States","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","","US-022","TASK-WI016-01",2023-10-27 08:40,2023-10-27 08:40,"C#"
"Implement Jail Options UI","Create the modal dialog for a jailed player, presenting the available options to get out of jail. Buttons should be enabled/disabled based on whether the player has a card or sufficient cash.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",8.5,"ui,gameplay,modal,jail","Sprint 6: Special Rules & States","UI/UX & Frontend","Monopoly Tycoon","","","US-020","TASK-WI016-02",2023-10-27 08:41,2023-10-27 08:41,"Unity UI,C#"
"Implement Card Deck Logic (Chance & Community Chest)","In the core library, create a `DeckManager.cs`. It should load card definitions from a JSON file, shuffle the decks at the start of the game, handle drawing the top card, and place used cards at the bottom of the deck. Special logic is needed for the 'Get Out of Jail Free' card.","Task","Backlog","Critical","developer@project.com","pm@project.com","",12.8,"gameplay,backend,cards","Sprint 6: Special Rules & States","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","","US-024","TASK-WI003-04",2023-10-27 08:42,2023-10-27 08:42,"C#,JSON.net"
"Implement Card Action Executor","Create a system (e.g., using the Command Pattern) to execute the various actions described on the cards (give/take money, move player, go to jail, etc.). This system will be called by the `DeckManager` after a card is drawn.","Task","Backlog","Critical","sr-developer@project.com","pm@project.com","",17,"gameplay,rules-engine,backend,architecture","Sprint 6: Special Rules & States","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","","US-025","TASK-WI016-04",2023-10-27 08:43,2023-10-27 08:43,"C#,Design Patterns"
"Implement Card Draw UI","Create the UI for displaying a drawn Chance or Community Chest card. This should be a modal element that shows the card's text and is dismissed by the player, after which the card's action is visually executed.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",8.5,"ui,gameplay,cards","Sprint 6: Special Rules & States","UI/UX & Frontend","Monopoly Tycoon","","","US-024","TASK-WI016-05",2023-10-27 08:44,2023-10-27 08:44,"Unity UI,C#"
"Implement Other Board Spaces (GO, Free Parking, Just Visiting)","Finalize the logic for the remaining non-property spaces. GO salary collection should be robust. Free Parking and Just Visiting should be confirmed as no-op spaces where the turn simply ends (unless doubles were rolled).","Task","Backlog","High","developer@project.com","pm@project.com","",8.5,"gameplay,rules-engine,backend","Sprint 6: Special Rules & States","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","","US-019","TASK-WI011-01,TASK-WI012-01",2023-10-27 08:45,2023-10-27 08:45,"C#"
"Implement Bankruptcy Logic (Asset Liquidation & Transfer)","In the Rule Engine, implement the full bankruptcy process. When a player owes a debt they cannot pay, the system must force them to sell buildings and mortgage properties. If they still cannot pay, determine bankruptcy. Implement asset transfer to the creditor (player or bank).","Task","Backlog","Critical","sr-developer@project.com","pm@project.com","",25.6,"gameplay,rules-engine,backend,critical-path,financials","Sprint 7: Game End & AI Foundation","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","RISK-TIME-002: This is a highly complex rule set with many edge cases.","US-047","TASK-WI015-02",2023-10-27 08:46,2023-10-27 08:46,"C#,Algorithm"
"Implement Win/Loss Condition Screens (Victory/Game Over)","Create the UI screens for Victory and Game Over. These should be displayed when the respective game-ending conditions are met. The Game Over screen should trigger the high-speed AI simulation.","Task","Backlog","Must Have","frontend-dev@project.com","pm@project.com","",12.8,"ui,game-flow,end-game","Sprint 7: Game End & AI Foundation","UI/UX & Frontend","Monopoly Tycoon","","","US-046","TASK-WI017-01",2023-10-27 08:47,2023-10-27 08:47,"Unity UI,C#"
"Implement Game Summary Screen","Create the post-game summary screen, which displays final statistics for all players in the match. This screen is shown after a victory or after the post-loss AI simulation completes.","Task","Backlog","Must Have","frontend-dev@project.com","pm@project.com","",12.8,"ui,game-flow,stats","Sprint 7: Game End & AI Foundation","UI/UX & Frontend","Monopoly Tycoon","","","US-048","TASK-WI017-02",2023-10-27 08:48,2023-10-27 08:48,"Unity UI,C#"
"Implement In-Game Statistics Tracking","Create a `StatisticsService` that hooks into game events (rent paid, property bought, etc.) to aggregate the data needed for the end-of-game summary screen and for persistent player stats.","Task","Backlog","Should Have","developer@project.com","pm@project.com","",12.8,"backend,stats,tracking","Sprint 7: Game End & AI Foundation","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","","US-013","TASK-WI017-03",2023-10-27 08:49,2023-10-27 08:49,"C#"
"Implement Behavior Tree Framework (Core)","Design and implement a lightweight, data-driven Behavior Tree (BT) framework in the core C# library. This includes base classes for nodes (Sequence, Selector, Action, Condition) and an executor that can traverse the tree. This is a foundational task for all AI logic.","Task","Backlog","Critical","ai-lead@project.com","pm@project.com","",34.1,"ai,architecture,backend,critical-path,behavior-tree","Sprint 7: Game End & AI Foundation","Artificial Intelligence (AI) Opponents","Monopoly Tycoon","","RISK-TECH-001: High complexity. Consider using a pre-existing library if this proves too difficult.","US-040","TASK-WI011-01",2023-10-27 08:50,2023-10-27 08:50,"C#,Architecture,Design Patterns,AI"
"Implement AI Configuration Loading","Create the system that loads AI behavior parameters from an external JSON file at runtime (REQ-1-063). This includes defining the JSON schema and creating a service to parse it and provide the parameters to the AI agents.","Task","Backlog","Must Have","developer@project.com","pm@project.com","",8.5,"ai,backend,configuration,json","Sprint 7: Game End & AI Foundation","Artificial Intelligence (AI) Opponents","Monopoly Tycoon","","","US-010","TASK-WI018-01",2023-10-27 08:51,2023-10-27 08:51,"C#,JSON.net"
"Implement AI Behavior: Property Acquisition & Bidding","Create the BT nodes and logic for AI decision-making regarding property purchases and auctions. The logic must use the external configuration parameters to vary behavior based on difficulty (e.g., 'Easy' AI might ignore some properties, 'Hard' AI will bid aggressively to complete sets).","Task","Backlog","Critical","ai-dev@project.com","pm@project.com","",25.6,"ai,gameplay,backend,behavior-tree","Sprint 8: AI Behavior & Trading","Artificial Intelligence (AI) Opponents","Monopoly Tycoon","","","US-032","TASK-WI018-01",2023-10-27 08:52,2023-10-27 08:52,"C#,AI,Behavior Tree"
"Implement AI Behavior: Building & Mortgaging","Create the BT nodes and logic for AI decisions on when to build houses/hotels and when to mortgage properties. 'Hard' AI should prioritize creating housing shortages and aggressively develop monopolies, while 'Easy' AI will be more conservative.","Task","Backlog","Critical","ai-dev@project.com","pm@project.com","",21.3,"ai,gameplay,backend,behavior-tree","Sprint 8: AI Behavior & Trading","Artificial Intelligence (AI) Opponents","Monopoly Tycoon","","","US-033","TASK-WI020-01",2023-10-27 08:53,2023-10-27 08:53,"C#,AI,Behavior Tree"
"Implement AI Behavior: Trade Evaluation & Proposal","Create the BT nodes and logic for the AI to evaluate incoming trade offers and to proactively propose trades. This is the most complex AI task, requiring the AI to value properties based on its goals and the game state. Logic must differ significantly between Easy, Medium, and Hard difficulties.","Task","Backlog","Critical","ai-lead@project.com","pm@project.com","",42.6,"ai,gameplay,backend,behavior-tree,trading","Sprint 8: AI Behavior & Trading","Artificial Intelligence (AI) Opponents","Monopoly Tycoon","","","US-041","TASK-WI020-02",2023-10-27 08:54,2023-10-27 08:54,"C#,AI,Behavior Tree,Algorithm"
"Implement Two-Panel Trade UI","Create the full trading interface as described in REQ-1-076. This modal UI must allow the player to select assets from their and their opponent's inventory to construct an offer. It must handle all validation (no developed properties, sufficient cash).","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",25.6,"ui,gameplay,trading,modal","Sprint 8: AI Behavior & Trading","UI/UX & Frontend","Monopoly Tycoon","","This UI is used for player-initiated, AI-initiated, and counter-offers.","US-053","TASK-WI014-01",2023-10-27 08:55,2023-10-27 08:55,"Unity UI,C#"
"Integrate Human-to-AI Trading Flow","Wire up the trading UI with the AI. When a human player proposes a trade, the offer data is passed to the AI's BT for evaluation. The AI's decision (Accept/Decline) is then passed back and displayed to the player.","Task","Backlog","High","developer@project.com","pm@project.com","",12.8,"gameplay,integration,ai,trading","Sprint 8: AI Behavior & Trading","Artificial Intelligence (AI) Opponents","Monopoly Tycoon","","","US-040","TASK-WI021-01,TASK-WI020-03",2023-10-27 08:56,2023-10-27 08:56,"C#,Unity"
"Implement AI-to-AI Trade Flow & Notification","Enable AI players to propose and evaluate trades with each other. When a trade is completed between two AIs, a non-intrusive UI notification must be displayed to the human player, summarizing the trade.","Task","Backlog","Should Have","developer@project.com","pm@project.com","",8.5,"ai,gameplay,backend,ui,feedback","Sprint 8: AI Behavior & Trading","Artificial Intelligence (AI) Opponents","Monopoly Tycoon","","","US-043","TASK-WI020-03",2023-10-27 08:57,2023-10-27 08:57,"C#,Unity UI"
"Implement Save Game Logic","Implement the logic to serialize the current `GameState` object to a versioned JSON file with a checksum (REQ-1-087, REQ-1-088). This includes creating the save file in the correct `%APPDATA%` directory.","Task","Backlog","Critical","sr-developer@project.com","pm@project.com","",17,"persistence,backend,serialization,critical-path","Sprint 9: Persistence & Player Stats","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","RISK-TECH-002: High risk of serialization bugs.","US-061","TASK-WI003-04",2023-10-27 08:58,2023-10-27 08:58,"C#,System.Text.Json,File I/O"
"Implement Save Game UI & Flow","Create the 'Save Game' screen accessible from the pause menu. It should display the available save slots. Implement the logic for saving to an empty slot or confirming an overwrite of an existing slot. The 'Save' option must be disabled at incorrect times in the turn.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",12.8,"ui,persistence,game-flow","Sprint 9: Persistence & Player Stats","UI/UX & Frontend","Monopoly Tycoon","","","US-061","TASK-WI023-01",2023-10-27 08:59,2023-10-27 08:59,"Unity UI,C#"
"Implement Load Game Logic (Deserialization & Validation)","Implement the logic to load a game. This includes reading the JSON file, validating its checksum, checking for version compatibility, and deserializing it back into a `GameState` object. Implement the data migration stub (REQ-1-090).","Task","Backlog","Critical","sr-developer@project.com","pm@project.com","",21.3,"persistence,backend,serialization,critical-path","Sprint 9: Persistence & Player Stats","Core Gameplay Loop & Rules Engine","Monopoly Tycoon","","","US-062","TASK-WI023-01",2023-10-27 09:00,2023-10-27 09:00,"C#,System.Text.Json,File I/O"
"Implement Load Game UI & Unusable File Indication","Create the 'Load Game' screen. It must list all save slots, displaying metadata for valid saves. It must also correctly identify and visually mark corrupted or incompatible save files, disabling the 'Load' button for them as per REQ-1-088.","Task","Backlog","High","frontend-dev@project.com","pm@project.com","",12.8,"ui,persistence,error-handling","Sprint 9: Persistence & Player Stats","UI/UX & Frontend","Monopoly Tycoon","","","US-063","TASK-WI024-01",2023-10-27 09:01,2023-10-27 09:01,"Unity UI,C#"
"Set up SQLite Database & Data Access Layer","Integrate `Microsoft.Data.Sqlite` into the project. Create a `DatabaseService` to manage the connection and schema creation for the player statistics database in `%APPDATA%`. Define the schema for player profiles, stats, and high scores.","Task","Backlog","Should Have","developer@project.com","pm@project.com","",17,"database,sqlite,backend,architecture","Sprint 9: Persistence & Player Stats","Game Setup & Player Profile","Monopoly Tycoon","","","US-013","TASK-WI002-01",2023-10-27 09:02,2023-10-27 09:02,"C#,SQLite,.NET Data"
"Implement Persistent Statistics Tracking & Update","At the end of a game, use the `StatisticsService` to aggregate results and write them to the SQLite database via the `DatabaseService`. This involves updating the player's overall stats and adding a new game result entry.","Task","Backlog","Should Have","developer@project.com","pm@project.com","",12.8,"database,backend,stats","Sprint 9: Persistence & Player Stats","Game Setup & Player Profile","Monopoly Tycoon","","","US-013","TASK-WI017-04,TASK-WI009-01",2023-10-27 09:03,2023-10-27 09:03,"C#,SQLite"
"Implement Player Profile & High Score UI Screens","Create the UI screens to display the player's historical statistics and the Top 10 High Scores list. These screens will fetch data from the `DatabaseService`.","Task","Backlog","Should Have","frontend-dev@project.com","pm@project.com","",12.8,"ui,stats,database","Sprint 9: Persistence & Player Stats","UI/UX & Frontend","Monopoly Tycoon","","","US-064","TASK-WI009-02",2023-10-27 09:04,2023-10-27 09:04,"Unity UI,C#"
"Implement Database Backup & Recovery Logic","Implement the automated backup mechanism for the SQLite database as specified in REQ-1-089. On startup, the system checks for file modifications and creates a backup, retaining the three most recent copies.","Task","Backlog","Medium","developer@project.com","pm@project.com","",8.5,"database,backend,resilience,file-io","Sprint 9: Persistence & Player Stats","Core Engine & Architecture","Monopoly Tycoon","","RISK-OPER-001: File I/O can be unreliable.","US-013","TASK-WI009-01",2023-10-27 09:05,2023-10-27 09:05,"C#,File I/O"
"Implement Installer Script (Inno Setup)","Create the Inno Setup script (`.iss`) that packages the final game build into a standalone installer. The script must define file locations, create shortcuts, and set up the uninstaller.","Task","Backlog","Must Have","devops@project.com","pm@project.com","",12.8,"deployment,installer,devops","Sprint 10: Polish & Release","Build, Test & Deployment","Monopoly Tycoon","","","US-001","",2023-10-27 09:06,2023-10-27 09:06,"Inno Setup,Scripting"
"Implement Uninstaller Logic (Clean Removal & Data Choice)","Enhance the Inno Setup script to handle uninstallation. It must perform a clean removal of all application files and registry entries. It must also include the custom logic to prompt the user to keep or delete their personal data in `%APPDATA%`.","Task","Backlog","Must Have","devops@project.com","pm@project.com","",8.5,"deployment,uninstaller,devops","Sprint 10: Polish & Release","Build, Test & Deployment","Monopoly Tycoon","","","US-006","TASK-WI026-01",2023-10-27 09:07,2023-10-27 09:07,"Inno Setup,Pascal Script"
"Implement Interactive Tutorial System","Develop the scripted, interactive tutorial. This requires a state machine or scripting engine to guide the player through predefined steps, highlighting UI elements and overriding game logic (e.g., forcing a specific dice roll).","Task","Backlog","Must Have","sr-developer@project.com","pm@project.com","",34.1,"gameplay,tutorial,onboarding,ui","Sprint 10: Polish & Release","UI/UX & Frontend","Monopoly Tycoon","","","US-059","TASK-WI011-01,TASK-WI012-01,TASK-WI013-02",2023-10-27 09:08,2023-10-27 09:08,"C#,Unity,State Machine Design"
"Implement Theme System (Asset Swapping)","Implement the architecture for the theme system. This involves creating an `AssetManager` that can dynamically load and apply different sets of visual and audio assets (board textures, token models, UI skins, music) based on user selection.","Task","Backlog","Should Have","sr-developer@project.com","pm@project.com","",25.6,"architecture,unity,asset-management,graphics","Sprint 10: Polish & Release","Core Engine & Architecture","Monopoly Tycoon","","Requires art assets for at least two themes.","US-066","TASK-WI001-01",2023-10-27 09:09,2023-10-27 09:09,"Unity,C#,Architecture,Addressables"
"Implement Digital Rulebook UI & Data Loading","Create the UI for the digital rulebook, including the search functionality. Implement the logic to load the rulebook content from an external JSON file.","Task","Backlog","Should Have","frontend-dev@project.com","pm@project.com","",12.8,"ui,content-management,json","Sprint 10: Polish & Release","UI/UX & Frontend","Monopoly Tycoon","","","US-060","TASK-WI006-01",2023-10-27 09:10,2023-10-27 09:10,"Unity UI,C#,JSON.net"
"Implement Update Checker","Implement the non-blocking check for application updates on startup. This involves making an asynchronous web request to a predefined URL to fetch the latest version number and displaying a notification if the current version is older.","Task","Backlog","Should Have","developer@project.com","pm@project.com","",8.5,"networking,backend,ui,versioning","Sprint 10: Polish & Release","Core Engine & Architecture","Monopoly Tycoon","","","US-067","TASK-WI006-01",2023-10-27 09:11,2023-10-27 09:11,"C#,.NET Networking"
"Final Integration Testing & Bug Fixing","Conduct a full, end-to-end testing pass of the entire game. Allocate time for identifying, prioritizing, and fixing bugs found during this phase to ensure a stable release candidate.","Task","Backlog","Critical","qa-team@project.com","pm@project.com","",80,"qa,testing,bug-fixing","Sprint 10: Polish & Release","Build, Test & Deployment","Monopoly Tycoon","","","US-001","",2023-10-27 09:12,2023-10-27 09:12,"QA,Debugging"