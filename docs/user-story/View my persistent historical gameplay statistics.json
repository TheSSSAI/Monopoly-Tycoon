{'story_metadata': {'story_id': 'US-013', 'elaboration_date': '2025-01-15', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'View my persistent historical gameplay statistics', 'as_a_user_story': 'As a returning player, I want to access a dedicated screen that displays my cumulative gameplay statistics from all my completed games, so that I can track my performance, see my win/loss record, and feel a sense of long-term progression and achievement.', 'user_persona': 'The human player who has created a profile and wants to see their long-term performance.', 'business_value': 'Increases player engagement and replayability by providing tangible metrics for long-term progress and mastery.', 'functional_area': 'Player Profile and Progression', 'story_theme': 'Player Engagement and Replayability'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Viewing existing statistics after multiple games', 'scenario_type': 'Happy_Path', 'given': 'the player has completed at least one game and has historical statistics saved', 'when': "the player selects the 'Player Statistics' option from the main menu", 'then': 'a dedicated statistics screen is displayed', 'and': 'the screen correctly shows values for: Total games played, Total wins, Win/Loss ratio, Average game duration, Most profitable property, Total rent paid, Total rent collected, Total properties acquired, and Largest trade deal', 'validation_notes': 'Verify that the displayed values accurately reflect the aggregated data from all completed games stored in the SQLite database.'}, {'criteria_id': 'AC-002', 'scenario': 'Viewing statistics as a new player with no game history', 'scenario_type': 'Edge_Case', 'given': 'the player has created a profile but has not completed any games', 'when': "the player navigates to the 'Player Statistics' screen", 'then': "the screen displays all statistical categories with appropriate default values (e.g., 'Total Games Played: 0', 'Win/Loss Ratio: N/A', 'Most Profitable Property: None').", 'validation_notes': "Ensure no null reference errors occur and that default 'zero-state' text is user-friendly."}, {'criteria_id': 'AC-003', 'scenario': 'Statistics are correctly updated after winning a game', 'scenario_type': 'Alternative_Flow', 'given': "the player has existing statistics, including 'Total Games Played' = 5 and 'Total Wins' = 2", 'when': 'the player completes and wins a new game and returns to the main menu', 'and': "the 'Win/Loss Ratio' is recalculated correctly", 'then': "the 'Total Games Played' statistic displays '6'", 'validation_notes': 'Requires an end-to-end test: play a game to completion, win, and then check the statistics screen for updated values.'}, {'criteria_id': 'AC-004', 'scenario': 'Statistics are correctly updated after losing a game', 'scenario_type': 'Alternative_Flow', 'given': "the player has existing statistics, including 'Total Games Played' = 5 and 'Total Wins' = 2", 'when': 'the player goes bankrupt, loses the game, and returns to the main menu', 'and': "the 'Win/Loss Ratio' is recalculated correctly", 'then': "the 'Total Games Played' statistic displays '6'", 'validation_notes': 'Requires an end-to-end test: play a game to completion, lose, and then check the statistics screen for updated values.'}, {'criteria_id': 'AC-005', 'scenario': 'Viewing statistics after a data reset', 'scenario_type': 'Edge_Case', 'given': 'the player has existing historical statistics', 'when': "the player uses the 'Reset Statistics' feature (from US-057) and confirms the action", 'and': "then navigates to the 'Player Statistics' screen", 'then': 'the screen displays the same default values as for a new player, as defined in AC-002.', 'validation_notes': 'Test the interaction between the reset functionality and this display screen.'}], 'user_interface_requirements': {'ui_elements': ['A dedicated screen/panel for statistics.', 'Text labels for each statistic.', 'Text fields to display the value of each statistic.', "A 'Back' or 'Close' button to return to the main menu."], 'user_interactions': ['User clicks a button on the main menu to open the statistics screen.', 'User can view the stats but cannot edit them directly.', "User clicks the 'Back' button to close the screen."], 'display_requirements': ['All statistics listed in SRS 3.4 must be displayed.', "Values should be clearly formatted (e.g., currency with '$', ratios as percentages or 'X:Y', duration as HH:MM:SS).", "The layout must be clean, legible, and consistent with the game's overall UI theme."], 'accessibility_needs': ['Text must have sufficient contrast against the background.', 'Font size should be legible on the minimum supported resolution.']}, 'business_rules': [{'rule_id': 'BR-001', 'rule_description': 'Historical statistics are only updated upon the definitive conclusion of a game (either a win or a loss for the human player).', 'enforcement_point': 'The game-end logic, after the victory or game-over screen is triggered.', 'violation_handling': 'Stats are not saved if the game is quit prematurely. No partial game data should be recorded.'}, {'rule_id': 'BR-002', 'rule_description': "All statistics are tied to a specific player profile via its unique 'profile_id'.", 'enforcement_point': 'Data access layer when reading from or writing to the statistics database.', 'violation_handling': 'If no profile is active, statistics cannot be viewed or saved.'}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-011', 'dependency_reason': 'A player profile with a unique ID is required to associate the statistics with.'}, {'story_id': 'US-046', 'dependency_reason': "The win condition must be implemented to trigger the 'win' update to the statistics."}, {'story_id': 'US-047', 'dependency_reason': "The lose condition must be implemented to trigger the 'loss' update to the statistics."}], 'technical_dependencies': ['A defined and implemented SQLite database schema for storing player statistics (as per SRS 9.1.1).', 'A data access layer (DAL) or service to handle all read/write operations to the statistics database.', 'Hooks in the core game loop to capture and pass game summary data upon game completion.'], 'data_dependencies': ['The system must be able to generate a summary of a completed game, including all data points needed to calculate the required statistics.'], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['The statistics screen must load from the main menu in under 1 second on a system meeting minimum requirements.', 'Database queries to fetch statistics must be optimized to prevent any noticeable delay.'], 'security': ['Data is stored locally; no network security is required. The application should handle potential file corruption gracefully (as per SRS 9.1.1).'], 'usability': ['The statistics must be presented in a clear and easily understandable format.', 'Navigation to and from the screen must be intuitive.'], 'accessibility': ['Adherence to WCAG 2.1 Level A for color contrast and text legibility.'], 'compatibility': ['The UI must render correctly on all supported aspect ratios and resolutions as defined in SRS 2.5.']}, 'implementation_considerations': {'complexity_assessment': 'Medium', 'complexity_factors': ['Requires setting up the SQLite database, schema, and data access layer.', 'Logic for aggregating stats at the end of a game is non-trivial and must be robust.', 'Requires careful integration with the game state and end-of-game flow to ensure data is captured correctly.'], 'technical_risks': ['Potential for data corruption in the local SQLite file; backup/recovery mechanism (SRS 9.1.2) is important.', 'Ensuring the end-of-game data aggregation is transactional and atomic to prevent partial updates.'], 'integration_points': ['Main Menu UI (to launch the screen).', 'Game Over / Victory sequence (to trigger the data update).', "Settings Menu (for the 'Reset Statistics' feature)."]}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E'], 'test_scenarios': ['Verify UI display for a new player.', 'Play and win a game, then verify all stats are updated correctly.', 'Play and lose a game, then verify all stats are updated correctly.', 'Use the reset feature and verify the screen returns to its default state.', 'Attempt to view stats with a corrupted database file to ensure graceful failure.'], 'test_data_needs': ['A pre-populated SQLite database with sample statistics for testing the display logic.', "A script to reset the database to a 'new player' state for repeatable testing."], 'testing_tools': ['NUnit for unit tests of the data access layer and calculation logic.', 'A database client for inspecting the SQLite file during integration tests.']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by team', 'Unit tests for the data access layer and statistics calculation logic are implemented with >= 70% coverage and passing', 'Integration testing for the game-completion-to-database-update flow is completed successfully', 'User interface reviewed and approved for clarity and consistency', 'Performance requirements for screen load time are verified', 'Security requirements for handling potential data corruption are validated', 'Documentation for the statistics database schema is created', 'Story deployed and verified in staging environment'], 'planning_information': {'story_points': '5', 'priority': 'Medium', 'sprint_considerations': ['The backend (database and DAL) can be developed independently of the UI, which can use mock data initially.', 'Final integration depends on the completion of the game-end logic (US-046, US-047).'], 'release_impact': 'This is a key feature for long-term player retention and should be included in the initial release (v1.0).'}}