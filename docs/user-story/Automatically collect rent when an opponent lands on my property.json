{'story_metadata': {'story_id': 'US-044', 'elaboration_date': '2025-01-15', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Automatically collect rent when an opponent lands on my property', 'as_a_user_story': 'As a property owner, I want the game to automatically calculate and transfer the correct rent from an opponent who lands on my property so that the game rules are enforced fairly and I can focus on my strategy without manually managing transactions.', 'user_persona': 'The Human Player or AI Player who owns a property.', 'business_value': 'Automates a core economic loop of the game, ensuring strict rule adherence (SRS 4.1), maintaining game integrity, and providing a seamless, non-interactive gameplay experience for a fundamental transaction.', 'functional_area': 'Core Gameplay Mechanics', 'story_theme': 'Economic Management'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Rent collection on a standard property with no monopoly', 'scenario_type': 'Happy_Path', 'given': "Player A owns 'Baltic Avenue' (but not 'Mediterranean Avenue') and it is not mortgaged.", 'when': "Player B lands on 'Baltic Avenue'.", 'then': "The base rent for 'Baltic Avenue' ($4) is automatically deducted from Player B's cash and added to Player A's cash."}, {'criteria_id': 'AC-002', 'scenario': 'Rent collection on an undeveloped property within a monopoly', 'scenario_type': 'Happy_Path', 'given': "Player A owns 'St. Charles Place', 'States Avenue', and 'Virginia Avenue', and none have houses or are mortgaged.", 'when': "Player B lands on 'Virginia Avenue'.", 'then': 'The rent, which is double the base rent for an undeveloped property in a monopoly ($20), is automatically transferred from Player B to Player A.'}, {'criteria_id': 'AC-003', 'scenario': 'Rent collection on a developed property with houses', 'scenario_type': 'Happy_Path', 'given': "Player A owns the monopoly for 'Boardwalk' and 'Park Place', and 'Boardwalk' has 3 houses.", 'when': "Player B lands on 'Boardwalk'.", 'then': "The correct rent for 'Boardwalk' with 3 houses ($1400) is automatically transferred from Player B to Player A."}, {'criteria_id': 'AC-004', 'scenario': 'Rent collection for Railroads', 'scenario_type': 'Happy_Path', 'given': "Player A owns 3 Railroads ('Reading Railroad', 'Pennsylvania Railroad', 'B. & O. Railroad').", 'when': "Player B lands on 'Pennsylvania Railroad'.", 'then': 'The correct rent for owning 3 Railroads ($100) is automatically transferred from Player B to Player A.'}, {'criteria_id': 'AC-005', 'scenario': 'Rent collection for Utilities', 'scenario_type': 'Happy_Path', 'given': "Player A owns both 'Electric Company' and 'Water Works'. Player B has $500.", 'when': "Player B rolls a total of 8 and lands on 'Electric Company'.", 'then': 'The rent, calculated as 10 times the dice roll (10 * 8 = $80), is automatically transferred from Player B to Player A.'}, {'criteria_id': 'AC-006', 'scenario': 'No rent collected on a mortgaged property', 'scenario_type': 'Edge_Case', 'given': "Player A owns 'Indiana Avenue' and it is currently mortgaged.", 'when': "Player B lands on 'Indiana Avenue'.", 'then': 'No rent is collected, and no cash is transferred between players.'}, {'criteria_id': 'AC-007', 'scenario': "No rent collected when landing on one's own property", 'scenario_type': 'Edge_Case', 'given': "Player A owns 'Kentucky Avenue'.", 'when': "Player A's token lands on 'Kentucky Avenue'.", 'then': 'No rent transaction occurs.'}, {'criteria_id': 'AC-008', 'scenario': 'Player has insufficient cash to pay rent, triggering bankruptcy', 'scenario_type': 'Alternative_Flow', 'given': "Player A owns 'Boardwalk' with a hotel (rent $2000). Player B has only $500 cash and no other assets.", 'when': "Player B lands on 'Boardwalk'.", 'then': 'The game identifies that Player B cannot pay the rent and initiates the bankruptcy process (as defined in SRS 7.1).'}, {'criteria_id': 'AC-009', 'scenario': 'Rent is collected by a player who is in Jail', 'scenario_type': 'Edge_Case', 'given': "Player A is in the 'In Jail' space. Player A owns 'New York Avenue' and it is not mortgaged.", 'when': "Player B lands on 'New York Avenue'.", 'then': 'The correct rent is collected from Player B and transferred to Player A, even though Player A is in Jail.'}, {'criteria_id': 'AC-010', 'scenario': 'Visual and audio feedback for rent transaction', 'scenario_type': 'Happy_Path', 'given': 'A rent payment is due from Player B to Player A.', 'when': 'The rent transaction is processed.', 'then': "A visual effect (e.g., animated currency) moves from Player B's HUD to Player A's HUD.", 'and': "A non-intrusive notification appears, e.g., 'Player B paid $50 rent to Player A'."}], 'user_interface_requirements': {'ui_elements': ['Player HUD (for displaying cash balances)', 'Non-intrusive notification panel/toast'], 'user_interactions': ['This feature is fully automated. No direct user interaction is required from the property owner to collect rent.'], 'display_requirements': ['The cash balances for both the paying and receiving player must be updated immediately after the transaction.', 'A clear, temporary on-screen message must confirm the transaction, specifying the payer, receiver, amount, and property.'], 'accessibility_needs': ['The audio cue for the transaction must be distinct from other sounds. The visual notification must have sufficient contrast and be legible.']}, 'business_rules': [{'rule_id': 'BR-RENT-001', 'rule_description': 'Rent cannot be collected on mortgaged properties.', 'enforcement_point': 'During the rent calculation phase, immediately after a player lands on an owned property.', 'violation_handling': "The rent calculation function returns zero if the property's status is 'mortgaged'."}, {'rule_id': 'BR-RENT-002', 'rule_description': 'Rent on undeveloped properties in a complete color set is doubled.', 'enforcement_point': 'During rent calculation for a colored property.', 'violation_handling': 'The system must check for monopoly ownership and apply the multiplier if no buildings are present.'}, {'rule_id': 'BR-RENT-003', 'rule_description': 'Utility rent is calculated based on the dice roll and number of utilities owned (4x for one, 10x for two).', 'enforcement_point': 'During rent calculation when the landed-on property is a Utility.', 'violation_handling': 'The system must retrieve the last dice roll value for the current turn and apply the correct multiplier.'}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-016', 'dependency_reason': "The system must first be able to move a player's token to a destination space to trigger the landing event."}, {'story_id': 'US-030', 'dependency_reason': 'The concept of property ownership must be implemented for rent to be applicable.'}, {'story_id': 'US-038', 'dependency_reason': 'The system needs to track the mortgaged state of a property, as this prevents rent collection.'}, {'story_id': 'US-033', 'dependency_reason': 'The system needs to track the development level (houses/hotels) of properties to calculate correct rent amounts.'}, {'story_id': 'US-047', 'dependency_reason': 'The bankruptcy system must exist to be triggered when a player cannot afford to pay the rent.'}], 'technical_dependencies': ['A robust `GameState` management system (SRS 4.4) that provides access to all player states and the board state.', 'A `RuleEngine` component capable of complex, state-based calculations.', 'The UI/HUD system for displaying cash updates and notifications.', 'The Audio system for playing sound effects.'], 'data_dependencies': ['Access to the official property data, including base rent, rent with developments, mortgage value, and group affiliation.'], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['The entire rent calculation and transaction process must be completed virtually instantaneously (<100ms) to not disrupt game flow.'], 'security': ['N/A for this feature.'], 'usability': ['The automated nature of this feature is key to usability. The feedback provided (visual, audio, text) must be clear and unambiguous.'], 'accessibility': ['As per UI requirements, ensure feedback is not conveyed by color or sound alone.'], 'compatibility': ['N/A for this feature.']}, 'implementation_considerations': {'complexity_assessment': 'Medium', 'complexity_factors': ['The rent calculation logic is a multi-branch decision tree based on property type, monopoly status, development level, and dice rolls.', 'Ensuring 100% accuracy with the official Monopoly rulebook requires careful implementation and testing.', 'The integration point with the bankruptcy system is critical and must be handled gracefully.'], 'technical_risks': ['Bugs in the rent calculation logic can severely impact game balance and fairness.', 'Failure to correctly trigger the bankruptcy flow could lead to a soft-locked game state (e.g., a player with negative cash).'], 'integration_points': ['Player Movement System: Triggered upon completion of a move.', 'Game State Manager: Reads property ownership, development, and player cash.', 'Bankruptcy System: Triggered if payment is not possible.', 'UI System: Pushes updates to the HUD and notification panel.', 'Audio System: Triggers sound effects.']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E'], 'test_scenarios': ["Unit test every property's rent calculation under all possible conditions (e.g., Boardwalk with 0-4 houses and a hotel, 1-4 railroads, 1-2 utilities, mortgaged state).", 'Integration test the flow from a player landing on a property to the cash being successfully transferred and the HUD updating.', 'Integration test the scenario where a player cannot pay rent and verify that the bankruptcy module is correctly invoked.', 'End-to-end test a gameplay sequence where rent is paid multiple times to ensure no cumulative errors.'], 'test_data_needs': ['A suite of predefined `GameState` files (as per SRS 2.7) that set up specific scenarios for testing (e.g., a game state where one player has a monopoly with hotels, another where all railroads are owned by one player).'], 'testing_tools': ['NUnit for unit tests.', 'A test harness capable of loading specific game state files.']}, 'definition_of_done': ['All acceptance criteria validated and passing.', 'Code for the rent calculation logic has been peer-reviewed against the official Monopoly rulebook for accuracy.', 'Unit test coverage for the rent calculation module exceeds 85%.', 'Integration tests for the rent-to-bankruptcy pipeline are implemented and passing.', 'Visual and audio feedback has been reviewed and approved by the UX lead.', 'Performance of the transaction is verified to be non-disruptive.', 'All related documentation has been updated.', 'Story deployed and verified in the staging environment without regressions.'], 'planning_information': {'story_points': '5', 'priority': 'High', 'sprint_considerations': ["This is a foundational story for the game's economic engine. It is a prerequisite for any stories involving player bankruptcy or advanced AI financial strategy.", 'Requires significant QA focus on the unit tests for the rule logic.'], 'release_impact': ['Critical for the Minimum Viable Product (MVP). The game is not playable without this feature.']}}