{'story_metadata': {'story_id': 'US-038', 'elaboration_date': '2025-01-17', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Mortgage an undeveloped property to get cash', 'as_a_user_story': 'As a player managing my finances, I want to mortgage my undeveloped properties to the Bank, so that I can receive immediate cash to pay debts, fund purchases, or avoid bankruptcy.', 'user_persona': 'The human player who needs to liquidate assets for immediate cash flow during their turn.', 'business_value': 'Implements a fundamental economic rule of Monopoly, providing players with a critical strategic option to manage their finances and avoid bankruptcy. This enhances game authenticity and replayability.', 'functional_area': 'Property and Economic Management', 'story_theme': 'Player Financial Actions'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Successfully mortgage an undeveloped, unmortgaged property', 'scenario_type': 'Happy_Path', 'given': "I am the active player, it is my turn before the dice roll, and I own an undeveloped and unmortgaged property (e.g., 'Atlantic Avenue')", 'when': "I open the Property Management interface, select 'Atlantic Avenue', and confirm the 'Mortgage' action", 'then': "My cash balance increases by the property's mortgage value ($130 for Atlantic Avenue)", 'and': 'The action is logged at INFO level with turn number, player ID, property ID, and transaction amount.', 'validation_notes': "Verify player cash increases correctly. Check the property's status in the game state object. Visually confirm the UI and board indicators. Check the log file for the transaction entry."}, {'criteria_id': 'AC-002', 'scenario': 'Attempting to mortgage a property with buildings', 'scenario_type': 'Error_Condition', 'given': 'I am the active player and I own a property with one or more houses/hotels on it', 'when': 'I open the Property Management interface and select the developed property', 'then': "The 'Mortgage' option is disabled or not visible", 'and': "A tooltip or message informs me that all buildings on the property's color group must be sold first.", 'validation_notes': 'Confirm the mortgage button/option is not interactable for a property with a house. Verify the explanatory text is present and clear.'}, {'criteria_id': 'AC-003', 'scenario': 'Attempting to mortgage a property that is already mortgaged', 'scenario_type': 'Error_Condition', 'given': "I am the active player and I own a property that is already in a 'mortgaged' state", 'when': 'I open the Property Management interface and select the mortgaged property', 'then': "The 'Mortgage' option is not available", 'and': "An 'Unmortgage' option is available instead (as per US-039).", 'validation_notes': "Check the available actions for a mortgaged property in the UI. The 'Mortgage' action must be absent."}, {'criteria_id': 'AC-004', 'scenario': 'Cancelling the mortgage action from the confirmation dialog', 'scenario_type': 'Alternative_Flow', 'given': 'I have selected an eligible property to mortgage and the confirmation dialog is displayed', 'when': "I select the 'Cancel' option", 'then': 'The confirmation dialog closes', 'and': "The property's state remains 'unmortgaged'.", 'validation_notes': 'Perform the cancel action and verify that no game state values (player cash, property status) have been modified.'}, {'criteria_id': 'AC-005', 'scenario': 'Rent cannot be collected on a mortgaged property', 'scenario_type': 'Edge_Case', 'given': 'I own a mortgaged property', 'when': "An opponent's token lands on that property space", 'then': 'No rent transaction occurs', 'and': 'My cash balance remains unchanged.', 'validation_notes': 'This is an integration test. After mortgaging a property, force an AI player to land on it and verify that the rent collection logic is correctly skipped.'}], 'user_interface_requirements': {'ui_elements': ["A 'Mortgage' button within the Property Management interface for each eligible property.", "A confirmation dialog with 'Confirm' and 'Cancel' buttons that clearly states the property name and mortgage value.", 'A persistent visual indicator for mortgaged properties on their UI cards and on the 3D board space.'], 'user_interactions': ['Player clicks on a property in their portfolio to see available actions.', "Player clicks the 'Mortgage' button to initiate the process.", "Player clicks 'Confirm' to finalize the transaction or 'Cancel' to abort."], 'display_requirements': ["The mortgage value must be clearly displayed next to the 'Mortgage' button or within the confirmation dialog.", "The player's total cash in the main HUD must update immediately after the transaction is confirmed."], 'accessibility_needs': ['The visual indicator for a mortgaged property should not rely on color alone (e.g., use an icon in addition to a color change) to support colorblind users.']}, 'business_rules': [{'rule_id': 'BR-MORT-01', 'rule_description': 'A property can only be mortgaged if it is undeveloped (has no houses or hotels).', 'enforcement_point': 'Game logic when presenting actions in the Property Management UI.', 'violation_handling': "The 'Mortgage' action is made unavailable/disabled in the UI for developed properties."}, {'rule_id': 'BR-MORT-02', 'rule_description': 'The mortgage value of a property is exactly half of its printed purchase price.', 'enforcement_point': 'Data model for properties and during the mortgage transaction calculation.', 'violation_handling': 'System must use the pre-defined mortgage value. No user input is allowed.'}, {'rule_id': 'BR-MORT-03', 'rule_description': 'No rent can be collected on a mortgaged property.', 'enforcement_point': 'Rent collection logic triggered when a player lands on a property.', 'violation_handling': "The rent collection function must first check the property's mortgage status and return zero if it is mortgaged."}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-052', 'dependency_reason': 'This story requires the existence of the dedicated property management interface to host the mortgage action.'}, {'story_id': 'US-044', 'dependency_reason': "The rent collection logic from US-044 must be modified to check for a property's mortgaged status."}, {'story_id': 'N/A - Sell Buildings', 'dependency_reason': 'A story for selling buildings back to the bank must be implemented to handle the case of mortgaging a property that is part of a developed monopoly.'}], 'technical_dependencies': ["GameState Management System: Must be able to update a property's state and a player's cash.", 'PlayerState Object: The data structure for player cash and owned properties must be accessible.', 'Logging Framework (Serilog): Required for auditability of the transaction.'], 'data_dependencies': ['Property Data: A data source (e.g., JSON file) containing all property details, including purchase price and mortgage value, must be available.'], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['The UI update (cash total, property status) after confirming a mortgage must be visually instantaneous (<200ms).'], 'security': ['N/A for this feature in an offline, single-player game.'], 'usability': ['The process to mortgage a property should be intuitive and require no more than three clicks from the main game screen.', 'The financial consequence (cash received) must be clearly communicated before final confirmation.'], 'accessibility': ['Adherence to WCAG guidelines for color contrast and use of non-color indicators as specified in UI requirements.'], 'compatibility': ['Functionality must be consistent across all supported Windows versions and display resolutions.']}, 'implementation_considerations': {'complexity_assessment': 'Low', 'complexity_factors': ['Requires changes in both UI (Property Management screen) and game logic (GameState).', 'Involves updating the rent collection logic to respect the new property state.', 'Requires a new visual state for property assets on the board and in the UI.'], 'technical_risks': ['Potential for race conditions or inconsistent state if the transaction is not atomic (cash updated but property state is not, or vice-versa). Ensure the state change is a single, transactional operation.'], 'integration_points': ['Property Management UI (US-052)', 'Rent Collection System (US-044)', 'Save/Load System (US-061) - must correctly serialize and deserialize the mortgaged state.', 'Logging System (SRS 2.6)']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E'], 'test_scenarios': ['Mortgage a single property and verify game state.', 'Attempt to mortgage a developed property.', 'Mortgage a property, then have an AI land on it to verify no rent is collected.', 'Mortgage a property, save the game, load the game, and verify the state persists.', 'Cancel the mortgage action and verify no state change.'], 'test_data_needs': ['A predefined game state file where the human player owns several undeveloped, unmortgaged properties.', 'A predefined game state file where the human player owns a developed monopoly.'], 'testing_tools': ['NUnit for unit tests.', 'Unity Test Framework for integration tests.']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by at least one other developer', 'Unit tests for the mortgage transaction logic are implemented and passing with >70% coverage', 'Integration testing for the UI-to-GameState flow and rent-collection interaction is completed successfully', 'User interface changes are reviewed and approved by the UI/UX lead', 'Performance requirements for UI responsiveness are verified', 'The mortgage transaction is correctly logged as per SRS 2.8', 'Documentation for the property state model is updated if necessary', 'Story deployed and verified in the staging/QA environment'], 'planning_information': {'story_points': '3', 'priority': 'High', 'sprint_considerations': ['This story should be prioritized after the core property management UI (US-052) is complete.', "Consider pairing this with US-039 ('Unmortgage a property') in the same sprint as they are functionally related and affect the same UI components."], 'release_impact': ["This is a critical feature for Minimum Viable Product (MVP) as it's a core rule of the game."]}}