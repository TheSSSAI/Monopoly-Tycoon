{'story_metadata': {'story_id': 'US-033', 'elaboration_date': '2025-01-17', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Build houses on properties in a complete color set', 'as_a_user_story': 'As a player who owns a complete color set, I want to purchase and build houses on those properties so that I can increase the rent value and gain a strategic advantage over my opponents.', 'user_persona': 'Human Player', 'business_value': 'Enables a core strategic gameplay mechanic (property development) which is essential for game authenticity and the primary method for players to increase their income and win the game.', 'functional_area': 'Property and Economic Management', 'story_theme': 'Core Gameplay Mechanics'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Successfully build the first house on a property in a monopoly', 'scenario_type': 'Happy_Path', 'given': 'I am the active player, it is my turn before I roll the dice, I own all properties in the Light Blue color set, none of which are mortgaged or have houses, I have at least $50 cash, and the bank has at least one house available', 'when': 'I navigate to the property management screen and choose to build one house on Oriental Avenue', 'then': "my cash is reduced by the house cost ($50), the bank's available house count decreases by one, a visual representation of one house appears on the Oriental Avenue space on the board, and the property management UI updates to show Oriental Avenue has one house.", 'validation_notes': 'Verify player cash, bank house count, and property state are all updated correctly in the GameState object. Confirm visual update on the 3D board.'}, {'criteria_id': 'AC-002', 'scenario': 'Attempt to build without owning a complete color set', 'scenario_type': 'Error_Condition', 'given': 'I own Oriental Avenue and Vermont Avenue, but not Connecticut Avenue', 'when': 'I access the property management screen and view the Light Blue properties', 'then': 'the option to build houses on Oriental Avenue or Vermont Avenue is disabled or hidden, and a tooltip or message indicates that a complete color set is required to build.', 'validation_notes': 'Check that the UI prevents the build action. No state change should occur.'}, {'criteria_id': 'AC-003', 'scenario': 'Attempt to build with insufficient funds', 'scenario_type': 'Error_Condition', 'given': 'I own the complete Light Blue monopoly and have $49 cash', 'when': 'I attempt to build a house on any Light Blue property (costing $50)', 'then': "the build action is disabled or, if clicked, fails with a clear visual and/or audio notification stating 'Insufficient Funds'. My cash balance remains unchanged.", 'validation_notes': "Verify the UI prevents the transaction and that the player's cash is not deducted."}, {'criteria_id': 'AC-004', 'scenario': 'Attempt to build when the bank has no houses available', 'scenario_type': 'Edge_Case', 'given': "I own the complete Light Blue monopoly, have sufficient cash, but the bank's house supply is 0", 'when': 'I attempt to build a house on any Light Blue property', 'then': 'the action is blocked and a message is displayed informing me that there are no houses left in the bank.', 'validation_notes': "This directly tests the dependency on US-036. The system must correctly read the bank's house supply from the GameState."}, {'criteria_id': 'AC-005', 'scenario': 'Attempt to build on a mortgaged property within a monopoly', 'scenario_type': 'Error_Condition', 'given': 'I own the complete Light Blue monopoly, but Oriental Avenue is mortgaged', 'when': 'I attempt to build a house on Oriental Avenue', 'then': 'the action is blocked, and the UI clearly indicates that buildings cannot be placed on mortgaged properties.', 'validation_notes': "The system must check the 'isMortgaged' status of a property before allowing a build action."}, {'criteria_id': 'AC-006', 'scenario': 'Attempt to build on a non-developable property type (e.g., Railroad, Utility)', 'scenario_type': 'Error_Condition', 'given': 'I own all four Railroads', 'when': 'I select a Railroad in the property management screen', 'then': 'no option to build houses is presented for that property.', 'validation_notes': "The UI should conditionally render the 'Build' button based on the property type."}, {'criteria_id': 'AC-007', 'scenario': "Building houses must follow the 'even build' rule", 'scenario_type': 'Alternative_Flow', 'given': 'I own the complete Light Blue monopoly. Oriental Avenue has 1 house. Vermont Avenue and Connecticut Avenue have 0 houses.', 'when': 'I attempt to build a second house on Oriental Avenue', 'then': 'the action is blocked, and a message explains that I must build one house on Vermont and Connecticut before building a second on Oriental.', 'validation_notes': 'This tests the dependency on US-034. The build logic must compare house counts across all properties in the color set.'}], 'user_interface_requirements': {'ui_elements': ["A 'Build House' button within the Property Management Interface (US-052).", 'A visual indicator (e.g., a small 3D house model) on the game board property space.', "A numeric indicator of house count on the property's card in the management UI.", "A tooltip or text element explaining why building is disabled (e.g., 'Requires Monopoly', 'Insufficient Funds')."], 'user_interactions': ['Player selects a property group from their portfolio.', "Player clicks a 'Build' button associated with a specific property.", 'Player receives immediate visual and audio feedback on success or failure of the build attempt.'], 'display_requirements': ['The cost to build the next house must be clearly displayed.', "The player's current cash must be visible within the build interface.", 'The number of houses remaining in the bank should be visible.'], 'accessibility_needs': ['Color-coded indicators for monopolies should have a secondary, non-color-based indicator (e.g., an icon).', 'All interactive elements must be clearly labeled for screen readers.']}, 'business_rules': [{'rule_id': 'BR-001', 'rule_description': 'A player must own all properties of a single color group (a monopoly) before they can build houses on any property in that group.', 'enforcement_point': "Before enabling the 'Build House' UI action.", 'violation_handling': "The 'Build House' action is disabled or hidden."}, {'rule_id': 'BR-002', 'rule_description': 'Building must be done evenly. A second house cannot be built on any property in a group until all properties in that group have one house, and so on.', 'enforcement_point': 'During the validation of a build request.', 'violation_handling': 'The transaction is rejected and a user-facing error message is displayed.'}, {'rule_id': 'BR-003', 'rule_description': 'No buildings can be erected on a mortgaged property.', 'enforcement_point': "Before enabling the 'Build House' UI action for a specific property.", 'violation_handling': "The 'Build House' action is disabled for that property."}, {'rule_id': 'BR-004', 'rule_description': 'A player cannot build if the bank has no houses left in its supply.', 'enforcement_point': 'During the validation of a build request.', 'violation_handling': 'The transaction is rejected and a user-facing error message is displayed.'}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-030', 'dependency_reason': 'Player must be able to acquire properties before they can build on them.'}, {'story_id': 'US-052', 'dependency_reason': 'Requires the dedicated Property Management Interface to exist for the player to initiate the build action.'}, {'story_id': 'US-034', 'dependency_reason': "This story implements the positive case of building, while US-034 implements the critical 'even building' constraint. They are two sides of the same feature."}, {'story_id': 'US-036', 'dependency_reason': "The build logic must check the bank's supply of houses, which is the core functionality of US-036."}], 'technical_dependencies': ['GameState Management System: Must be able to read and write to PlayerState (cash, properties), BoardState (property development level), and BankState (house supply).', 'Rule Engine: A central logic component that can validate the legality of a build action based on all business rules.'], 'data_dependencies': ['Property Data: Requires access to property details, including color group, house cost, and whether it is developable.'], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['The build action, including state update and UI refresh, must complete in under 100ms to feel instantaneous to the user.'], 'security': [], 'usability': ['The process of selecting a property and building a house should be intuitive and require no more than 3 clicks from the main game HUD.', 'Error messages for failed build attempts must be clear, concise, and context-specific.'], 'accessibility': ['Must adhere to WCAG 2.1 AA standards for UI contrast and interactive element labeling.'], 'compatibility': []}, 'implementation_considerations': {'complexity_assessment': 'Medium', 'complexity_factors': ['The validation logic is complex, requiring checks against multiple parts of the game state (player cash, monopoly status, even-build rule, bank supply, mortgage status).', "Requires tight coupling between the game's rule engine, the central game state, and the user interface.", "The 'even build' logic requires iterating over a set of related properties, which adds a layer of complexity over a simple single-property check."], 'technical_risks': ['Potential for race conditions or inconsistent state if the game state updates are not handled atomically.', 'The UI logic for enabling/disabling build options could become complex and prone to bugs if not managed carefully.'], 'integration_points': ["Player's cash balance in `PlayerState`.", 'List of owned properties in `PlayerState`.', 'House count for each property in `BoardState`.', 'Available house supply in `BankState`.', 'Property Management UI (US-052).']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E'], 'test_scenarios': ['Verify building on each different color group to ensure costs are correct.', 'Test building up to 4 houses and then upgrading to a hotel (covered in US-035, but the foundation is here).', "Test the 'even build' rule with a 2-property group (e.g., Dark Purple) and a 3-property group (e.g., Light Blue).", 'Test building when bank has exactly 1 house left.', 'Test attempting to build after unmortgaging the last property in a set.'], 'test_data_needs': ['Pre-configured save files where the player has various monopolies, different cash levels, and the bank has a limited supply of houses.'], 'testing_tools': ['NUnit for unit tests.', 'Unity Test Framework for integration tests.']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by at least one other developer', 'Unit tests for the build validation logic in the Rule Engine are implemented and achieve >70% coverage', 'Integration testing for the UI-to-GameState-to-UI flow is completed successfully', 'User interface for building is reviewed and approved by the UX lead', 'Performance of the build action is verified to be under 100ms', 'All related business rules (monopoly, even-build, mortgage, bank supply) are enforced correctly', 'Documentation for the build logic is updated', 'Story deployed and verified in the staging environment'], 'planning_information': {'story_points': '5', 'priority': 'High', 'sprint_considerations': ['This is a foundational gameplay feature. It should be prioritized early in the development of core mechanics, immediately following property acquisition and the creation of the property management UI.', 'Requires close collaboration between UI developers and game logic developers.'], 'release_impact': ['Critical for a minimum viable product (MVP). The game is not considered a functional Monopoly simulation without this feature.']}}