{'story_metadata': {'story_id': 'US-046', 'elaboration_date': '2025-01-15', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'See a victory screen when I am the last player remaining', 'as_a_user_story': 'As a human player who has won the game, I want to be presented with a distinct and celebratory victory screen, so that my achievement is acknowledged and I feel a sense of accomplishment, encouraging me to play again.', 'user_persona': 'The human player who has successfully bankrupted all AI opponents.', 'business_value': 'Provides crucial positive feedback and a sense of closure, enhancing player satisfaction and supporting the core objective of replayability. A polished win state makes the game feel complete and rewarding.', 'functional_area': 'Game End Conditions & UI', 'story_theme': 'Player Experience and Game Flow'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Display Victory Screen on Win Condition', 'scenario_type': 'Happy_Path', 'given': 'a game is in progress with one human player and one final AI opponent', 'when': 'the AI opponent is declared bankrupt, making the human player the sole remaining participant', 'then': 'the main game HUD is replaced by a modal Victory Screen.', 'validation_notes': 'Verify that the game state manager correctly identifies the win condition (active player count drops to 1 and the remaining player is human) and triggers the UI transition.'}, {'criteria_id': 'AC-002', 'scenario': 'Victory Screen Content Display', 'scenario_type': 'Happy_Path', 'given': 'the Victory Screen is displayed', 'when': 'the player views the screen', 'then': "the screen must display a prominent 'Victory!' message, the player's profile name, and the following key statistics from the completed match: Final Net Worth, Game Duration, and Total Turns.", 'validation_notes': 'Check that the displayed data is pulled correctly from the final game state object. Net worth calculation must match the rule defined in SRS 4.6.'}, {'criteria_id': 'AC-003', 'scenario': 'Celebratory Feedback', 'scenario_type': 'Happy_Path', 'given': 'the Victory Screen is displayed', 'when': 'the screen first appears', 'then': 'a victory fanfare audio clip plays and celebratory visual effects (e.g., confetti) are rendered.', 'validation_notes': 'Confirm that the audio and visual assets are triggered and that they are linked to the currently active theme system (as per US-066).'}, {'criteria_id': 'AC-004', 'scenario': 'Navigation from Victory Screen', 'scenario_type': 'Happy_Path', 'given': 'the Victory Screen is displayed', 'when': 'the player interacts with the navigation options', 'then': "there are two clearly labeled, functional buttons: one to navigate to the 'Game Summary' screen (US-048) and another to 'Return to Main Menu'.", 'validation_notes': 'Test that clicking each button successfully transitions the application to the correct screen.'}, {'criteria_id': 'AC-005', 'scenario': 'Win Condition with Multiple Simultaneous Bankruptcies', 'scenario_type': 'Edge_Case', 'given': 'a game is in progress with one human player and two or more AI opponents', 'when': 'a single game event (e.g., a massive rent payment) causes all remaining AI opponents to go bankrupt simultaneously', 'then': 'the system correctly identifies the human player as the winner and displays the Victory Screen without errors.', 'validation_notes': 'Requires a specific test data setup (as per SRS 2.7) to simulate this scenario.'}, {'criteria_id': 'AC-006', 'scenario': 'High Score List Trigger', 'scenario_type': 'Alternative_Flow', 'given': 'the win condition is met', 'when': 'the final game statistics are calculated', 'then': "the system triggers the logic to check if the player's score qualifies for the Top Score History (US-064) and updates the list if necessary.", 'validation_notes': 'This is a backend check. Verify by checking the SQLite database or the Top Score History screen after returning to the main menu.'}], 'user_interface_requirements': {'ui_elements': ['Modal full-screen panel', "Large header text for 'Victory!'", "Text element for player's profile name", "Formatted text elements for 'Final Net Worth', 'Game Duration', 'Total Turns'", "Button: 'View Game Summary'", "Button: 'Return to Main Menu'", 'Particle effect system for celebratory visuals (e.g., confetti)'], 'user_interactions': ['The screen must halt all background game processing.', 'The player must be able to click the navigation buttons.', 'No other interactions should be possible until a navigation choice is made.'], 'display_requirements': ["The screen's visual design (colors, fonts, background) must be consistent with the selected game theme (US-066).", 'All text must be legible against the background.', "Currency and time values must be formatted appropriately (e.g., '$10,500', '45:32')."], 'accessibility_needs': ['Buttons must have clear visual states for hover and click.', 'Text must meet minimum contrast ratios for readability.']}, 'business_rules': [{'rule_id': 'BR-001', 'rule_description': "The win condition is met if and only if one player remains who is not in the 'Bankrupt' state.", 'enforcement_point': "After any event that changes a player's status to 'Bankrupt'.", 'violation_handling': 'N/A - System rule.'}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-011', 'dependency_reason': "Required to display the player's profile name on the victory screen."}, {'story_id': 'US-047', 'dependency_reason': 'Shares the core game-end detection logic. The system must be able to distinguish between a win (this story) and a loss.'}, {'story_id': 'US-048', 'dependency_reason': 'The victory screen must contain a button that navigates to the Game Summary screen.'}, {'story_id': 'US-064', 'dependency_reason': 'The win event triggers the logic for updating the Top Score History. The data displayed on the victory screen is the same data used for a high score entry.'}, {'story_id': 'US-066', 'dependency_reason': 'The visual and audio assets for the victory screen must be part of the theme system.'}], 'technical_dependencies': ['A robust Game State Manager that tracks player statuses (e.g., Active, Bankrupt).', 'A UI Manager capable of displaying modal screens over the main game view.', 'An Audio Manager to play the victory fanfare.', 'A completed Bankruptcy module that correctly handles asset transfer and player status changes.'], 'data_dependencies': ['Access to the final GameState object to calculate and display statistics.', "Access to the Player Profile data for the player's name."], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['The transition from the game board to the victory screen must complete in under 500ms on recommended hardware.', 'Visual effects (e.g., confetti) must not cause the frame rate to drop below 45 FPS.'], 'security': ['N/A for this feature.'], 'usability': ['Navigation options must be clear and unambiguous.', "The player should not feel 'stuck' on this screen; exit paths must be obvious."], 'accessibility': ['Adherence to WCAG 2.1 AA standards for text contrast.'], 'compatibility': ['The screen must render correctly across all supported aspect ratios (16:9, 16:10, 21:9) as per SRS 2.5.']}, 'implementation_considerations': {'complexity_assessment': 'Medium', 'complexity_factors': ['Requires careful state management to cleanly stop the game loop and transition to the victory UI.', 'Integration with the theme system for assets adds a layer of complexity.', 'Requires coordination with multiple other features (Summary Screen, High Scores).', 'Creation of high-quality visual and audio assets.'], 'technical_risks': ['Potential for race conditions if the game-end state is not handled atomically.', 'Incorrect calculation of final net worth if not carefully implemented according to the rules.'], 'integration_points': ['GameStateManager: Listens for player bankruptcy events to trigger the win check.', 'UIManager: Receives the command to display the victory screen.', 'StatisticsManager/DatabaseService: The win event triggers a call to save game stats and update high scores.', 'ThemeManager: The victory screen must query this service for the correct visual and audio assets.']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E'], 'test_scenarios': ['Win a game with 1 AI opponent.', 'Win a game with 3 AI opponents.', 'Verify all displayed statistics are accurate against a known final game state.', 'Test navigation to the Game Summary screen.', 'Test navigation back to the Main Menu.', "Switch themes and verify the victory screen's appearance and audio changes accordingly.", 'Use a test save file where the final two AIs go bankrupt simultaneously.'], 'test_data_needs': ['A predefined game state file (as per SRS 2.7) where the human player is one move away from bankrupting the final opponent.'], 'testing_tools': ['NUnit for unit tests.', 'Unity Test Framework for integration tests.']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by at least one other developer', 'Unit tests for win-condition logic and stat calculation achieve >80% coverage', 'Integration testing for the bankruptcy-to-victory-screen flow is completed successfully', 'User interface reviewed and approved by the project lead/designer', 'Performance on recommended hardware is verified to meet requirements', 'All visual and audio assets are implemented and correctly linked to the theme system', 'Navigation to dependent screens (Main Menu, Game Summary) is fully functional', 'Story deployed and verified in the staging environment'], 'planning_information': {'story_points': '5', 'priority': 'High', 'sprint_considerations': ['This story is a major milestone as it completes a core gameplay loop (start -> win).', 'Should be scheduled after core bankruptcy logic is stable.', "Asset creation (art, sound) can be done in parallel but must be completed for the story to be 'Done'."], 'release_impact': ["Critical for the Minimum Viable Product (MVP). The game is not considered 'complete' without a win screen."]}}