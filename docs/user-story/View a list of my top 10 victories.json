{'story_metadata': {'story_id': 'US-064', 'elaboration_date': '2025-01-24', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'View a list of my top 10 victories', 'as_a_user_story': "As a competitive player who tracks my performance, I want to access a Top 10 High Score screen from the main menu, so that I can review my most successful victories, see how I'm improving, and be motivated to beat my own records.", 'user_persona': 'The human player who has completed one or more games.', 'business_value': 'Increases long-term player engagement and replayability by providing a clear goal for players to surpass their previous best performances.', 'functional_area': 'Player Profile & Statistics', 'story_theme': 'Player Progression and Replayability'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Displaying a full list of top 10 scores', 'scenario_type': 'Happy_Path', 'given': 'the player has won 10 or more games and the victories are recorded in the local database', 'when': "the player selects the 'Top Scores' option from the main menu", 'then': "a screen is displayed showing a list of exactly 10 entries, titled 'Top 10 Victories'.", 'and': 'each entry displays the Rank (1-10), Player Profile Name, Final Net Worth, Game Duration, and Total Turns.', 'validation_notes': 'Verify the UI displays 10 rows and the sorting order is correct based on a pre-populated database.'}, {'criteria_id': 'AC-002', 'scenario': 'Displaying fewer than 10 scores when the player has fewer than 10 wins', 'scenario_type': 'Edge_Case', 'given': 'the player has won 4 games and these are the only victories recorded', 'when': "the player navigates to the 'Top Scores' screen", 'then': 'the list displays exactly 4 entries, sorted correctly.', 'and': 'the UI does not show empty rows for ranks 5 through 10.', 'validation_notes': 'Test with a database containing a small number of victory records (e.g., 1, 4, 9) and confirm the UI adapts correctly.'}, {'criteria_id': 'AC-003', 'scenario': 'Displaying a message when the player has no recorded wins', 'scenario_type': 'Edge_Case', 'given': 'the player has not yet won a game', 'when': "the player navigates to the 'Top Scores' screen", 'then': "a user-friendly message is displayed, such as 'No victories recorded yet. Play and win a game to see your name in lights!'.", 'and': 'the score table/list is not displayed.', 'validation_notes': 'Test with a fresh player profile or an empty high scores table in the database.'}, {'criteria_id': 'AC-004', 'scenario': 'A new victory is correctly added to a full high score list', 'scenario_type': 'Happy_Path', 'given': "the player's top 10 list is full, with the 10th best score having a net worth of $5000", 'when': 'the player wins a new game with a final net worth of $6000', 'then': 'the new victory record is added to the top scores list.', 'and': 'the list remains sorted and contains exactly 10 entries.', 'validation_notes': 'Requires an end-to-end test: populate the DB with 10 scores, complete a game with a score that qualifies, then re-check the Top Scores screen.'}, {'criteria_id': 'AC-005', 'scenario': 'A new victory does not qualify for the full high score list', 'scenario_type': 'Alternative_Flow', 'given': "the player's top 10 list is full, with the 10th best score having a net worth of $5000", 'when': 'the player wins a new game with a final net worth of $4900', 'then': 'the Top Scores list remains unchanged.', 'validation_notes': 'E2E test: populate the DB with 10 scores, complete a game with a score that does not qualify, and verify the list has not changed.'}, {'criteria_id': 'AC-006', 'scenario': 'Correctly sorting entries with a tied net worth', 'scenario_type': 'Edge_Case', 'given': 'the database contains two victory records with the exact same Final Net Worth', 'and': 'Victory A was achieved in 50 turns, and Victory B was achieved in 55 turns', 'when': "the player views the 'Top Scores' screen", 'then': 'Victory A is ranked higher (appears first) in the list than Victory B.', 'validation_notes': 'Manually insert two records with identical net worth but different turn counts into the test database and verify the secondary sort order.'}], 'user_interface_requirements': {'ui_elements': ["A button on the Main Menu labeled 'Top Scores'.", 'A dedicated screen for displaying the high scores.', "A clear title, e.g., 'Top 10 Victories'.", "A tabular display with columns: 'Rank', 'Name', 'Final Net Worth', 'Game Duration', 'Total Turns'.", "A 'Back' or 'Return to Menu' button.", "An 'Export to .txt' button (functionality implemented in US-065)."], 'user_interactions': ["User clicks 'Top Scores' on the main menu to open the screen.", 'User can view the list of scores.', "User clicks 'Back' to return to the previous screen (Main Menu)."], 'display_requirements': ['Final Net Worth should be formatted as currency (e.g., $10,500).', 'Game Duration should be formatted clearly (e.g., HH:MM:SS or M minutes, S seconds).'], 'accessibility_needs': ['Text must have sufficient contrast against the background.', 'The list should be navigable using keyboard controls (up/down arrows).']}, 'business_rules': [{'rule_id': 'BR-001', 'rule_description': 'The high score list must contain a maximum of 10 entries.', 'enforcement_point': 'When a new victory is recorded and evaluated for inclusion in the list.', 'violation_handling': 'If a new score qualifies for the list and the list is full, the lowest-ranking score is permanently removed.'}, {'rule_id': 'BR-002', 'rule_description': "The primary sorting key for the list is 'Final Net Worth' in descending order.", 'enforcement_point': 'When querying the database to display the list.', 'violation_handling': 'N/A - This is a data retrieval rule.'}, {'rule_id': 'BR-003', 'rule_description': "In case of a tie in 'Final Net Worth', the secondary sort key is 'Total Turns' in ascending order. The tertiary sort key is 'Game Duration' in ascending order.", 'enforcement_point': 'When querying the database to display the list.', 'violation_handling': 'N/A - This is a data retrieval rule.'}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-011', 'dependency_reason': 'A player profile with a name is required to associate the score with a player.'}, {'story_id': 'US-046', 'dependency_reason': 'The game must have a defined win condition to trigger the recording of a victory.'}, {'story_id': 'US-048', 'dependency_reason': 'The game summary logic is needed to calculate the final net worth, game duration, and total turns at the end of a match.'}], 'technical_dependencies': ['A functional SQLite database connection and data access layer, as specified in SRS 9.1.1.', 'A defined database schema for storing high score records.'], 'data_dependencies': ["The system must be capable of capturing the player's profile name, final net worth, game duration, and total turns upon game completion."], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['The Top Scores screen must load and display data from the local database in under 500 milliseconds.'], 'security': ['The local database file should be protected against trivial tampering, though high-level security is not required for this offline feature.'], 'usability': ['The screen must be easily accessible from the main menu and simple to understand for a non-technical user.'], 'accessibility': ['WCAG 2.1 AA standards for text contrast should be followed.'], 'compatibility': ['The feature must function correctly on all supported Windows OS versions (Windows 10 and 11).']}, 'implementation_considerations': {'complexity_assessment': 'Low', 'complexity_factors': ['Requires a simple UI screen with a data grid.', 'Involves a straightforward SQL query to fetch and sort data.', 'The logic for saving a score is handled by the game-end workflow (US-046/US-048), making this story primarily a read-only feature.'], 'technical_risks': ['The schema for the high scores table must be designed to accommodate all required data fields and allow for efficient sorting.'], 'integration_points': ['Main Menu UI: A button must be added to navigate to this screen.', 'Game End Logic (from US-046/US-048): The system must call the high score service to check and potentially save a new score after a player wins.']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E'], 'test_scenarios': ['Verify screen with 0, 1, 5, 10, and 11+ victory records in the database.', 'Verify correct primary sorting by net worth.', 'Verify correct secondary and tertiary sorting for tie-breaking.', 'Verify data formatting (currency, time) is correct.', 'Verify navigation to and from the screen works as expected.'], 'test_data_needs': ['A script to populate the SQLite database with various high score scenarios, including ties and a full list.'], 'testing_tools': ['NUnit for unit tests.', 'A database client for setting up and verifying test data in the SQLite file.']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by at least one other developer', 'Unit tests for the data access and sorting logic are implemented with >80% coverage and are passing', 'Integration testing of the UI with the database is completed successfully', 'User interface matches design specifications and is approved', 'Performance requirement of <500ms load time is verified', 'The feature is successfully tested against an empty, partially full, and full database', 'Documentation for the high score database schema is created/updated'], 'planning_information': {'story_points': '2', 'priority': 'Medium', 'sprint_considerations': ['This story is dependent on the completion of the core game loop and win-condition logic.', 'It is a good candidate for parallel development alongside other UI or menu-related stories.'], 'release_impact': ['This is a key feature for player retention and should be included in the initial V1.0 release.']}}