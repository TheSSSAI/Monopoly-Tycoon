{'story_metadata': {'story_id': 'US-045', 'elaboration_date': '2025-01-17', 'development_readiness': 'Complete'}, 'story_narrative': {'title': "Automatically pay rent when I land on an opponent's property", 'as_a_user_story': "As a player, I want the game to automatically calculate and process my rent payment when I land on an opponent's property, so that the game flows smoothly and the rules are enforced correctly without manual intervention.", 'user_persona': 'The human player whose turn it is.', 'business_value': 'Ensures adherence to core game rules, improves the pace of play, and provides a seamless user experience by automating a fundamental game transaction. This is critical for game authenticity and playability.', 'functional_area': 'Core Gameplay Mechanics', 'story_theme': 'Player Turn Cycle'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': "Player lands on an opponent's undeveloped property (not part of a monopoly) and can afford rent", 'scenario_type': 'Happy_Path', 'given': 'I am a player with $1000 cash, and an AI opponent owns St. Charles Place (price $140, rent $10) which is not part of a monopoly and is not mortgaged', 'when': "My token's movement ends on St. Charles Place", 'then': "My cash is automatically reduced to $990, the AI opponent's cash increases by $10, and a notification confirms 'Paid $10 rent to [AI Name]'.", 'validation_notes': 'Verify player and AI cash balances in the PlayerState objects and check the game log for the transaction.'}, {'criteria_id': 'AC-002', 'scenario': "Player lands on an opponent's property with houses and can afford rent", 'scenario_type': 'Happy_Path', 'given': 'I am a player with $1000 cash, and an AI opponent owns Illinois Avenue with 3 houses (rent $750) and it is not mortgaged', 'when': "My token's movement ends on Illinois Avenue", 'then': "My cash is automatically reduced to $250, the AI opponent's cash increases by $750, and a notification confirms 'Paid $750 rent to [AI Name]'.", 'validation_notes': 'Verify cash balances are updated correctly in the UI and game state.'}, {'criteria_id': 'AC-003', 'scenario': "Player lands on an opponent's undeveloped property that is part of a monopoly", 'scenario_type': 'Happy_Path', 'given': 'I am a player with $500 cash, an AI opponent owns both Park Place (rent $35) and Boardwalk (rent $50), and both are undeveloped and unmortgaged', 'when': "My token's movement ends on Park Place", 'then': "The rent is doubled to $70, my cash is reduced to $430, the AI's cash increases by $70, and a notification confirms the payment.", 'validation_notes': 'Verify the system correctly identifies the monopoly and doubles the base rent for an undeveloped property.'}, {'criteria_id': 'AC-004', 'scenario': "Player lands on an opponent's Railroad", 'scenario_type': 'Happy_Path', 'given': 'I am a player with $500 cash, and an AI opponent owns 3 Railroads', 'when': "My token's movement ends on one of the AI's owned Railroads", 'then': "The rent is calculated as $100, my cash is reduced to $400, the AI's cash increases by $100, and a notification is shown.", 'validation_notes': 'Test this for 1, 2, 3, and 4 owned railroads to ensure rent scales correctly ($25, $50, $100, $200).'}, {'criteria_id': 'AC-005', 'scenario': "Player lands on an opponent's Utility", 'scenario_type': 'Happy_Path', 'given': 'I am a player with $500 cash, an AI opponent owns both Utilities (Electric Company, Water Works), and my last dice roll was a total of 9', 'when': "My token's movement ends on Water Works", 'then': "The rent is calculated as 10 times the dice roll (10 * 9 = $90), my cash is reduced to $410, the AI's cash increases by $90, and a notification is shown.", 'validation_notes': 'Test with one owned utility (4x dice roll) and two owned utilities (10x dice roll).'}, {'criteria_id': 'AC-006', 'scenario': "Player lands on an opponent's mortgaged property", 'scenario_type': 'Edge_Case', 'given': 'I am a player with $1000 cash, and an AI opponent owns Boardwalk, but it is mortgaged', 'when': "My token's movement ends on Boardwalk", 'then': "No rent is charged, my cash remains $1000, the AI's cash is unchanged, and a notification indicates 'No rent due on mortgaged property'.", 'validation_notes': 'Verify no transaction occurs and the turn proceeds to the next phase.'}, {'criteria_id': 'AC-007', 'scenario': 'Player lands on their own property', 'scenario_type': 'Edge_Case', 'given': 'I am a player with $1000 cash, and I own Boardwalk', 'when': "My token's movement ends on Boardwalk", 'then': 'No rent is charged and my cash remains $1000.', 'validation_notes': 'Verify no transaction occurs.'}, {'criteria_id': 'AC-008', 'scenario': 'Player has insufficient cash to pay rent', 'scenario_type': 'Alternative_Flow', 'given': "I am a player with $50 cash and no mortgagable assets, and I land on an opponent's property where the rent is $100", 'when': 'The rent payment is triggered', 'then': 'The system identifies I cannot pay the debt and initiates the bankruptcy process.', 'validation_notes': 'Verify that the game does not crash and correctly transitions the player state to a pre-bankruptcy or asset-liquidation phase. The full bankruptcy is handled by US-047.'}], 'user_interface_requirements': {'ui_elements': ['Non-intrusive notification panel/toast message'], 'user_interactions': ['No direct user interaction is required; the process is fully automated.'], 'display_requirements': ['The notification must clearly state the amount of rent paid, to whom it was paid, and for which property.', 'The HUD must immediately update the cash values for both the paying and receiving players.', "A visual effect (e.g., animated numbers decreasing/increasing) should accompany the cash transaction to draw the player's attention to it."], 'accessibility_needs': ["Ensure the notification text is high-contrast and legible. Provide a distinct audio cue for the transaction that is different from other sounds (e.g., a 'ka-ching' for receiving rent vs. a 'coin drop' for paying)."]}, 'business_rules': [{'rule_id': 'BR-RENT-01', 'rule_description': 'Rent is not collected on mortgaged properties.', 'enforcement_point': 'During rent calculation, after a player lands on a property.', 'violation_handling': "The rent calculation function must return zero if the property's `is_mortgaged` flag is true."}, {'rule_id': 'BR-RENT-02', 'rule_description': 'Rent on undeveloped properties in a complete color group is doubled.', 'enforcement_point': 'During rent calculation.', 'violation_handling': 'The calculation logic must check if the owner possesses all properties in the color group before returning the final rent amount.'}, {'rule_id': 'BR-RENT-03', 'rule_description': 'A player who cannot pay rent after liquidating all assets is declared bankrupt.', 'enforcement_point': 'After calculating rent and determining the player has insufficient cash.', 'violation_handling': 'The game must trigger the bankruptcy sequence (covered in US-047).'}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-016', 'dependency_reason': 'Player token must complete its movement to a new space to trigger the rent event.'}, {'story_id': 'US-030', 'dependency_reason': 'Properties must have an owner for rent to be applicable.'}, {'story_id': 'US-033', 'dependency_reason': 'The state of property development (houses/hotels) is required for accurate rent calculation.'}, {'story_id': 'US-038', 'dependency_reason': 'The mortgaged status of a property is required to determine if rent should be collected.'}, {'story_id': 'US-047', 'dependency_reason': 'The bankruptcy logic must be available to be called if a player cannot afford the rent.'}], 'technical_dependencies': ['Game State Manager: Must provide access to all player states and the board state.', 'Rule Engine: A module or service responsible for calculating rent based on the game rules.', 'UI/HUD Manager: To display notifications and update player cash values.', 'Logging Service (Serilog): To log the financial transaction for auditability as per requirement 2.8.'], 'data_dependencies': ['Property Data: Access to a data structure containing base rent, rent with houses/hotels, and mortgage value for all properties.'], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ["The rent calculation and transaction must be processed instantly from the user's perspective (<100ms) to not disrupt game flow."], 'security': ['N/A for this feature as it is offline and involves no sensitive data.'], 'usability': ['The transaction and its consequences on player cash must be communicated clearly and unambiguously through the UI.'], 'accessibility': ['Visual and audio cues must be provided for the transaction.'], 'compatibility': ['N/A']}, 'implementation_considerations': {'complexity_assessment': 'Medium', 'complexity_factors': ['The rent calculation logic is complex, with multiple rules based on property type (standard, railroad, utility), development level, and monopoly status.', "Requires querying the game state for multiple pieces of information (property owner, owner's other properties, property mortgage status, last dice roll).", 'The hand-off to the bankruptcy system for players with insufficient funds is a critical and potentially complex integration point.'], 'technical_risks': ['Risk of miscalculating rent, which is a critical gameplay bug. Requires extensive unit testing.', 'Failure to correctly trigger the bankruptcy flow could lead to a soft-lock or invalid game state (e.g., a player with negative cash).'], 'integration_points': ['Game Turn Controller: Triggers this logic after the movement phase.', 'PlayerState Object: Read/write access to player cash.', 'BoardState Object: Read access to property ownership, development, and mortgage status.', 'Bankruptcy Module: To initiate the bankruptcy process.', 'UI Notification System: To display the transaction result.']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E'], 'test_scenarios': ['Verify rent calculation for every property type under all ownership/development conditions.', 'Test the flow where a player lands on a mortgaged property.', 'Test the end-to-end flow from landing on a space to cash being updated in the HUD.', 'Test the critical scenario where a player cannot afford rent and must enter the bankruptcy process.'], 'test_data_needs': ['Pre-configured game state files (as per req 2.7) to set up specific scenarios, such as an opponent owning a full monopoly with hotels, or a player having very low cash.', 'A comprehensive data set of all property rent values.'], 'testing_tools': ['NUnit for unit tests.', 'Unity Test Framework for integration tests.']}, 'definition_of_done': ['All acceptance criteria validated and passing.', 'Code reviewed and approved by at least one other developer.', 'Unit tests for the rent calculation logic cover all property types and rule variations with at least 80% coverage.', 'Integration testing confirms the correct interaction between movement, rent payment, and UI updates.', 'The trigger for the bankruptcy process is successfully tested.', 'Visual and audio feedback for the transaction is implemented and reviewed.', "The transaction is logged to the game's log file with all required details (turn, players, amount, property) as per auditability requirements.", 'Story deployed and verified in the staging/main development branch.'], 'planning_information': {'story_points': '5', 'priority': 'High', 'sprint_considerations': ['This is a foundational gameplay story. It is a blocker for any meaningful game progression and testing.', 'Requires prerequisite stories for property ownership and player state to be completed first.'], 'release_impact': ['Critical for the Minimum Viable Product (MVP). The game is unplayable without this feature.']}}