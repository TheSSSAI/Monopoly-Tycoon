{'story_metadata': {'story_id': 'US-026', 'elaboration_date': '2025-01-15', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Choose to pay $200 or 10% of my net worth for Income Tax', 'as_a_user_story': 'As a human player, I want to be presented with a clear choice between paying a flat $200 or 10% of my total net worth when I land on the Income Tax space, so that I can make the most strategic financial decision to preserve my cash and improve my chances of winning, in accordance with the official game rules.', 'user_persona': 'Human Player', 'business_value': 'Improves game authenticity by correctly implementing a core official rule, enhances player engagement by providing a meaningful strategic choice, and increases the skill ceiling of the game.', 'functional_area': 'Core Gameplay Mechanics', 'story_theme': 'Game Board Space Actions'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Player lands on Income Tax and is presented with payment options', 'scenario_type': 'Happy_Path', 'given': "The human player's turn is active and their token's movement ends on the 'Income Tax' space", 'when': "The player's movement phase concludes", 'then': 'The game flow pauses and a modal dialog is displayed to the player.', 'validation_notes': 'Verify that the game does not proceed to the next player and that a UI dialog appears, blocking other interactions.'}, {'criteria_id': 'AC-002', 'scenario': 'The Income Tax dialog correctly calculates and displays the 10% option', 'scenario_type': 'Happy_Path', 'given': 'The player has $500 cash, owns properties with a total printed price of $1200, and has buildings with a total purchase price of $300 (Total Net Worth = $2000)', 'when': 'The Income Tax dialog is displayed', 'then': "The dialog must present two choices: one for a flat '$200' and another for '10% of Net Worth' which displays the calculated value of '$200'.", 'validation_notes': 'Check that the net worth calculation correctly sums cash, printed property values (including mortgaged ones), and building purchase prices as per SRS 4.6. The displayed value for the 10% option must be accurate.'}, {'criteria_id': 'AC-003', 'scenario': 'Player chooses the cheaper flat fee option', 'scenario_type': 'Happy_Path', 'given': "The player has $1000 cash and a total net worth of $2500, and the Income Tax dialog is displayed with options '$200' and '$250'", 'when': "The player selects the '$200' option", 'then': "The player's cash balance is reduced to $800, the dialog closes, and the player's turn ends.", 'validation_notes': "Verify the player's cash in the PlayerState object is correctly updated and the game proceeds to the next player's turn."}, {'criteria_id': 'AC-004', 'scenario': 'Player chooses the cheaper 10% option', 'scenario_type': 'Happy_Path', 'given': "The player has $1000 cash and a total net worth of $1500, and the Income Tax dialog is displayed with options '$200' and '$150'", 'when': "The player selects the '$150' option", 'then': "The player's cash balance is reduced to $850, the dialog closes, and the player's turn ends.", 'validation_notes': "Verify the player's cash in the PlayerState object is correctly updated and the game proceeds to the next player's turn."}, {'criteria_id': 'AC-005', 'scenario': 'Player lacks sufficient cash to pay the chosen tax', 'scenario_type': 'Edge_Case', 'given': 'The player has $100 cash and a total net worth of $1500, and the Income Tax dialog is displayed', 'when': "The player selects either the '$200' or '$150' option", 'then': 'The game initiates the bankruptcy/asset liquidation flow, requiring the player to mortgage properties or sell buildings to cover the chosen debt before their turn can end.', 'validation_notes': 'Verify that the game does not allow a negative cash balance and correctly transitions the player to the asset management interface to raise the required funds.'}, {'criteria_id': 'AC-006', 'scenario': 'Player has zero net worth', 'scenario_type': 'Edge_Case', 'given': 'The player has $0 cash and owns no properties or buildings (Total Net Worth = $0)', 'when': 'The Income Tax dialog is displayed', 'then': "The dialog shows options for '$200' and '$0'.", 'validation_notes': "If the player chooses the '$0' option, their cash remains at $0 and their turn ends without triggering the bankruptcy flow."}], 'user_interface_requirements': {'ui_elements': ['Modal dialog window', 'Two distinct, clearly labeled buttons for the payment options', "Text field displaying the title (e.g., 'Income Tax')", 'Optional: A tooltip or expandable section that shows a breakdown of the net worth calculation for transparency.'], 'user_interactions': ['The game must pause, awaiting player input on the modal dialog.', 'The player must click one of the two buttons to make a choice.', 'The dialog cannot be closed or bypassed without selecting an option.'], 'display_requirements': ['The dialog must clearly state the two options.', "The 10% option must display the calculated monetary value (e.g., 'Pay 10% ($185)')."], 'accessibility_needs': ['The dialog and its buttons must be fully navigable using a keyboard.', 'All text must meet WCAG AA contrast ratio standards.', 'A screen reader must announce the purpose of the dialog and read out the text on both buttons, including the calculated value.']}, 'business_rules': [{'rule_id': 'BR-TAX-01', 'rule_description': 'Total net worth is calculated as: cash on hand + the printed price of all owned properties (mortgaged or not) + the purchase price of all buildings (houses/hotels).', 'enforcement_point': 'During the calculation of the 10% tax option.', 'violation_handling': 'N/A - System calculation.'}, {'rule_id': 'BR-TAX-02', 'rule_description': 'A player must pay their tax debt. If they have insufficient cash, they must raise the required funds by selling buildings or mortgaging properties before their turn can end.', 'enforcement_point': 'After the player selects a tax option.', 'violation_handling': "The game state transitions to an 'Asset Liquidation' phase until the debt is covered. If the debt cannot be covered after liquidating all assets, the player is declared bankrupt."}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-016', 'dependency_reason': 'Requires the core game loop and token movement logic to be functional.'}, {'story_id': 'US-038', 'dependency_reason': 'The bankruptcy/liquidation flow requires the ability to mortgage properties.'}, {'story_id': 'US-033', 'dependency_reason': 'The bankruptcy/liquidation flow requires the ability to manage (and sell) buildings.'}, {'story_id': 'US-047', 'dependency_reason': 'Requires the bankruptcy system to handle cases where a player cannot raise sufficient funds.'}], 'technical_dependencies': ['A robust PlayerState management service that tracks cash, properties, and buildings.', 'A UI service capable of creating and managing modal dialogs.', 'A GameState controller that can pause and resume the turn-based flow.', 'A dedicated service or module for calculating player net worth.'], 'data_dependencies': ["Access to the board configuration data to identify the 'Income Tax' space.", 'Access to property data for their printed values and building data for their purchase prices.'], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['The net worth calculation and display of the dialog must be visually instantaneous (under 100ms).'], 'security': ['N/A for an offline, single-player feature.'], 'usability': ['The choice presented to the player must be clear and unambiguous.', 'It should be immediately obvious which option is financially better for the player.'], 'accessibility': ['Must adhere to the accessibility standards defined in the UI requirements.'], 'compatibility': ['The UI dialog must render correctly on all supported aspect ratios (16:9, 16:10, 21:9).']}, 'implementation_considerations': {'complexity_assessment': 'Medium', 'complexity_factors': ['The primary complexity lies in the robust integration with the asset liquidation/bankruptcy system. The UI and calculation logic are straightforward.', 'The net worth calculation logic must be precise and handle all asset types correctly, including mortgaged properties.', 'Ensuring the game state machine correctly handles the pause/resume logic around this player decision.'], 'technical_risks': ['If the bankruptcy system is not well-defined, this story could be blocked or require significant additional work to implement the asset liquidation flow.', 'Potential for bugs in the net worth calculation if it fails to account for all asset states (e.g., forgetting to include mortgaged properties at their full printed value).'], 'integration_points': ['PlayerState Service (to get asset data and update cash)', 'UI Service (to display the dialog)', 'Game Flow Controller (to pause/resume turns)', 'Bankruptcy/Asset Management System (to handle cash shortfalls)']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E'], 'test_scenarios': ['Verify net worth calculation with a player owning no properties, some properties, a full monopoly, mortgaged properties, and properties with houses/hotels.', 'Test the full user flow where 10% is cheaper.', 'Test the full user flow where $200 is cheaper.', 'Test the scenario where the player has exactly enough cash for one option but not the other.', 'Test the integration with the bankruptcy system by creating a game state where the player has very low cash but high asset value.'], 'test_data_needs': ['Pre-configured GameState files representing various player financial situations (e.g., early game, mid-game with monopolies, late game near bankruptcy).'], 'testing_tools': ['NUnit for unit tests.', 'Unity Test Framework for integration tests.']}, 'definition_of_done': ['All acceptance criteria validated and passing.', 'Code reviewed and approved by at least one other developer.', 'Unit tests for the NetWorthCalculator service are written and achieve a minimum of 80% code coverage.', 'Integration tests covering the choice-to-payment and choice-to-bankruptcy-flow scenarios are implemented and passing.', 'The UI dialog has been reviewed and approved for clarity and usability.', 'The feature has been manually tested and verified in a development build.', 'All related documentation has been updated.', 'The story has been deployed and verified in the staging environment.'], 'planning_information': {'story_points': '5', 'priority': 'High', 'sprint_considerations': ['This story is dependent on the completion of core asset management and bankruptcy systems. It should be scheduled in a sprint after those foundational pieces are stable.', 'Requires collaboration between UI, gameplay logic, and game state developers.'], 'release_impact': "This is a critical feature for the initial release (v1.0) as it's a fundamental rule of the game."}}