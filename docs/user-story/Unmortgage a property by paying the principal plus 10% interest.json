{'story_metadata': {'story_id': 'US-039', 'elaboration_date': '2025-01-17', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Unmortgage a property by paying the principal plus 10% interest', 'as_a_user_story': 'As a Human Player managing my assets, I want to pay the bank to unmortgage one of my properties so that I can start collecting rent on it again and enable future development.', 'user_persona': 'The Human Player who is actively managing their property portfolio to generate income and win the game.', 'business_value': "Enables a critical economic action required for authentic Monopoly gameplay. Unmortgaging properties is a key strategy for increasing revenue streams (rent) and progressing towards a win condition, directly supporting the core objective of 'Authenticity'.", 'functional_area': 'Property and Economic Management', 'story_theme': 'Core Gameplay Mechanics'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': 'Successful Unmortgage with Sufficient Funds', 'scenario_type': 'Happy_Path', 'given': "I am the active player, it is my turn before I roll the dice, and I own 'St. Charles Place' which is mortgaged (mortgage value $70)", 'when': "I select 'St. Charles Place' in my property management screen, confirm the action to unmortgage it for $77, and I have more than $77 cash", 'then': 'exactly $77 ($70 principal + $7 interest) is deducted from my cash balance', 'and': 'the transaction is logged at INFO level with the turn number, my player ID, property ID, and the amount paid, as per SRS 2.8.', 'validation_notes': 'Verify cash deduction is correct. Verify UI updates in real-time. Verify that if an opponent lands on the property later, rent is collected.'}, {'criteria_id': 'AC-002', 'scenario': 'Attempted Unmortgage with Insufficient Funds', 'scenario_type': 'Error_Condition', 'given': "I am the active player, it is my turn, and I own 'St. Charles Place' which is mortgaged (mortgage value $70)", 'when': 'I attempt to unmortgage it for $77, but I only have $76 cash', 'then': 'the transaction is blocked', 'and': "'St. Charles Place' remains in a mortgaged state.", 'validation_notes': "Verify that the UI button for unmortgaging is disabled/greyed out if funds are insufficient, preventing the 'when' action from being initiated."}, {'criteria_id': 'AC-003', 'scenario': "Action Availability During Player's Turn", 'scenario_type': 'Alternative_Flow', 'given': "I am the active player and it is my turn, during the 'Pre-Roll Management Phase'", 'when': 'I open the property management interface', 'then': 'the option to unmortgage my properties is available and interactive.', 'validation_notes': 'Check that the unmortgage button is present and clickable if conditions are met.'}, {'criteria_id': 'AC-004', 'scenario': "Action Unavailability Outside Player's Turn", 'scenario_type': 'Error_Condition', 'given': "it is an AI opponent's turn", 'when': 'I attempt to interact with my properties in the property management interface', 'then': "the 'Unmortgage' button and other management actions are disabled or the interface is in a read-only state.", 'validation_notes': "Verify that no property management actions can be taken when it is not the human player's turn."}, {'criteria_id': 'AC-005', 'scenario': 'Game State Persistence after Save/Load', 'scenario_type': 'Edge_Case', 'given': "I have successfully unmortgaged 'St. Charles Place'", 'when': 'I save the game, exit, and then load that save file', 'then': "'St. Charles Place' is correctly loaded in its unmortgaged state", 'and': 'my cash balance reflects the deduction from the unmortgage transaction.', 'validation_notes': 'Perform the unmortgage action, save the game immediately, load, and verify the state of the property and player cash.'}], 'user_interface_requirements': {'ui_elements': ["An 'Unmortgage' button within the Property Management Interface (US-052).", 'A visual indicator (e.g., color overlay, icon) on properties to clearly distinguish mortgaged status.', "A confirmation dialog: 'Unmortgage [Property Name] for $[Amount]? Yes/No'.", "A tooltip or text label on the 'Unmortgage' button displaying the exact cost."], 'user_interactions': ['Player selects a mortgaged property from their portfolio.', "If player has sufficient funds, the 'Unmortgage' button is enabled.", "If player has insufficient funds, the 'Unmortgage' button is disabled.", "Player clicks the 'Unmortgage' button and confirms via the dialog to complete the transaction."], 'display_requirements': ["The player's cash in the main HUD (US-049) must update immediately after the transaction.", 'The visual state of the property on the main board (US-050) and in the management UI (US-052) must update immediately.'], 'accessibility_needs': ["The disabled state of the 'Unmortgage' button must be communicated by more than just color (e.g., greyed out, non-interactive).", 'The cost to unmortgage should be clearly legible text.']}, 'business_rules': [{'rule_id': 'BR-001', 'rule_description': 'The cost to unmortgage a property is its mortgage value plus a 10% interest fee paid to the Bank (SRS 5.4).', 'enforcement_point': "Game logic, when calculating the transaction cost upon a player's request to unmortgage.", 'violation_handling': 'N/A - This is a calculation rule. Incorrect implementation would be a bug.'}, {'rule_id': 'BR-002', 'rule_description': 'A player must have sufficient cash to cover the full unmortgage cost (principal + 10% interest).', 'enforcement_point': "Before enabling the 'Unmortgage' UI button and again in the backend logic before processing the transaction.", 'violation_handling': 'The action is blocked and the user is notified of insufficient funds.'}, {'rule_id': 'BR-003', 'rule_description': 'Property management actions, including unmortgaging, can only be performed by the active player during their turn, before rolling the dice (SRS 4.3).', 'enforcement_point': 'Game flow controller / UI input handler.', 'violation_handling': "The UI for these actions is disabled or read-only when it is not the player's turn."}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-038', 'dependency_reason': 'Must be able to mortgage a property to create the state this story acts upon.'}, {'story_id': 'US-052', 'dependency_reason': 'Requires the dedicated property management interface to host the unmortgage action.'}, {'story_id': 'US-044', 'dependency_reason': 'The primary benefit of unmortgaging (resuming rent collection) depends on the rent collection mechanic.'}], 'technical_dependencies': ['GameState Management System (SRS 4.4): To read/write player cash and property status.', 'Bank/Economy Engine (SRS 5.1): To process the financial transaction.', 'Turn-Based Game Loop Controller (SRS 4.3): To enforce action timing rules.'], 'data_dependencies': ['Property data, specifically the `mortgage_value` for each property.'], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['The transaction and subsequent UI updates must feel instantaneous to the user (<100ms).'], 'security': ['N/A for this feature in an offline, single-player game.'], 'usability': ['The cost to unmortgage must be clearly displayed before the player commits to the action.', 'It must be obvious which properties are mortgaged and which are not.'], 'accessibility': ['Adherence to general accessibility standards for button states (enabled/disabled).'], 'compatibility': ['Functionality must be consistent across all supported Windows versions and display resolutions (SRS 2.3, 2.5).']}, 'implementation_considerations': {'complexity_assessment': 'Low', 'complexity_factors': ['Straightforward business logic (calculation and state change).', 'Primary effort is in UI integration and ensuring real-time feedback.', 'Requires careful state management to ensure the transaction is atomic and correctly saved.'], 'technical_risks': ['Potential for race conditions or partial state updates if the transaction is not handled atomically, which could corrupt a save file.', 'Risk of UI not correctly reflecting the backend game state if data binding is not implemented robustly.'], 'integration_points': ['PlayerState Object (cash)', 'BoardState Object (property status)', 'Property Management UI', 'Main Game HUD (for cash display update)', 'Save/Load System (SRS 9.1)', 'Logging System (SRS 2.6)']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E'], 'test_scenarios': ['Test unmortgage with exact funds.', 'Test unmortgage with more than enough funds.', 'Test unmortgage attempt with one dollar less than required.', "Test that after unmortgaging, rent is collected on the next opponent's landing.", 'Test save/load functionality immediately after unmortgaging a property.'], 'test_data_needs': ['A predefined game state file where the human player has several mortgaged properties and varying amounts of cash to test different scenarios.', 'Property configuration data with known mortgage values.'], 'testing_tools': ['NUnit for unit tests.', 'Unity Test Framework for integration tests.']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by at least one other developer', 'Unit tests for the unmortgage calculation and state change logic are written and achieve >80% coverage for the new code', 'Integration testing confirms the UI action correctly updates the GameState and is reflected back in the UI', 'The unmortgage action is correctly persisted through a save/load cycle', 'The action is correctly logged according to SRS 2.8', 'User interface elements are reviewed and approved for clarity and usability', 'Story deployed and verified in the main development branch'], 'planning_information': {'story_points': '3', 'priority': 'High', 'sprint_considerations': ['This is a core gameplay feature and should be prioritized as soon as its dependencies (US-038, US-052) are complete.', 'Blocking this story will prevent proper testing of the full economic loop of the game.'], 'release_impact': ['Essential for the Minimum Viable Product (MVP). The game is not considered feature-complete without this functionality.']}}