{'story_metadata': {'story_id': 'US-010', 'elaboration_date': '2024-10-27', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Set a unique difficulty level for each AI opponent', 'as_a_user_story': "As a Human Player setting up a new game, I want to independently assign a difficulty level (Easy, Medium, or Hard) to each of my AI opponents so that I can customize the game's challenge to match my skill level and desired experience, enhancing replayability.", 'user_persona': 'The Human Player configuring a new single-player game session.', 'business_value': 'Increases player engagement and replayability by allowing tailored game experiences. Directly supports the core project objective of providing a tunable AI for players of varying skill levels.', 'functional_area': 'Game Setup and Configuration', 'story_theme': 'Player Configuration and Customization'}, 'acceptance_criteria': [{'criteria_id': 'AC-010-01', 'scenario': 'Setting unique difficulties for multiple AI opponents', 'scenario_type': 'Happy_Path', 'given': 'I am on the Game Setup screen and have selected 3 AI opponents', 'when': "I set the difficulty for 'AI 1' to 'Easy', 'AI 2' to 'Hard', and 'AI 3' to 'Medium'", 'then': "The UI must clearly display 'Easy' for AI 1, 'Hard' for AI 2, and 'Medium' for AI 3 respectively.", 'validation_notes': "Verify visually on the setup screen. On game start, inspect the created GameState object to confirm each AI's PlayerState object has the correct 'ai_difficulty' enum/string value assigned."}, {'criteria_id': 'AC-010-02', 'scenario': 'Difficulty selection defaults to a standard value', 'scenario_type': 'Happy_Path', 'given': 'I am on the Game Setup screen', 'when': 'I increase the number of AI opponents from 1 to 2', 'then': "A new UI section for 'AI 2' appears, and its difficulty selector defaults to 'Medium'.", 'validation_notes': "Check the UI to ensure 'Medium' is the pre-selected option for any newly added AI opponent."}, {'criteria_id': 'AC-010-03', 'scenario': 'Difficulty settings are preserved when reducing the number of opponents', 'scenario_type': 'Edge_Case', 'given': "I have configured 3 AI opponents with difficulties 'Hard', 'Easy', and 'Medium'", 'when': 'I reduce the number of AI opponents from 3 to 2', 'then': "The UI for 'AI 3' is removed, and the difficulty settings for 'AI 1' ('Hard') and 'AI 2' ('Easy') remain unchanged.", 'validation_notes': 'Verify that the UI for the remaining opponents does not reset or change its state.'}, {'criteria_id': 'AC-010-04', 'scenario': 'Changing a difficulty setting for one AI does not affect others', 'scenario_type': 'Happy_Path', 'given': "I have configured 2 AI opponents, both set to 'Medium'", 'when': "I change the difficulty for 'AI 1' to 'Hard'", 'then': "The difficulty for 'AI 2' must remain 'Medium'.", 'validation_notes': 'Manually test the independence of the UI controls for each AI slot.'}, {'criteria_id': 'AC-010-05', 'scenario': 'Starting the game with configured difficulties', 'scenario_type': 'Happy_Path', 'given': "I have configured a game with two AI opponents set to 'Easy' and 'Hard'", 'when': 'I start the game', 'then': "The game loads and the internal PlayerState objects for the two AIs must be initialized with 'ai_difficulty' properties of 'Easy' and 'Hard' respectively.", 'validation_notes': 'This must be verified by checking game logs (which should log AI creation with difficulty level) or using a debug inspector to view the live game state objects.'}], 'user_interface_requirements': {'ui_elements': ['A distinct UI control (e.g., dropdown menu, button group) for each active AI opponent slot (1 to 3).', "Labels clearly associating each control with its respective AI opponent (e.g., 'AI 1 Difficulty').", "The control must list the options: 'Easy', 'Medium', 'Hard'."], 'user_interactions': ['The player must be able to click/select a difficulty from the list for each AI.', 'The selection must be visually reflected in the UI immediately.', 'The controls should be enabled only when their corresponding AI slot is active.'], 'display_requirements': ['The currently selected difficulty for each AI must be persistently visible on the Game Setup screen.'], 'accessibility_needs': ['UI controls must be keyboard-navigable.', 'Sufficient color contrast for text and interactive elements.']}, 'business_rules': [{'rule_id': 'BR-010-01', 'rule_description': 'Each AI opponent must have exactly one difficulty level assigned before the game can start.', 'enforcement_point': "Game Setup Screen - 'Start Game' button logic.", 'violation_handling': "The system will enforce a default difficulty ('Medium') if none is explicitly selected, so a violation state is not possible."}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-008', 'dependency_reason': "This story requires the existence of the Game Setup screen, which is established by the 'Start a new game' story."}, {'story_id': 'US-009', 'dependency_reason': 'This story adds controls to the AI opponent slots created by US-009. The mechanism to select the number of opponents must be implemented first.'}], 'technical_dependencies': ['The `PlayerState` data object (SRS 3.2) must include an `ai_difficulty` field.', 'The AI behavior system must be designed to accept a difficulty parameter during initialization (SRS 6.2).', 'A configuration file (JSON) defining the available difficulty levels and their parameters, as per SRS 6.2.'], 'data_dependencies': [], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['Changing a difficulty setting in the UI must have an immediate response (<100ms).'], 'security': [], 'usability': ['The method for setting difficulty should be intuitive and require no explanation for a typical user.'], 'accessibility': ['Adherence to WCAG 2.1 AA standards for UI controls.'], 'compatibility': ['UI elements must render correctly on all supported aspect ratios (16:9, 16:10, 21:9).']}, 'implementation_considerations': {'complexity_assessment': 'Low', 'complexity_factors': ['Requires straightforward UI development for each AI slot.', 'Involves simple state management to hold the selected values.', 'Integration with the game state creation logic is required, which is a well-defined interface.'], 'technical_risks': ['Risk of tight coupling between the UI and the game logic if not implemented with a clear separation of concerns (e.g., using an event-based or MVC/MVVM pattern).'], 'integration_points': ['Game Setup UI module.', 'Game State initialization logic.', 'AI Player instantiation logic.']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E'], 'test_scenarios': ['Verify UI state changes for 1, 2, and 3 AI opponents.', 'Confirm that changing the number of opponents preserves settings for remaining opponents.', 'End-to-end test: Configure a game with specific difficulties, start the game, and verify through logs or debug tools that the AI agents are initialized with the correct difficulty parameters.'], 'test_data_needs': ['N/A for this story, as it generates the configuration data.'], 'testing_tools': ['NUnit for unit tests.', 'Unity Test Framework for integration tests.']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by at least one other developer', 'Unit tests covering the UI state logic are implemented and passing with >80% coverage', 'Integration testing confirms that selected difficulties are correctly passed to the game state on start', 'User interface on the Game Setup screen is implemented as specified and approved', 'The feature is verified as functional on a clean build', 'No regressions are introduced in the Game Setup workflow', 'Story deployed and verified in the staging environment'], 'planning_information': {'story_points': '3', 'priority': 'High', 'sprint_considerations': ['This story should be scheduled in the same sprint as or immediately following US-009, as they are part of the same feature set on the same screen.', 'Dependent on the final data structure of the `PlayerState` object.'], 'release_impact': ['This is a critical feature for the initial release (v1.0) as it directly addresses a core project objective for replayability and challenge tuning.']}}