{'story_metadata': {'story_id': 'US-019', 'elaboration_date': '2025-01-15', 'development_readiness': 'Complete'}, 'story_narrative': {'title': 'Collect $200 salary when passing or landing on GO', 'as_a_user_story': 'As a Player, I want my cash balance to be automatically credited with a $200 salary so that the game correctly follows the official rules and I receive the funds I am entitled to for completing a lap of the board.', 'user_persona': 'Player (Human and AI)', 'business_value': "Ensures adherence to a fundamental game rule, maintaining the game's authenticity and a balanced economy. This directly supports the core objective of replicating standard Monopoly gameplay with high fidelity.", 'functional_area': 'Core Gameplay Mechanics', 'story_theme': 'Game Flow and Board Rules'}, 'acceptance_criteria': [{'criteria_id': 'AC-001', 'scenario': "Player's move passes the GO space", 'scenario_type': 'Happy_Path', 'given': "A player's token is on 'Boardwalk' (space 39) with a cash balance of $500", 'when': "The player rolls a 5, causing their token to move past GO and land on 'Baltic Avenue' (space 3)", 'then': "The player's cash balance is automatically increased to $700 ($500 + $200).", 'validation_notes': "Verify the PlayerState.cash property is updated. Verify the player's HUD visually reflects the new balance. Verify a log entry for the transaction is created."}, {'criteria_id': 'AC-002', 'scenario': "Player's move lands exactly on the GO space", 'scenario_type': 'Happy_Path', 'given': "A player's token is on 'Park Place' (space 37) with a cash balance of $500", 'when': "The player rolls a 3, causing their token to land exactly on 'GO' (space 0)", 'then': "The player's cash balance is automatically increased to $700 ($500 + $200).", 'validation_notes': "Verify the PlayerState.cash property is updated. Verify the player's HUD visually reflects the new balance."}, {'criteria_id': 'AC-003', 'scenario': 'Player is sent to Jail and does not pass GO', 'scenario_type': 'Edge_Case', 'given': "A player's token is on 'Pennsylvania Avenue' (space 28) with a cash balance of $500", 'when': "The player rolls a 2 and lands on the 'Go to Jail' space (space 30)", 'then': "The player's token is moved directly to the 'In Jail' location (space 10) and their cash balance remains $500.", 'validation_notes': "Verify the player's token moves to the Jail space without triggering the GO salary logic. The player's cash balance must not change."}, {'criteria_id': 'AC-004', 'scenario': "Player draws a 'Go to Jail' card", 'scenario_type': 'Edge_Case', 'given': "A player's token is on a Chance or Community Chest space (e.g., space 36) with a cash balance of $500", 'when': "The player draws a card that reads 'Go to Jail. Go directly to Jail. Do not pass GO. Do not collect $200.'", 'then': "The player's token is moved directly to the 'In Jail' location (space 10) and their cash balance remains $500.", 'validation_notes': "Verify the card action moves the player directly to Jail and bypasses the GO salary logic. The player's cash balance must not change."}, {'criteria_id': 'AC-005', 'scenario': 'Player receives visual and audio feedback for collecting salary', 'scenario_type': 'Happy_Path', 'given': "A player's move qualifies them to collect a $200 salary", 'when': 'The salary is credited to their account', 'then': "A non-intrusive visual indicator (e.g., '+ $200' text animation) appears near their HUD element, and a positive confirmation sound effect is played.", 'validation_notes': 'Visually confirm the animation and audibly confirm the sound effect trigger correctly.'}], 'user_interface_requirements': {'ui_elements': ['Player HUD displaying cash balance'], 'user_interactions': ['This is an automatic system action; no direct user interaction is required.'], 'display_requirements': ["The player's cash balance in the HUD must update immediately upon collecting the salary.", "A temporary visual effect (e.g., floating text '+ $200') should be displayed to provide clear feedback."], 'accessibility_needs': ['The visual feedback should be distinct but not rely solely on color. The audio cue provides an alternative channel for feedback.']}, 'business_rules': [{'rule_id': 'BR-GO-001', 'rule_description': 'Players collect a $200 salary for passing or landing on GO.', 'enforcement_point': "During the Movement Phase of a player's turn, after the token's final position is calculated.", 'violation_handling': 'N/A - System must enforce this rule.'}, {'rule_id': 'BR-GO-002', 'rule_description': 'Players sent directly to Jail do not pass GO and do not collect the $200 salary.', 'enforcement_point': "When executing a 'Go to Jail' action from a card, a board space, or rolling three consecutive doubles.", 'violation_handling': 'N/A - System must enforce this rule.'}], 'dependencies': {'prerequisite_stories': [{'story_id': 'US-016', 'dependency_reason': 'Requires the core token movement logic to be in place to determine when a player passes or lands on GO.'}, {'story_id': 'US-049', 'dependency_reason': 'Requires the main game HUD to exist to visually display the updated cash balance to the player.'}], 'technical_dependencies': ['Game State Management system (Requirement 4.4) to access and update PlayerState.cash.', 'Game Board representation (Requirement 4.2) with indexed spaces (0-39).', 'Audio system (Requirement 9.4) to play the confirmation sound effect.'], 'data_dependencies': ['PlayerState object (Requirement 3.2) must be defined and accessible.'], 'external_dependencies': []}, 'non_functional_requirements': {'performance': ['The salary calculation and cash balance update must be processed instantly, with no perceivable delay to the player.'], 'security': ['N/A for this story.'], 'usability': ['The feedback for receiving salary must be clear and unambiguous to the player.'], 'accessibility': ['Provide both visual and audio cues for the event to support players with different sensory abilities.'], 'compatibility': ['Functionality must be consistent across all supported Windows versions and display resolutions.']}, 'implementation_considerations': {'complexity_assessment': 'Low', 'complexity_factors': ["The logic is a straightforward conditional check based on the token's start and end position on the board.", 'Requires careful handling of the board wrap-around (e.g., moving from space 39 to space 3).', "The primary complexity is ensuring the 'Go to Jail' exception correctly bypasses this logic."], 'technical_risks': ['Risk of double-counting salary if the movement logic is not atomic.', "Risk of incorrectly awarding salary on 'Go to Jail' moves if the exception is not handled in all cases (card, space, 3x doubles)."], 'integration_points': ['Integrates with the turn-based Game Flow manager.', 'Integrates with the Player Movement system.', 'Integrates with the UI/HUD update system.', 'Integrates with the Audio system.']}, 'testing_requirements': {'testing_types': ['Unit', 'Integration', 'E2E'], 'test_scenarios': ['Verify salary is awarded when passing GO.', 'Verify salary is awarded when landing on GO.', 'Verify salary is NOT awarded when moving away from GO (e.g., space 2 to space 5).', "Verify salary is NOT awarded when landing on 'Go to Jail' space.", "Verify salary is NOT awarded when drawing a 'Go to Jail' card.", 'Verify salary is NOT awarded when rolling three consecutive doubles.'], 'test_data_needs': ['Predefined game states with players positioned just before the GO space.', "Predefined game states with players positioned to land on the 'Go to Jail' space."], 'testing_tools': ['NUnit for unit tests.', 'Unity Test Framework for integration tests.']}, 'definition_of_done': ['All acceptance criteria validated and passing', 'Code reviewed and approved by team', 'Unit tests covering all scenarios (pass, land, no pass, go to jail) implemented and passing with >95% coverage for the salary calculation module', 'Integration testing completed to verify PlayerState is correctly updated within the game loop', 'User interface feedback (visual and audio) reviewed and approved by a UX designer or product owner', 'Performance requirements verified (no delay in gameplay)', 'Security requirements validated', 'Documentation for the salary calculation logic is updated in the technical docs', 'Story deployed and verified in staging environment'], 'planning_information': {'story_points': '1', 'priority': 'High', 'sprint_considerations': ['This is a foundational rule and should be implemented early in the development cycle, alongside basic player movement and turn management.', 'Dependencies on US-016 and US-049 mean it cannot be started until those are complete.'], 'release_impact': ['Critical for the Minimum Viable Product (MVP). The game is not playable without this core rule.']}}